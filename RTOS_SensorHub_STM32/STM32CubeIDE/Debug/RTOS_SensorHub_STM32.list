
RTOS_SensorHub_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a2c  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08004aec  08004aec  00005aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c9c  08004c9c  0000606c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c9c  08004c9c  00005c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ca4  08004ca4  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ca4  08004ca4  00005ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ca8  08004ca8  00005ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004cac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001224  2000006c  08004d18  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001290  08004d18  00006290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001249c  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fcb  00000000  00000000  00018530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001b500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccc  00000000  00000000  0001c5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b98  00000000  00000000  0001d294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152b0  00000000  00000000  00034e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4d4  00000000  00000000  0004a0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d45b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004048  00000000  00000000  000d45f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  000d863c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004ad4 	.word	0x08004ad4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08004ad4 	.word	0x08004ad4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	4a06      	ldr	r2, [pc, #24]	@ (8000474 <vApplicationGetIdleTaskMemory+0x28>)
 800045c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	4a05      	ldr	r2, [pc, #20]	@ (8000478 <vApplicationGetIdleTaskMemory+0x2c>)
 8000462:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2280      	movs	r2, #128	@ 0x80
 8000468:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b004      	add	sp, #16
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	2000008c 	.word	0x2000008c
 8000478:	2000012c 	.word	0x2000012c

0800047c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b089      	sub	sp, #36	@ 0x24
 8000480:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	4a09      	ldr	r2, [pc, #36]	@ (80004ac <MX_FREERTOS_Init+0x30>)
 8000486:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000488:	c313      	stmia	r3!, {r0, r1, r4}
 800048a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800048c:	c313      	stmia	r3!, {r0, r1, r4}
 800048e:	6812      	ldr	r2, [r2, #0]
 8000490:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000492:	1d3b      	adds	r3, r7, #4
 8000494:	2100      	movs	r1, #0
 8000496:	0018      	movs	r0, r3
 8000498:	f002 fd15 	bl	8002ec6 <osThreadCreate>
 800049c:	0002      	movs	r2, r0
 800049e:	4b04      	ldr	r3, [pc, #16]	@ (80004b0 <MX_FREERTOS_Init+0x34>)
 80004a0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	b009      	add	sp, #36	@ 0x24
 80004a8:	bd90      	pop	{r4, r7, pc}
 80004aa:	46c0      	nop			@ (mov r8, r8)
 80004ac:	08004af8 	.word	0x08004af8
 80004b0:	20000088 	.word	0x20000088

080004b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f002 fd4f 	bl	8002f60 <osDelay>
 80004c2:	e7fb      	b.n	80004bc <StartDefaultTask+0x8>

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b089      	sub	sp, #36	@ 0x24
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	240c      	movs	r4, #12
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	2314      	movs	r3, #20
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f003 ffbf 	bl	8004458 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b2a      	ldr	r3, [pc, #168]	@ (8000584 <MX_GPIO_Init+0xc0>)
 80004dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004de:	4b29      	ldr	r3, [pc, #164]	@ (8000584 <MX_GPIO_Init+0xc0>)
 80004e0:	2104      	movs	r1, #4
 80004e2:	430a      	orrs	r2, r1
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e6:	4b27      	ldr	r3, [pc, #156]	@ (8000584 <MX_GPIO_Init+0xc0>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ea:	2204      	movs	r2, #4
 80004ec:	4013      	ands	r3, r2
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	4b24      	ldr	r3, [pc, #144]	@ (8000584 <MX_GPIO_Init+0xc0>)
 80004f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004f6:	4b23      	ldr	r3, [pc, #140]	@ (8000584 <MX_GPIO_Init+0xc0>)
 80004f8:	2180      	movs	r1, #128	@ 0x80
 80004fa:	430a      	orrs	r2, r1
 80004fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fe:	4b21      	ldr	r3, [pc, #132]	@ (8000584 <MX_GPIO_Init+0xc0>)
 8000500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000502:	2280      	movs	r2, #128	@ 0x80
 8000504:	4013      	ands	r3, r2
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b1e      	ldr	r3, [pc, #120]	@ (8000584 <MX_GPIO_Init+0xc0>)
 800050c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800050e:	4b1d      	ldr	r3, [pc, #116]	@ (8000584 <MX_GPIO_Init+0xc0>)
 8000510:	2101      	movs	r1, #1
 8000512:	430a      	orrs	r2, r1
 8000514:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000516:	4b1b      	ldr	r3, [pc, #108]	@ (8000584 <MX_GPIO_Init+0xc0>)
 8000518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800051a:	2201      	movs	r2, #1
 800051c:	4013      	ands	r3, r2
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000522:	23a0      	movs	r3, #160	@ 0xa0
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2200      	movs	r2, #0
 8000528:	2120      	movs	r1, #32
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fd82 	bl	8001034 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2280      	movs	r2, #128	@ 0x80
 8000534:	0192      	lsls	r2, r2, #6
 8000536:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2284      	movs	r2, #132	@ 0x84
 800053c:	0392      	lsls	r2, r2, #14
 800053e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	193b      	adds	r3, r7, r4
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000546:	193b      	adds	r3, r7, r4
 8000548:	4a0f      	ldr	r2, [pc, #60]	@ (8000588 <MX_GPIO_Init+0xc4>)
 800054a:	0019      	movs	r1, r3
 800054c:	0010      	movs	r0, r2
 800054e:	f000 fbfb 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000552:	0021      	movs	r1, r4
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2220      	movs	r2, #32
 8000558:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2201      	movs	r2, #1
 800055e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800056c:	187a      	adds	r2, r7, r1
 800056e:	23a0      	movs	r3, #160	@ 0xa0
 8000570:	05db      	lsls	r3, r3, #23
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f000 fbe7 	bl	8000d48 <HAL_GPIO_Init>

}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b009      	add	sp, #36	@ 0x24
 8000580:	bd90      	pop	{r4, r7, pc}
 8000582:	46c0      	nop			@ (mov r8, r8)
 8000584:	40021000 	.word	0x40021000
 8000588:	50000800 	.word	0x50000800

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 faf0 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f80c 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f7ff ff94 	bl	80004c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f9d6 	bl	800094c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80005a0:	f7ff ff6c 	bl	800047c <MX_FREERTOS_Init>
  App_Init();
 80005a4:	f000 fa70 	bl	8000a88 <App_Init>
  /* Start scheduler */
  osKernelStart();
 80005a8:	f002 fc85 	bl	8002eb6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	e7fd      	b.n	80005ac <main+0x20>

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b09d      	sub	sp, #116	@ 0x74
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	2438      	movs	r4, #56	@ 0x38
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2338      	movs	r3, #56	@ 0x38
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f003 ff49 	bl	8004458 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c6:	2324      	movs	r3, #36	@ 0x24
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	2314      	movs	r3, #20
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f003 ff41 	bl	8004458 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d6:	003b      	movs	r3, r7
 80005d8:	0018      	movs	r0, r3
 80005da:	2324      	movs	r3, #36	@ 0x24
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f003 ff3a 	bl	8004458 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	4b26      	ldr	r3, [pc, #152]	@ (8000680 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a26      	ldr	r2, [pc, #152]	@ (8000684 <SystemClock_Config+0xd4>)
 80005ea:	401a      	ands	r2, r3
 80005ec:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <SystemClock_Config+0xd0>)
 80005ee:	2180      	movs	r1, #128	@ 0x80
 80005f0:	0109      	lsls	r1, r1, #4
 80005f2:	430a      	orrs	r2, r1
 80005f4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005f6:	0021      	movs	r1, r4
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2210      	movs	r2, #16
 80005fc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2201      	movs	r2, #1
 8000602:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	22a0      	movs	r2, #160	@ 0xa0
 800060e:	0212      	lsls	r2, r2, #8
 8000610:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	187b      	adds	r3, r7, r1
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fd28 	bl	8001070 <HAL_RCC_OscConfig>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000624:	f000 f842 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	2124      	movs	r1, #36	@ 0x24
 800062a:	187b      	adds	r3, r7, r1
 800062c:	220f      	movs	r2, #15
 800062e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000642:	187b      	adds	r3, r7, r1
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	187b      	adds	r3, r7, r1
 800064a:	2100      	movs	r1, #0
 800064c:	0018      	movs	r0, r3
 800064e:	f001 f8d3 	bl	80017f8 <HAL_RCC_ClockConfig>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000656:	f000 f829 	bl	80006ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800065a:	003b      	movs	r3, r7
 800065c:	2202      	movs	r2, #2
 800065e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000660:	003b      	movs	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000666:	003b      	movs	r3, r7
 8000668:	0018      	movs	r0, r3
 800066a:	f001 fafb 	bl	8001c64 <HAL_RCCEx_PeriphCLKConfig>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000672:	f000 f81b 	bl	80006ac <Error_Handler>
  }
}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b01d      	add	sp, #116	@ 0x74
 800067c:	bd90      	pop	{r4, r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	40007000 	.word	0x40007000
 8000684:	ffffe7ff 	.word	0xffffe7ff

08000688 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d101      	bne.n	800069e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800069a:	f000 fa8b 	bl	8000bb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			@ (mov r8, r8)
 80006a8:	40001000 	.word	0x40001000

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	46c0      	nop			@ (mov r8, r8)
 80006b6:	e7fd      	b.n	80006b4 <Error_Handler+0x8>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006bc:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <HAL_MspInit+0x34>)
 80006be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <HAL_MspInit+0x34>)
 80006c2:	2101      	movs	r1, #1
 80006c4:	430a      	orrs	r2, r1
 80006c6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <HAL_MspInit+0x34>)
 80006ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <HAL_MspInit+0x34>)
 80006ce:	2180      	movs	r1, #128	@ 0x80
 80006d0:	0549      	lsls	r1, r1, #21
 80006d2:	430a      	orrs	r2, r1
 80006d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80006d6:	2302      	movs	r3, #2
 80006d8:	425b      	negs	r3, r3
 80006da:	2200      	movs	r2, #0
 80006dc:	2103      	movs	r1, #3
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 fb0c 	bl	8000cfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e4:	46c0      	nop			@ (mov r8, r8)
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	40021000 	.word	0x40021000

080006f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b5b0      	push	{r4, r5, r7, lr}
 80006f2:	b08c      	sub	sp, #48	@ 0x30
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	0019      	movs	r1, r3
 80006fe:	2011      	movs	r0, #17
 8000700:	f000 fafc 	bl	8000cfc <HAL_NVIC_SetPriority>
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000704:	2011      	movs	r0, #17
 8000706:	f000 fb0e 	bl	8000d26 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800070a:	4b32      	ldr	r3, [pc, #200]	@ (80007d4 <HAL_InitTick+0xe4>)
 800070c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800070e:	4b31      	ldr	r3, [pc, #196]	@ (80007d4 <HAL_InitTick+0xe4>)
 8000710:	2110      	movs	r1, #16
 8000712:	430a      	orrs	r2, r1
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000716:	2308      	movs	r3, #8
 8000718:	18fa      	adds	r2, r7, r3
 800071a:	240c      	movs	r4, #12
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fa6d 	bl	8001c00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072e:	2b00      	cmp	r3, #0
 8000730:	d104      	bne.n	800073c <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000732:	f001 fa39 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000736:	0003      	movs	r3, r0
 8000738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800073a:	e004      	b.n	8000746 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800073c:	f001 fa34 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000740:	0003      	movs	r3, r0
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000748:	4923      	ldr	r1, [pc, #140]	@ (80007d8 <HAL_InitTick+0xe8>)
 800074a:	0018      	movs	r0, r3
 800074c:	f7ff fcdc 	bl	8000108 <__udivsi3>
 8000750:	0003      	movs	r3, r0
 8000752:	3b01      	subs	r3, #1
 8000754:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000756:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <HAL_InitTick+0xec>)
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <HAL_InitTick+0xf0>)
 800075a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <HAL_InitTick+0xec>)
 800075e:	4a21      	ldr	r2, [pc, #132]	@ (80007e4 <HAL_InitTick+0xf4>)
 8000760:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <HAL_InitTick+0xec>)
 8000764:	6a3a      	ldr	r2, [r7, #32]
 8000766:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <HAL_InitTick+0xec>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076e:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <HAL_InitTick+0xec>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000774:	252b      	movs	r5, #43	@ 0x2b
 8000776:	197c      	adds	r4, r7, r5
 8000778:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <HAL_InitTick+0xec>)
 800077a:	0018      	movs	r0, r3
 800077c:	f001 fc00 	bl	8001f80 <HAL_TIM_Base_Init>
 8000780:	0003      	movs	r3, r0
 8000782:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000784:	197b      	adds	r3, r7, r5
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d11b      	bne.n	80007c4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800078c:	197c      	adds	r4, r7, r5
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <HAL_InitTick+0xec>)
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fc3d 	bl	8002010 <HAL_TIM_Base_Start_IT>
 8000796:	0003      	movs	r3, r0
 8000798:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800079a:	197b      	adds	r3, r7, r5
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d110      	bne.n	80007c4 <HAL_InitTick+0xd4>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	d809      	bhi.n	80007bc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	0019      	movs	r1, r3
 80007ae:	2011      	movs	r0, #17
 80007b0:	f000 faa4 	bl	8000cfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <HAL_InitTick+0xf8>)
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	e003      	b.n	80007c4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80007bc:	232b      	movs	r3, #43	@ 0x2b
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80007c4:	232b      	movs	r3, #43	@ 0x2b
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	781b      	ldrb	r3, [r3, #0]
}
 80007ca:	0018      	movs	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b00c      	add	sp, #48	@ 0x30
 80007d0:	bdb0      	pop	{r4, r5, r7, pc}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000
 80007d8:	000f4240 	.word	0x000f4240
 80007dc:	2000032c 	.word	0x2000032c
 80007e0:	40001000 	.word	0x40001000
 80007e4:	000003e7 	.word	0x000003e7
 80007e8:	20000004 	.word	0x20000004

080007ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	e7fd      	b.n	80007f0 <NMI_Handler+0x4>

080007f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	e7fd      	b.n	80007f8 <HardFault_Handler+0x4>

080007fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000800:	4b03      	ldr	r3, [pc, #12]	@ (8000810 <TIM6_DAC_IRQHandler+0x14>)
 8000802:	0018      	movs	r0, r3
 8000804:	f001 fc50 	bl	80020a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	2000032c 	.word	0x2000032c

08000814 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	e00a      	b.n	800083c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000826:	e000      	b.n	800082a <_read+0x16>
 8000828:	bf00      	nop
 800082a:	0001      	movs	r1, r0
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	1c5a      	adds	r2, r3, #1
 8000830:	60ba      	str	r2, [r7, #8]
 8000832:	b2ca      	uxtb	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	3301      	adds	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697a      	ldr	r2, [r7, #20]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	429a      	cmp	r2, r3
 8000842:	dbf0      	blt.n	8000826 <_read+0x12>
  }

  return len;
 8000844:	687b      	ldr	r3, [r7, #4]
}
 8000846:	0018      	movs	r0, r3
 8000848:	46bd      	mov	sp, r7
 800084a:	b006      	add	sp, #24
 800084c:	bd80      	pop	{r7, pc}

0800084e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	e009      	b.n	8000874 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	60ba      	str	r2, [r7, #8]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	0018      	movs	r0, r3
 800086a:	f000 f921 	bl	8000ab0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf1      	blt.n	8000860 <_write+0x12>
  }
  return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	0018      	movs	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	b006      	add	sp, #24
 8000884:	bd80      	pop	{r7, pc}

08000886 <_close>:

int _close(int file)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800088e:	2301      	movs	r3, #1
 8000890:	425b      	negs	r3, r3
}
 8000892:	0018      	movs	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}

0800089a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	2280      	movs	r2, #128	@ 0x80
 80008a8:	0192      	lsls	r2, r2, #6
 80008aa:	605a      	str	r2, [r3, #4]
  return 0;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	0018      	movs	r0, r3
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b002      	add	sp, #8
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <_isatty>:

int _isatty(int file)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	b082      	sub	sp, #8
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	0018      	movs	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	b002      	add	sp, #8
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	0018      	movs	r0, r3
 80008d8:	46bd      	mov	sp, r7
 80008da:	b004      	add	sp, #16
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	@ (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f003 fe62 	bl	80045d8 <__errno>
 8000914:	0003      	movs	r3, r0
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091a:	2301      	movs	r3, #1
 800091c:	425b      	negs	r3, r3
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	18d2      	adds	r2, r2, r3
 800092e:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <_sbrk+0x64>)
 8000930:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b006      	add	sp, #24
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20002000 	.word	0x20002000
 8000940:	00000400 	.word	0x00000400
 8000944:	2000036c 	.word	0x2000036c
 8000948:	20001290 	.word	0x20001290

0800094c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 8000952:	4a15      	ldr	r2, [pc, #84]	@ (80009a8 <MX_USART2_UART_Init+0x5c>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b13      	ldr	r3, [pc, #76]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 8000958:	22e1      	movs	r2, #225	@ 0xe1
 800095a:	0252      	lsls	r2, r2, #9
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 800098a:	2200      	movs	r2, #0
 800098c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098e:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <MX_USART2_UART_Init+0x58>)
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fccf 	bl	8002334 <HAL_UART_Init>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800099a:	f7ff fe87 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000370 	.word	0x20000370
 80009a8:	40004400 	.word	0x40004400

080009ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b089      	sub	sp, #36	@ 0x24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	240c      	movs	r4, #12
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	0018      	movs	r0, r3
 80009ba:	2314      	movs	r3, #20
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f003 fd4a 	bl	8004458 <memset>
  if(uartHandle->Instance==USART2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a18      	ldr	r2, [pc, #96]	@ (8000a2c <HAL_UART_MspInit+0x80>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d129      	bne.n	8000a22 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <HAL_UART_MspInit+0x84>)
 80009d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009d2:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <HAL_UART_MspInit+0x84>)
 80009d4:	2180      	movs	r1, #128	@ 0x80
 80009d6:	0289      	lsls	r1, r1, #10
 80009d8:	430a      	orrs	r2, r1
 80009da:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <HAL_UART_MspInit+0x84>)
 80009de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009e0:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <HAL_UART_MspInit+0x84>)
 80009e2:	2101      	movs	r1, #1
 80009e4:	430a      	orrs	r2, r1
 80009e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <HAL_UART_MspInit+0x84>)
 80009ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ec:	2201      	movs	r2, #1
 80009ee:	4013      	ands	r3, r2
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009f4:	0021      	movs	r1, r4
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	220c      	movs	r2, #12
 80009fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2202      	movs	r2, #2
 8000a00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2204      	movs	r2, #4
 8000a12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	187a      	adds	r2, r7, r1
 8000a16:	23a0      	movs	r3, #160	@ 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	0011      	movs	r1, r2
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 f993 	bl	8000d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b009      	add	sp, #36	@ 0x24
 8000a28:	bd90      	pop	{r4, r7, pc}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	40004400 	.word	0x40004400
 8000a30:	40021000 	.word	0x40021000

08000a34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a34:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a38:	f000 f896 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480c      	ldr	r0, [pc, #48]	@ (8000a70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3e:	490d      	ldr	r1, [pc, #52]	@ (8000a74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a40:	4a0d      	ldr	r2, [pc, #52]	@ (8000a78 <LoopForever+0xe>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a54:	4c0a      	ldr	r4, [pc, #40]	@ (8000a80 <LoopForever+0x16>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f003 fdbf 	bl	80045e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a66:	f7ff fd91 	bl	800058c <main>

08000a6a <LoopForever>:

LoopForever:
    b LoopForever
 8000a6a:	e7fe      	b.n	8000a6a <LoopForever>
  ldr   r0, =_estack
 8000a6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a74:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a78:	08004cac 	.word	0x08004cac
  ldr r2, =_sbss
 8000a7c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a80:	20001290 	.word	0x20001290

08000a84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a84:	e7fe      	b.n	8000a84 <ADC1_COMP_IRQHandler>
	...

08000a88 <App_Init>:
#include "app.h"
#include "sensor_task.h"
#include <stdio.h>

void App_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    DBG_PRINT("App_Init: Starting app logic...\r\n");
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <App_Init+0x20>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f003 fbec 	bl	800426c <puts>
    Sensor_Init();
 8000a94:	f000 f824 	bl	8000ae0 <Sensor_Init>
    DBG_PRINT("App_Init: Sensor task initialized.\r\n");
 8000a98:	4b04      	ldr	r3, [pc, #16]	@ (8000aac <App_Init+0x24>)
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f003 fbe6 	bl	800426c <puts>
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			@ (mov r8, r8)
 8000aa8:	08004b14 	.word	0x08004b14
 8000aac:	08004b40 	.word	0x08004b40

08000ab0 <__io_putchar>:

// Use extern so the linker can find this from usart.c
extern UART_HandleTypeDef huart2;

int __io_putchar(int ch)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    uint8_t c = (uint8_t)ch;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	210f      	movs	r1, #15
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	425b      	negs	r3, r3
 8000ac6:	1879      	adds	r1, r7, r1
 8000ac8:	4804      	ldr	r0, [pc, #16]	@ (8000adc <__io_putchar+0x2c>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	f001 fc86 	bl	80023dc <HAL_UART_Transmit>
    return ch;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b004      	add	sp, #16
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			@ (mov r8, r8)
 8000adc:	20000370 	.word	0x20000370

08000ae0 <Sensor_Init>:

osThreadId sensorTaskHandle;


void Sensor_Init(void)
{
 8000ae0:	b590      	push	{r4, r7, lr}
 8000ae2:	b089      	sub	sp, #36	@ 0x24
 8000ae4:	af00      	add	r7, sp, #0
    osThreadDef(sensorTask, SensorTask, osPriorityNormal, 0, 256);
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8000b28 <Sensor_Init+0x48>)
 8000aea:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000aec:	c313      	stmia	r3!, {r0, r1, r4}
 8000aee:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000af0:	c313      	stmia	r3!, {r0, r1, r4}
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	601a      	str	r2, [r3, #0]
    sensorTaskHandle = osThreadCreate(osThread(sensorTask), NULL);
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2100      	movs	r1, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f002 f9e3 	bl	8002ec6 <osThreadCreate>
 8000b00:	0002      	movs	r2, r0
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <Sensor_Init+0x4c>)
 8000b04:	601a      	str	r2, [r3, #0]

    if (sensorTaskHandle != NULL)
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <Sensor_Init+0x4c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <Sensor_Init+0x38>
        DBG_PRINT("SensorTask created successfully.\r\n");
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <Sensor_Init+0x50>)
 8000b10:	0018      	movs	r0, r3
 8000b12:	f003 fbab 	bl	800426c <puts>
    else
        DBG_PRINT("Failed to create SensorTask!\r\n");
}
 8000b16:	e003      	b.n	8000b20 <Sensor_Init+0x40>
        DBG_PRINT("Failed to create SensorTask!\r\n");
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <Sensor_Init+0x54>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f003 fba6 	bl	800426c <puts>
}
 8000b20:	46c0      	nop			@ (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b009      	add	sp, #36	@ 0x24
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	08004bcc 	.word	0x08004bcc
 8000b2c:	200003f8 	.word	0x200003f8
 8000b30:	08004b6c 	.word	0x08004b6c
 8000b34:	08004b98 	.word	0x08004b98

08000b38 <SensorTask>:


void SensorTask(void const * argument)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
    DBG_PRINT("SensorTask started.\r\n");
 8000b40:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <SensorTask+0x28>)
 8000b42:	0018      	movs	r0, r3
 8000b44:	f003 fb92 	bl	800426c <puts>

    for (;;)
    {
        DBG_PRINT("SensorTask running...\r\n");
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SensorTask+0x2c>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f003 fb8e 	bl	800426c <puts>
        osDelay(2000);
 8000b50:	23fa      	movs	r3, #250	@ 0xfa
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	0018      	movs	r0, r3
 8000b56:	f002 fa03 	bl	8002f60 <osDelay>
        DBG_PRINT("SensorTask running...\r\n");
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	e7f4      	b.n	8000b48 <SensorTask+0x10>
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	08004be8 	.word	0x08004be8
 8000b64:	08004c08 	.word	0x08004c08

08000b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b6c:	46c0      	nop			@ (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <HAL_Init+0x3c>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_Init+0x3c>)
 8000b86:	2140      	movs	r1, #64	@ 0x40
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f7ff fdaf 	bl	80006f0 <HAL_InitTick>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d003      	beq.n	8000b9e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e001      	b.n	8000ba2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9e:	f7ff fd8b 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
}
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b002      	add	sp, #8
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	18d2      	adds	r2, r2, r3
 8000bc4:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	46c0      	nop			@ (mov r8, r8)
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	200003fc 	.word	0x200003fc

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	@ (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	0018      	movs	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			@ (mov r8, r8)
 8000be8:	200003fc 	.word	0x200003fc

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	0002      	movs	r2, r0
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	1dfb      	adds	r3, r7, #7
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bfe:	d809      	bhi.n	8000c14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	001a      	movs	r2, r3
 8000c06:	231f      	movs	r3, #31
 8000c08:	401a      	ands	r2, r3
 8000c0a:	4b04      	ldr	r3, [pc, #16]	@ (8000c1c <__NVIC_EnableIRQ+0x30>)
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	4091      	lsls	r1, r2
 8000c10:	000a      	movs	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
  }
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b002      	add	sp, #8
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	e000e100 	.word	0xe000e100

08000c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	0002      	movs	r2, r0
 8000c28:	6039      	str	r1, [r7, #0]
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c34:	d828      	bhi.n	8000c88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c36:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf4 <__NVIC_SetPriority+0xd4>)
 8000c38:	1dfb      	adds	r3, r7, #7
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	089b      	lsrs	r3, r3, #2
 8000c40:	33c0      	adds	r3, #192	@ 0xc0
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	589b      	ldr	r3, [r3, r2]
 8000c46:	1dfa      	adds	r2, r7, #7
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	400a      	ands	r2, r1
 8000c50:	00d2      	lsls	r2, r2, #3
 8000c52:	21ff      	movs	r1, #255	@ 0xff
 8000c54:	4091      	lsls	r1, r2
 8000c56:	000a      	movs	r2, r1
 8000c58:	43d2      	mvns	r2, r2
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	019b      	lsls	r3, r3, #6
 8000c62:	22ff      	movs	r2, #255	@ 0xff
 8000c64:	401a      	ands	r2, r3
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	4003      	ands	r3, r0
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c74:	481f      	ldr	r0, [pc, #124]	@ (8000cf4 <__NVIC_SetPriority+0xd4>)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	b25b      	sxtb	r3, r3
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	33c0      	adds	r3, #192	@ 0xc0
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c86:	e031      	b.n	8000cec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c88:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf8 <__NVIC_SetPriority+0xd8>)
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	0019      	movs	r1, r3
 8000c90:	230f      	movs	r3, #15
 8000c92:	400b      	ands	r3, r1
 8000c94:	3b08      	subs	r3, #8
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	3306      	adds	r3, #6
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	18d3      	adds	r3, r2, r3
 8000c9e:	3304      	adds	r3, #4
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	1dfa      	adds	r2, r7, #7
 8000ca4:	7812      	ldrb	r2, [r2, #0]
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	2203      	movs	r2, #3
 8000caa:	400a      	ands	r2, r1
 8000cac:	00d2      	lsls	r2, r2, #3
 8000cae:	21ff      	movs	r1, #255	@ 0xff
 8000cb0:	4091      	lsls	r1, r2
 8000cb2:	000a      	movs	r2, r1
 8000cb4:	43d2      	mvns	r2, r2
 8000cb6:	401a      	ands	r2, r3
 8000cb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	019b      	lsls	r3, r3, #6
 8000cbe:	22ff      	movs	r2, #255	@ 0xff
 8000cc0:	401a      	ands	r2, r3
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	2303      	movs	r3, #3
 8000cca:	4003      	ands	r3, r0
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd0:	4809      	ldr	r0, [pc, #36]	@ (8000cf8 <__NVIC_SetPriority+0xd8>)
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	001c      	movs	r4, r3
 8000cd8:	230f      	movs	r3, #15
 8000cda:	4023      	ands	r3, r4
 8000cdc:	3b08      	subs	r3, #8
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	3306      	adds	r3, #6
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	18c3      	adds	r3, r0, r3
 8000ce8:	3304      	adds	r3, #4
 8000cea:	601a      	str	r2, [r3, #0]
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b003      	add	sp, #12
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	e000e100 	.word	0xe000e100
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	210f      	movs	r1, #15
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	1c02      	adds	r2, r0, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ff81 	bl	8000c20 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000d1e:	46c0      	nop			@ (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ff57 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d5e:	e14f      	b.n	8001000 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	000a      	movs	r2, r1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d100      	bne.n	8000d78 <HAL_GPIO_Init+0x30>
 8000d76:	e140      	b.n	8000ffa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d005      	beq.n	8000d90 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d130      	bne.n	8000df2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	409a      	lsls	r2, r3
 8000d9e:	0013      	movs	r3, r2
 8000da0:	43da      	mvns	r2, r3
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	4013      	ands	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68da      	ldr	r2, [r3, #12]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	409a      	lsls	r2, r3
 8000db2:	0013      	movs	r3, r2
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	2201      	movs	r2, #1
 8000dde:	401a      	ands	r2, r3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	409a      	lsls	r2, r3
 8000de4:	0013      	movs	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2203      	movs	r2, #3
 8000df8:	4013      	ands	r3, r2
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d017      	beq.n	8000e2e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2203      	movs	r2, #3
 8000e34:	4013      	ands	r3, r2
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d123      	bne.n	8000e82 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	58d3      	ldr	r3, [r2, r3]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	2207      	movs	r2, #7
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	691a      	ldr	r2, [r3, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2107      	movs	r1, #7
 8000e66:	400b      	ands	r3, r1
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	6939      	ldr	r1, [r7, #16]
 8000e80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	43da      	mvns	r2, r3
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	401a      	ands	r2, r3
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	23c0      	movs	r3, #192	@ 0xc0
 8000ebc:	029b      	lsls	r3, r3, #10
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d100      	bne.n	8000ec4 <HAL_GPIO_Init+0x17c>
 8000ec2:	e09a      	b.n	8000ffa <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec4:	4b54      	ldr	r3, [pc, #336]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ec8:	4b53      	ldr	r3, [pc, #332]	@ (8001018 <HAL_GPIO_Init+0x2d0>)
 8000eca:	2101      	movs	r1, #1
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ed0:	4a52      	ldr	r2, [pc, #328]	@ (800101c <HAL_GPIO_Init+0x2d4>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	589b      	ldr	r3, [r3, r2]
 8000edc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	23a0      	movs	r3, #160	@ 0xa0
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d019      	beq.n	8000f32 <HAL_GPIO_Init+0x1ea>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a47      	ldr	r2, [pc, #284]	@ (8001020 <HAL_GPIO_Init+0x2d8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0x1e6>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a46      	ldr	r2, [pc, #280]	@ (8001024 <HAL_GPIO_Init+0x2dc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d00d      	beq.n	8000f2a <HAL_GPIO_Init+0x1e2>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a45      	ldr	r2, [pc, #276]	@ (8001028 <HAL_GPIO_Init+0x2e0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x1de>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a44      	ldr	r2, [pc, #272]	@ (800102c <HAL_GPIO_Init+0x2e4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_GPIO_Init+0x1da>
 8000f1e:	2305      	movs	r3, #5
 8000f20:	e008      	b.n	8000f34 <HAL_GPIO_Init+0x1ec>
 8000f22:	2306      	movs	r3, #6
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x1ec>
 8000f26:	2303      	movs	r3, #3
 8000f28:	e004      	b.n	8000f34 <HAL_GPIO_Init+0x1ec>
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	e002      	b.n	8000f34 <HAL_GPIO_Init+0x1ec>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_GPIO_Init+0x1ec>
 8000f32:	2300      	movs	r3, #0
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	2103      	movs	r1, #3
 8000f38:	400a      	ands	r2, r1
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4093      	lsls	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f44:	4935      	ldr	r1, [pc, #212]	@ (800101c <HAL_GPIO_Init+0x2d4>)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	089b      	lsrs	r3, r3, #2
 8000f4a:	3302      	adds	r3, #2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f52:	4b37      	ldr	r3, [pc, #220]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	2380      	movs	r3, #128	@ 0x80
 8000f68:	035b      	lsls	r3, r3, #13
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f76:	4b2e      	ldr	r3, [pc, #184]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43da      	mvns	r2, r3
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	2380      	movs	r3, #128	@ 0x80
 8000f92:	039b      	lsls	r3, r3, #14
 8000f94:	4013      	ands	r3, r2
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fa0:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000fa6:	4b22      	ldr	r3, [pc, #136]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	2380      	movs	r3, #128	@ 0x80
 8000fbc:	029b      	lsls	r3, r3, #10
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fca:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd0:	4b17      	ldr	r3, [pc, #92]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43da      	mvns	r2, r3
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	2380      	movs	r3, #128	@ 0x80
 8000fe6:	025b      	lsls	r3, r3, #9
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	40da      	lsrs	r2, r3
 8001008:	1e13      	subs	r3, r2, #0
 800100a:	d000      	beq.n	800100e <HAL_GPIO_Init+0x2c6>
 800100c:	e6a8      	b.n	8000d60 <HAL_GPIO_Init+0x18>
  }
}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	46c0      	nop			@ (mov r8, r8)
 8001012:	46bd      	mov	sp, r7
 8001014:	b006      	add	sp, #24
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000
 8001020:	50000400 	.word	0x50000400
 8001024:	50000800 	.word	0x50000800
 8001028:	50000c00 	.word	0x50000c00
 800102c:	50001c00 	.word	0x50001c00
 8001030:	40010400 	.word	0x40010400

08001034 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	0008      	movs	r0, r1
 800103e:	0011      	movs	r1, r2
 8001040:	1cbb      	adds	r3, r7, #2
 8001042:	1c02      	adds	r2, r0, #0
 8001044:	801a      	strh	r2, [r3, #0]
 8001046:	1c7b      	adds	r3, r7, #1
 8001048:	1c0a      	adds	r2, r1, #0
 800104a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800104c:	1c7b      	adds	r3, r7, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001054:	1cbb      	adds	r3, r7, #2
 8001056:	881a      	ldrh	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800105c:	e003      	b.n	8001066 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800105e:	1cbb      	adds	r3, r7, #2
 8001060:	881a      	ldrh	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001066:	46c0      	nop			@ (mov r8, r8)
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d102      	bne.n	8001084 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	f000 fbaf 	bl	80017e2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001084:	4bcf      	ldr	r3, [pc, #828]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	220c      	movs	r2, #12
 800108a:	4013      	ands	r3, r2
 800108c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800108e:	4bcd      	ldr	r3, [pc, #820]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	2380      	movs	r3, #128	@ 0x80
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	4013      	ands	r3, r2
 8001098:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2201      	movs	r2, #1
 80010a0:	4013      	ands	r3, r2
 80010a2:	d100      	bne.n	80010a6 <HAL_RCC_OscConfig+0x36>
 80010a4:	e07e      	b.n	80011a4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d007      	beq.n	80010bc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	2b0c      	cmp	r3, #12
 80010b0:	d112      	bne.n	80010d8 <HAL_RCC_OscConfig+0x68>
 80010b2:	69fa      	ldr	r2, [r7, #28]
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	025b      	lsls	r3, r3, #9
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d10d      	bne.n	80010d8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	4bc1      	ldr	r3, [pc, #772]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	4013      	ands	r3, r2
 80010c6:	d100      	bne.n	80010ca <HAL_RCC_OscConfig+0x5a>
 80010c8:	e06b      	b.n	80011a2 <HAL_RCC_OscConfig+0x132>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d167      	bne.n	80011a2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f000 fb85 	bl	80017e2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	2380      	movs	r3, #128	@ 0x80
 80010de:	025b      	lsls	r3, r3, #9
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d107      	bne.n	80010f4 <HAL_RCC_OscConfig+0x84>
 80010e4:	4bb7      	ldr	r3, [pc, #732]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4bb6      	ldr	r3, [pc, #728]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80010ea:	2180      	movs	r1, #128	@ 0x80
 80010ec:	0249      	lsls	r1, r1, #9
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e027      	b.n	8001144 <HAL_RCC_OscConfig+0xd4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	23a0      	movs	r3, #160	@ 0xa0
 80010fa:	02db      	lsls	r3, r3, #11
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d10e      	bne.n	800111e <HAL_RCC_OscConfig+0xae>
 8001100:	4bb0      	ldr	r3, [pc, #704]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4baf      	ldr	r3, [pc, #700]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001106:	2180      	movs	r1, #128	@ 0x80
 8001108:	02c9      	lsls	r1, r1, #11
 800110a:	430a      	orrs	r2, r1
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	4bad      	ldr	r3, [pc, #692]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4bac      	ldr	r3, [pc, #688]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001114:	2180      	movs	r1, #128	@ 0x80
 8001116:	0249      	lsls	r1, r1, #9
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	e012      	b.n	8001144 <HAL_RCC_OscConfig+0xd4>
 800111e:	4ba9      	ldr	r3, [pc, #676]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4ba8      	ldr	r3, [pc, #672]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001124:	49a8      	ldr	r1, [pc, #672]	@ (80013c8 <HAL_RCC_OscConfig+0x358>)
 8001126:	400a      	ands	r2, r1
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	4ba6      	ldr	r3, [pc, #664]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	025b      	lsls	r3, r3, #9
 8001132:	4013      	ands	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4ba2      	ldr	r3, [pc, #648]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4ba1      	ldr	r3, [pc, #644]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 800113e:	49a3      	ldr	r1, [pc, #652]	@ (80013cc <HAL_RCC_OscConfig+0x35c>)
 8001140:	400a      	ands	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d015      	beq.n	8001178 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fd44 	bl	8000bd8 <HAL_GetTick>
 8001150:	0003      	movs	r3, r0
 8001152:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001154:	e009      	b.n	800116a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001156:	f7ff fd3f 	bl	8000bd8 <HAL_GetTick>
 800115a:	0002      	movs	r2, r0
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b64      	cmp	r3, #100	@ 0x64
 8001162:	d902      	bls.n	800116a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	f000 fb3c 	bl	80017e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800116a:	4b96      	ldr	r3, [pc, #600]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	@ 0x80
 8001170:	029b      	lsls	r3, r3, #10
 8001172:	4013      	ands	r3, r2
 8001174:	d0ef      	beq.n	8001156 <HAL_RCC_OscConfig+0xe6>
 8001176:	e015      	b.n	80011a4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fd2e 	bl	8000bd8 <HAL_GetTick>
 800117c:	0003      	movs	r3, r0
 800117e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001180:	e008      	b.n	8001194 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001182:	f7ff fd29 	bl	8000bd8 <HAL_GetTick>
 8001186:	0002      	movs	r2, r0
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	2b64      	cmp	r3, #100	@ 0x64
 800118e:	d901      	bls.n	8001194 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001190:	2303      	movs	r3, #3
 8001192:	e326      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001194:	4b8b      	ldr	r3, [pc, #556]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2380      	movs	r3, #128	@ 0x80
 800119a:	029b      	lsls	r3, r3, #10
 800119c:	4013      	ands	r3, r2
 800119e:	d1f0      	bne.n	8001182 <HAL_RCC_OscConfig+0x112>
 80011a0:	e000      	b.n	80011a4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2202      	movs	r2, #2
 80011aa:	4013      	ands	r3, r2
 80011ac:	d100      	bne.n	80011b0 <HAL_RCC_OscConfig+0x140>
 80011ae:	e08b      	b.n	80012c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d13e      	bne.n	8001240 <HAL_RCC_OscConfig+0x1d0>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d13b      	bne.n	8001240 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80011c8:	4b7e      	ldr	r3, [pc, #504]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2204      	movs	r2, #4
 80011ce:	4013      	ands	r3, r2
 80011d0:	d004      	beq.n	80011dc <HAL_RCC_OscConfig+0x16c>
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e302      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011dc:	4b79      	ldr	r3, [pc, #484]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a7b      	ldr	r2, [pc, #492]	@ (80013d0 <HAL_RCC_OscConfig+0x360>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	0019      	movs	r1, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	021a      	lsls	r2, r3, #8
 80011ec:	4b75      	ldr	r3, [pc, #468]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80011ee:	430a      	orrs	r2, r1
 80011f0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80011f2:	4b74      	ldr	r3, [pc, #464]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2209      	movs	r2, #9
 80011f8:	4393      	bics	r3, r2
 80011fa:	0019      	movs	r1, r3
 80011fc:	4b71      	ldr	r3, [pc, #452]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	430a      	orrs	r2, r1
 8001202:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001204:	f000 fc40 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001208:	0001      	movs	r1, r0
 800120a:	4b6e      	ldr	r3, [pc, #440]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	091b      	lsrs	r3, r3, #4
 8001210:	220f      	movs	r2, #15
 8001212:	4013      	ands	r3, r2
 8001214:	4a6f      	ldr	r2, [pc, #444]	@ (80013d4 <HAL_RCC_OscConfig+0x364>)
 8001216:	5cd3      	ldrb	r3, [r2, r3]
 8001218:	000a      	movs	r2, r1
 800121a:	40da      	lsrs	r2, r3
 800121c:	4b6e      	ldr	r3, [pc, #440]	@ (80013d8 <HAL_RCC_OscConfig+0x368>)
 800121e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001220:	4b6e      	ldr	r3, [pc, #440]	@ (80013dc <HAL_RCC_OscConfig+0x36c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2513      	movs	r5, #19
 8001226:	197c      	adds	r4, r7, r5
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff fa61 	bl	80006f0 <HAL_InitTick>
 800122e:	0003      	movs	r3, r0
 8001230:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001232:	197b      	adds	r3, r7, r5
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d046      	beq.n	80012c8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 800123a:	197b      	adds	r3, r7, r5
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	e2d0      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d027      	beq.n	8001296 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001246:	4b5f      	ldr	r3, [pc, #380]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2209      	movs	r2, #9
 800124c:	4393      	bics	r3, r2
 800124e:	0019      	movs	r1, r3
 8001250:	4b5c      	ldr	r3, [pc, #368]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fcbe 	bl	8000bd8 <HAL_GetTick>
 800125c:	0003      	movs	r3, r0
 800125e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001260:	e008      	b.n	8001274 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001262:	f7ff fcb9 	bl	8000bd8 <HAL_GetTick>
 8001266:	0002      	movs	r2, r0
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d901      	bls.n	8001274 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	e2b6      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001274:	4b53      	ldr	r3, [pc, #332]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2204      	movs	r2, #4
 800127a:	4013      	ands	r3, r2
 800127c:	d0f1      	beq.n	8001262 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127e:	4b51      	ldr	r3, [pc, #324]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	4a53      	ldr	r2, [pc, #332]	@ (80013d0 <HAL_RCC_OscConfig+0x360>)
 8001284:	4013      	ands	r3, r2
 8001286:	0019      	movs	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	021a      	lsls	r2, r3, #8
 800128e:	4b4d      	ldr	r3, [pc, #308]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001290:	430a      	orrs	r2, r1
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	e018      	b.n	80012c8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001296:	4b4b      	ldr	r3, [pc, #300]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	4b4a      	ldr	r3, [pc, #296]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 800129c:	2101      	movs	r1, #1
 800129e:	438a      	bics	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a2:	f7ff fc99 	bl	8000bd8 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ac:	f7ff fc94 	bl	8000bd8 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e291      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012be:	4b41      	ldr	r3, [pc, #260]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2204      	movs	r2, #4
 80012c4:	4013      	ands	r3, r2
 80012c6:	d1f1      	bne.n	80012ac <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2210      	movs	r2, #16
 80012ce:	4013      	ands	r3, r2
 80012d0:	d100      	bne.n	80012d4 <HAL_RCC_OscConfig+0x264>
 80012d2:	e0a1      	b.n	8001418 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d140      	bne.n	800135c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012da:	4b3a      	ldr	r3, [pc, #232]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	2380      	movs	r3, #128	@ 0x80
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4013      	ands	r3, r2
 80012e4:	d005      	beq.n	80012f2 <HAL_RCC_OscConfig+0x282>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e277      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f2:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4a3a      	ldr	r2, [pc, #232]	@ (80013e0 <HAL_RCC_OscConfig+0x370>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	0019      	movs	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001300:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001302:	430a      	orrs	r2, r1
 8001304:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001306:	4b2f      	ldr	r3, [pc, #188]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	0a19      	lsrs	r1, r3, #8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	061a      	lsls	r2, r3, #24
 8001314:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001316:	430a      	orrs	r2, r1
 8001318:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	0b5b      	lsrs	r3, r3, #13
 8001320:	3301      	adds	r3, #1
 8001322:	2280      	movs	r2, #128	@ 0x80
 8001324:	0212      	lsls	r2, r2, #8
 8001326:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001328:	4b26      	ldr	r3, [pc, #152]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	210f      	movs	r1, #15
 8001330:	400b      	ands	r3, r1
 8001332:	4928      	ldr	r1, [pc, #160]	@ (80013d4 <HAL_RCC_OscConfig+0x364>)
 8001334:	5ccb      	ldrb	r3, [r1, r3]
 8001336:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001338:	4b27      	ldr	r3, [pc, #156]	@ (80013d8 <HAL_RCC_OscConfig+0x368>)
 800133a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800133c:	4b27      	ldr	r3, [pc, #156]	@ (80013dc <HAL_RCC_OscConfig+0x36c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2513      	movs	r5, #19
 8001342:	197c      	adds	r4, r7, r5
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff f9d3 	bl	80006f0 <HAL_InitTick>
 800134a:	0003      	movs	r3, r0
 800134c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800134e:	197b      	adds	r3, r7, r5
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d060      	beq.n	8001418 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001356:	197b      	adds	r3, r7, r5
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	e242      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d03f      	beq.n	80013e4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 800136a:	2180      	movs	r1, #128	@ 0x80
 800136c:	0049      	lsls	r1, r1, #1
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff fc31 	bl	8000bd8 <HAL_GetTick>
 8001376:	0003      	movs	r3, r0
 8001378:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800137c:	f7ff fc2c 	bl	8000bd8 <HAL_GetTick>
 8001380:	0002      	movs	r2, r0
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e229      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800138e:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4013      	ands	r3, r2
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800139a:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <HAL_RCC_OscConfig+0x370>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	0019      	movs	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80013aa:	430a      	orrs	r2, r1
 80013ac:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	0a19      	lsrs	r1, r3, #8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	061a      	lsls	r2, r3, #24
 80013bc:	4b01      	ldr	r3, [pc, #4]	@ (80013c4 <HAL_RCC_OscConfig+0x354>)
 80013be:	430a      	orrs	r2, r1
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	e029      	b.n	8001418 <HAL_RCC_OscConfig+0x3a8>
 80013c4:	40021000 	.word	0x40021000
 80013c8:	fffeffff 	.word	0xfffeffff
 80013cc:	fffbffff 	.word	0xfffbffff
 80013d0:	ffffe0ff 	.word	0xffffe0ff
 80013d4:	08004c30 	.word	0x08004c30
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000004 	.word	0x20000004
 80013e0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013e4:	4bbd      	ldr	r3, [pc, #756]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4bbc      	ldr	r3, [pc, #752]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80013ea:	49bd      	ldr	r1, [pc, #756]	@ (80016e0 <HAL_RCC_OscConfig+0x670>)
 80013ec:	400a      	ands	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fbf2 	bl	8000bd8 <HAL_GetTick>
 80013f4:	0003      	movs	r3, r0
 80013f6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013fa:	f7ff fbed 	bl	8000bd8 <HAL_GetTick>
 80013fe:	0002      	movs	r2, r0
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e1ea      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800140c:	4bb3      	ldr	r3, [pc, #716]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4013      	ands	r3, r2
 8001416:	d1f0      	bne.n	80013fa <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2208      	movs	r2, #8
 800141e:	4013      	ands	r3, r2
 8001420:	d036      	beq.n	8001490 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d019      	beq.n	800145e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4bac      	ldr	r3, [pc, #688]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 800142c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800142e:	4bab      	ldr	r3, [pc, #684]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001430:	2101      	movs	r1, #1
 8001432:	430a      	orrs	r2, r1
 8001434:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001436:	f7ff fbcf 	bl	8000bd8 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fbca 	bl	8000bd8 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1c7      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001452:	4ba2      	ldr	r3, [pc, #648]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001456:	2202      	movs	r2, #2
 8001458:	4013      	ands	r3, r2
 800145a:	d0f1      	beq.n	8001440 <HAL_RCC_OscConfig+0x3d0>
 800145c:	e018      	b.n	8001490 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800145e:	4b9f      	ldr	r3, [pc, #636]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001462:	4b9e      	ldr	r3, [pc, #632]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001464:	2101      	movs	r1, #1
 8001466:	438a      	bics	r2, r1
 8001468:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fbb5 	bl	8000bd8 <HAL_GetTick>
 800146e:	0003      	movs	r3, r0
 8001470:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fbb0 	bl	8000bd8 <HAL_GetTick>
 8001478:	0002      	movs	r2, r0
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e1ad      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001486:	4b95      	ldr	r3, [pc, #596]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800148a:	2202      	movs	r2, #2
 800148c:	4013      	ands	r3, r2
 800148e:	d1f1      	bne.n	8001474 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2204      	movs	r2, #4
 8001496:	4013      	ands	r3, r2
 8001498:	d100      	bne.n	800149c <HAL_RCC_OscConfig+0x42c>
 800149a:	e0ae      	b.n	80015fa <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149c:	2027      	movs	r0, #39	@ 0x27
 800149e:	183b      	adds	r3, r7, r0
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a4:	4b8d      	ldr	r3, [pc, #564]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80014a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	055b      	lsls	r3, r3, #21
 80014ac:	4013      	ands	r3, r2
 80014ae:	d109      	bne.n	80014c4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b0:	4b8a      	ldr	r3, [pc, #552]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80014b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014b4:	4b89      	ldr	r3, [pc, #548]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80014b6:	2180      	movs	r1, #128	@ 0x80
 80014b8:	0549      	lsls	r1, r1, #21
 80014ba:	430a      	orrs	r2, r1
 80014bc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80014be:	183b      	adds	r3, r7, r0
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c4:	4b87      	ldr	r3, [pc, #540]	@ (80016e4 <HAL_RCC_OscConfig+0x674>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	2380      	movs	r3, #128	@ 0x80
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4013      	ands	r3, r2
 80014ce:	d11a      	bne.n	8001506 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d0:	4b84      	ldr	r3, [pc, #528]	@ (80016e4 <HAL_RCC_OscConfig+0x674>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b83      	ldr	r3, [pc, #524]	@ (80016e4 <HAL_RCC_OscConfig+0x674>)
 80014d6:	2180      	movs	r1, #128	@ 0x80
 80014d8:	0049      	lsls	r1, r1, #1
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fb7b 	bl	8000bd8 <HAL_GetTick>
 80014e2:	0003      	movs	r3, r0
 80014e4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e8:	f7ff fb76 	bl	8000bd8 <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e173      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	4b7a      	ldr	r3, [pc, #488]	@ (80016e4 <HAL_RCC_OscConfig+0x674>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	2380      	movs	r3, #128	@ 0x80
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4013      	ands	r3, r2
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	429a      	cmp	r2, r3
 8001510:	d107      	bne.n	8001522 <HAL_RCC_OscConfig+0x4b2>
 8001512:	4b72      	ldr	r3, [pc, #456]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001514:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001516:	4b71      	ldr	r3, [pc, #452]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001518:	2180      	movs	r1, #128	@ 0x80
 800151a:	0049      	lsls	r1, r1, #1
 800151c:	430a      	orrs	r2, r1
 800151e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001520:	e031      	b.n	8001586 <HAL_RCC_OscConfig+0x516>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x4d4>
 800152a:	4b6c      	ldr	r3, [pc, #432]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 800152c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800152e:	4b6b      	ldr	r3, [pc, #428]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001530:	496b      	ldr	r1, [pc, #428]	@ (80016e0 <HAL_RCC_OscConfig+0x670>)
 8001532:	400a      	ands	r2, r1
 8001534:	651a      	str	r2, [r3, #80]	@ 0x50
 8001536:	4b69      	ldr	r3, [pc, #420]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800153a:	4b68      	ldr	r3, [pc, #416]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 800153c:	496a      	ldr	r1, [pc, #424]	@ (80016e8 <HAL_RCC_OscConfig+0x678>)
 800153e:	400a      	ands	r2, r1
 8001540:	651a      	str	r2, [r3, #80]	@ 0x50
 8001542:	e020      	b.n	8001586 <HAL_RCC_OscConfig+0x516>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	23a0      	movs	r3, #160	@ 0xa0
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	429a      	cmp	r2, r3
 800154e:	d10e      	bne.n	800156e <HAL_RCC_OscConfig+0x4fe>
 8001550:	4b62      	ldr	r3, [pc, #392]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001554:	4b61      	ldr	r3, [pc, #388]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001556:	2180      	movs	r1, #128	@ 0x80
 8001558:	00c9      	lsls	r1, r1, #3
 800155a:	430a      	orrs	r2, r1
 800155c:	651a      	str	r2, [r3, #80]	@ 0x50
 800155e:	4b5f      	ldr	r3, [pc, #380]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001560:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001562:	4b5e      	ldr	r3, [pc, #376]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001564:	2180      	movs	r1, #128	@ 0x80
 8001566:	0049      	lsls	r1, r1, #1
 8001568:	430a      	orrs	r2, r1
 800156a:	651a      	str	r2, [r3, #80]	@ 0x50
 800156c:	e00b      	b.n	8001586 <HAL_RCC_OscConfig+0x516>
 800156e:	4b5b      	ldr	r3, [pc, #364]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001570:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001572:	4b5a      	ldr	r3, [pc, #360]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001574:	495a      	ldr	r1, [pc, #360]	@ (80016e0 <HAL_RCC_OscConfig+0x670>)
 8001576:	400a      	ands	r2, r1
 8001578:	651a      	str	r2, [r3, #80]	@ 0x50
 800157a:	4b58      	ldr	r3, [pc, #352]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 800157c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800157e:	4b57      	ldr	r3, [pc, #348]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001580:	4959      	ldr	r1, [pc, #356]	@ (80016e8 <HAL_RCC_OscConfig+0x678>)
 8001582:	400a      	ands	r2, r1
 8001584:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d015      	beq.n	80015ba <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fb23 	bl	8000bd8 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001596:	e009      	b.n	80015ac <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fb1e 	bl	8000bd8 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	4a52      	ldr	r2, [pc, #328]	@ (80016ec <HAL_RCC_OscConfig+0x67c>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e11a      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015ac:	4b4b      	ldr	r3, [pc, #300]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80015ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015b0:	2380      	movs	r3, #128	@ 0x80
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0ef      	beq.n	8001598 <HAL_RCC_OscConfig+0x528>
 80015b8:	e014      	b.n	80015e4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb0d 	bl	8000bd8 <HAL_GetTick>
 80015be:	0003      	movs	r3, r0
 80015c0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015c2:	e009      	b.n	80015d8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff fb08 	bl	8000bd8 <HAL_GetTick>
 80015c8:	0002      	movs	r2, r0
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	4a47      	ldr	r2, [pc, #284]	@ (80016ec <HAL_RCC_OscConfig+0x67c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e104      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015d8:	4b40      	ldr	r3, [pc, #256]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80015da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4013      	ands	r3, r2
 80015e2:	d1ef      	bne.n	80015c4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80015e4:	2327      	movs	r3, #39	@ 0x27
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d105      	bne.n	80015fa <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ee:	4b3b      	ldr	r3, [pc, #236]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80015f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015f2:	4b3a      	ldr	r3, [pc, #232]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80015f4:	493e      	ldr	r1, [pc, #248]	@ (80016f0 <HAL_RCC_OscConfig+0x680>)
 80015f6:	400a      	ands	r2, r1
 80015f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2220      	movs	r2, #32
 8001600:	4013      	ands	r3, r2
 8001602:	d049      	beq.n	8001698 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d026      	beq.n	800165a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800160c:	4b33      	ldr	r3, [pc, #204]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	4b32      	ldr	r3, [pc, #200]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001612:	2101      	movs	r1, #1
 8001614:	430a      	orrs	r2, r1
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	4b30      	ldr	r3, [pc, #192]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 800161a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800161c:	4b2f      	ldr	r3, [pc, #188]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 800161e:	2101      	movs	r1, #1
 8001620:	430a      	orrs	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	@ 0x34
 8001624:	4b33      	ldr	r3, [pc, #204]	@ (80016f4 <HAL_RCC_OscConfig+0x684>)
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <HAL_RCC_OscConfig+0x684>)
 800162a:	2180      	movs	r1, #128	@ 0x80
 800162c:	0189      	lsls	r1, r1, #6
 800162e:	430a      	orrs	r2, r1
 8001630:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001632:	f7ff fad1 	bl	8000bd8 <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800163c:	f7ff facc 	bl	8000bd8 <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e0c9      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800164e:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2202      	movs	r2, #2
 8001654:	4013      	ands	r3, r2
 8001656:	d0f1      	beq.n	800163c <HAL_RCC_OscConfig+0x5cc>
 8001658:	e01e      	b.n	8001698 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800165a:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001660:	2101      	movs	r1, #1
 8001662:	438a      	bics	r2, r1
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	4b23      	ldr	r3, [pc, #140]	@ (80016f4 <HAL_RCC_OscConfig+0x684>)
 8001668:	6a1a      	ldr	r2, [r3, #32]
 800166a:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <HAL_RCC_OscConfig+0x684>)
 800166c:	4922      	ldr	r1, [pc, #136]	@ (80016f8 <HAL_RCC_OscConfig+0x688>)
 800166e:	400a      	ands	r2, r1
 8001670:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001672:	f7ff fab1 	bl	8000bd8 <HAL_GetTick>
 8001676:	0003      	movs	r3, r0
 8001678:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800167c:	f7ff faac 	bl	8000bd8 <HAL_GetTick>
 8001680:	0002      	movs	r2, r0
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0a9      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800168e:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2202      	movs	r2, #2
 8001694:	4013      	ands	r3, r2
 8001696:	d1f1      	bne.n	800167c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169c:	2b00      	cmp	r3, #0
 800169e:	d100      	bne.n	80016a2 <HAL_RCC_OscConfig+0x632>
 80016a0:	e09e      	b.n	80017e0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	2b0c      	cmp	r3, #12
 80016a6:	d100      	bne.n	80016aa <HAL_RCC_OscConfig+0x63a>
 80016a8:	e077      	b.n	800179a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d158      	bne.n	8001764 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b2:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <HAL_RCC_OscConfig+0x66c>)
 80016b8:	4910      	ldr	r1, [pc, #64]	@ (80016fc <HAL_RCC_OscConfig+0x68c>)
 80016ba:	400a      	ands	r2, r1
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff fa8b 	bl	8000bd8 <HAL_GetTick>
 80016c2:	0003      	movs	r3, r0
 80016c4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80016c6:	e01b      	b.n	8001700 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff fa86 	bl	8000bd8 <HAL_GetTick>
 80016cc:	0002      	movs	r2, r0
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d914      	bls.n	8001700 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e083      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	40021000 	.word	0x40021000
 80016e0:	fffffeff 	.word	0xfffffeff
 80016e4:	40007000 	.word	0x40007000
 80016e8:	fffffbff 	.word	0xfffffbff
 80016ec:	00001388 	.word	0x00001388
 80016f0:	efffffff 	.word	0xefffffff
 80016f4:	40010000 	.word	0x40010000
 80016f8:	ffffdfff 	.word	0xffffdfff
 80016fc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001700:	4b3a      	ldr	r3, [pc, #232]	@ (80017ec <HAL_RCC_OscConfig+0x77c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2380      	movs	r3, #128	@ 0x80
 8001706:	049b      	lsls	r3, r3, #18
 8001708:	4013      	ands	r3, r2
 800170a:	d1dd      	bne.n	80016c8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800170c:	4b37      	ldr	r3, [pc, #220]	@ (80017ec <HAL_RCC_OscConfig+0x77c>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4a37      	ldr	r2, [pc, #220]	@ (80017f0 <HAL_RCC_OscConfig+0x780>)
 8001712:	4013      	ands	r3, r2
 8001714:	0019      	movs	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001724:	431a      	orrs	r2, r3
 8001726:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <HAL_RCC_OscConfig+0x77c>)
 8001728:	430a      	orrs	r2, r1
 800172a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800172c:	4b2f      	ldr	r3, [pc, #188]	@ (80017ec <HAL_RCC_OscConfig+0x77c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b2e      	ldr	r3, [pc, #184]	@ (80017ec <HAL_RCC_OscConfig+0x77c>)
 8001732:	2180      	movs	r1, #128	@ 0x80
 8001734:	0449      	lsls	r1, r1, #17
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fa4d 	bl	8000bd8 <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001744:	f7ff fa48 	bl	8000bd8 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e045      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001756:	4b25      	ldr	r3, [pc, #148]	@ (80017ec <HAL_RCC_OscConfig+0x77c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2380      	movs	r3, #128	@ 0x80
 800175c:	049b      	lsls	r3, r3, #18
 800175e:	4013      	ands	r3, r2
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x6d4>
 8001762:	e03d      	b.n	80017e0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <HAL_RCC_OscConfig+0x77c>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <HAL_RCC_OscConfig+0x77c>)
 800176a:	4922      	ldr	r1, [pc, #136]	@ (80017f4 <HAL_RCC_OscConfig+0x784>)
 800176c:	400a      	ands	r2, r1
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fa32 	bl	8000bd8 <HAL_GetTick>
 8001774:	0003      	movs	r3, r0
 8001776:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fa2d 	bl	8000bd8 <HAL_GetTick>
 800177e:	0002      	movs	r2, r0
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e02a      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800178c:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <HAL_RCC_OscConfig+0x77c>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	049b      	lsls	r3, r3, #18
 8001794:	4013      	ands	r3, r2
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x70a>
 8001798:	e022      	b.n	80017e0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d101      	bne.n	80017a6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e01d      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a6:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <HAL_RCC_OscConfig+0x77c>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	2380      	movs	r3, #128	@ 0x80
 80017b0:	025b      	lsls	r3, r3, #9
 80017b2:	401a      	ands	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d10f      	bne.n	80017dc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	23f0      	movs	r3, #240	@ 0xf0
 80017c0:	039b      	lsls	r3, r3, #14
 80017c2:	401a      	ands	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d107      	bne.n	80017dc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	23c0      	movs	r3, #192	@ 0xc0
 80017d0:	041b      	lsls	r3, r3, #16
 80017d2:	401a      	ands	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b00a      	add	sp, #40	@ 0x28
 80017e8:	bdb0      	pop	{r4, r5, r7, pc}
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	40021000 	.word	0x40021000
 80017f0:	ff02ffff 	.word	0xff02ffff
 80017f4:	feffffff 	.word	0xfeffffff

080017f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e128      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b96      	ldr	r3, [pc, #600]	@ (8001a68 <HAL_RCC_ClockConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	4013      	ands	r3, r2
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d91e      	bls.n	8001858 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b93      	ldr	r3, [pc, #588]	@ (8001a68 <HAL_RCC_ClockConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2201      	movs	r2, #1
 8001820:	4393      	bics	r3, r2
 8001822:	0019      	movs	r1, r3
 8001824:	4b90      	ldr	r3, [pc, #576]	@ (8001a68 <HAL_RCC_ClockConfig+0x270>)
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	430a      	orrs	r2, r1
 800182a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800182c:	f7ff f9d4 	bl	8000bd8 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001834:	e009      	b.n	800184a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001836:	f7ff f9cf 	bl	8000bd8 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	4a8a      	ldr	r2, [pc, #552]	@ (8001a6c <HAL_RCC_ClockConfig+0x274>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e109      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b87      	ldr	r3, [pc, #540]	@ (8001a68 <HAL_RCC_ClockConfig+0x270>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2201      	movs	r2, #1
 8001850:	4013      	ands	r3, r2
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d1ee      	bne.n	8001836 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2202      	movs	r2, #2
 800185e:	4013      	ands	r3, r2
 8001860:	d009      	beq.n	8001876 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001862:	4b83      	ldr	r3, [pc, #524]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	22f0      	movs	r2, #240	@ 0xf0
 8001868:	4393      	bics	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	4b7f      	ldr	r3, [pc, #508]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 8001872:	430a      	orrs	r2, r1
 8001874:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2201      	movs	r2, #1
 800187c:	4013      	ands	r3, r2
 800187e:	d100      	bne.n	8001882 <HAL_RCC_ClockConfig+0x8a>
 8001880:	e089      	b.n	8001996 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b02      	cmp	r3, #2
 8001888:	d107      	bne.n	800189a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800188a:	4b79      	ldr	r3, [pc, #484]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	@ 0x80
 8001890:	029b      	lsls	r3, r3, #10
 8001892:	4013      	ands	r3, r2
 8001894:	d120      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e0e1      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018a2:	4b73      	ldr	r3, [pc, #460]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	2380      	movs	r3, #128	@ 0x80
 80018a8:	049b      	lsls	r3, r3, #18
 80018aa:	4013      	ands	r3, r2
 80018ac:	d114      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e0d5      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2204      	movs	r2, #4
 80018c0:	4013      	ands	r3, r2
 80018c2:	d109      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0ca      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80018c8:	4b69      	ldr	r3, [pc, #420]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4013      	ands	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0c2      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d8:	4b65      	ldr	r3, [pc, #404]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2203      	movs	r2, #3
 80018de:	4393      	bics	r3, r2
 80018e0:	0019      	movs	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4b62      	ldr	r3, [pc, #392]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 80018e8:	430a      	orrs	r2, r1
 80018ea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018ec:	f7ff f974 	bl	8000bd8 <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d111      	bne.n	8001920 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018fc:	e009      	b.n	8001912 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fe:	f7ff f96b 	bl	8000bd8 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	4a58      	ldr	r2, [pc, #352]	@ (8001a6c <HAL_RCC_ClockConfig+0x274>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0a5      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001912:	4b57      	ldr	r3, [pc, #348]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	220c      	movs	r2, #12
 8001918:	4013      	ands	r3, r2
 800191a:	2b08      	cmp	r3, #8
 800191c:	d1ef      	bne.n	80018fe <HAL_RCC_ClockConfig+0x106>
 800191e:	e03a      	b.n	8001996 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b03      	cmp	r3, #3
 8001926:	d111      	bne.n	800194c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001928:	e009      	b.n	800193e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800192a:	f7ff f955 	bl	8000bd8 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	4a4d      	ldr	r2, [pc, #308]	@ (8001a6c <HAL_RCC_ClockConfig+0x274>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e08f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800193e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	220c      	movs	r2, #12
 8001944:	4013      	ands	r3, r2
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d1ef      	bne.n	800192a <HAL_RCC_ClockConfig+0x132>
 800194a:	e024      	b.n	8001996 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d11b      	bne.n	800198c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001954:	e009      	b.n	800196a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001956:	f7ff f93f 	bl	8000bd8 <HAL_GetTick>
 800195a:	0002      	movs	r2, r0
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	4a42      	ldr	r2, [pc, #264]	@ (8001a6c <HAL_RCC_ClockConfig+0x274>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e079      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800196a:	4b41      	ldr	r3, [pc, #260]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	220c      	movs	r2, #12
 8001970:	4013      	ands	r3, r2
 8001972:	2b04      	cmp	r3, #4
 8001974:	d1ef      	bne.n	8001956 <HAL_RCC_ClockConfig+0x15e>
 8001976:	e00e      	b.n	8001996 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001978:	f7ff f92e 	bl	8000bd8 <HAL_GetTick>
 800197c:	0002      	movs	r2, r0
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	4a3a      	ldr	r2, [pc, #232]	@ (8001a6c <HAL_RCC_ClockConfig+0x274>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d901      	bls.n	800198c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e068      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800198c:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	220c      	movs	r2, #12
 8001992:	4013      	ands	r3, r2
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001996:	4b34      	ldr	r3, [pc, #208]	@ (8001a68 <HAL_RCC_ClockConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2201      	movs	r2, #1
 800199c:	4013      	ands	r3, r2
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d21e      	bcs.n	80019e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a4:	4b30      	ldr	r3, [pc, #192]	@ (8001a68 <HAL_RCC_ClockConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2201      	movs	r2, #1
 80019aa:	4393      	bics	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001a68 <HAL_RCC_ClockConfig+0x270>)
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019b6:	f7ff f90f 	bl	8000bd8 <HAL_GetTick>
 80019ba:	0003      	movs	r3, r0
 80019bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019be:	e009      	b.n	80019d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c0:	f7ff f90a 	bl	8000bd8 <HAL_GetTick>
 80019c4:	0002      	movs	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	4a28      	ldr	r2, [pc, #160]	@ (8001a6c <HAL_RCC_ClockConfig+0x274>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e044      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d4:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <HAL_RCC_ClockConfig+0x270>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	4013      	ands	r3, r2
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d1ee      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2204      	movs	r2, #4
 80019e8:	4013      	ands	r3, r2
 80019ea:	d009      	beq.n	8001a00 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019ec:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4a20      	ldr	r2, [pc, #128]	@ (8001a74 <HAL_RCC_ClockConfig+0x27c>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	0019      	movs	r1, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 80019fc:	430a      	orrs	r2, r1
 80019fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2208      	movs	r2, #8
 8001a06:	4013      	ands	r3, r2
 8001a08:	d00a      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a0a:	4b19      	ldr	r3, [pc, #100]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001a78 <HAL_RCC_ClockConfig+0x280>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	0019      	movs	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	00da      	lsls	r2, r3, #3
 8001a1a:	4b15      	ldr	r3, [pc, #84]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a20:	f000 f832 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8001a24:	0001      	movs	r1, r0
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <HAL_RCC_ClockConfig+0x278>)
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	4013      	ands	r3, r2
 8001a30:	4a12      	ldr	r2, [pc, #72]	@ (8001a7c <HAL_RCC_ClockConfig+0x284>)
 8001a32:	5cd3      	ldrb	r3, [r2, r3]
 8001a34:	000a      	movs	r2, r1
 8001a36:	40da      	lsrs	r2, r3
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <HAL_RCC_ClockConfig+0x288>)
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <HAL_RCC_ClockConfig+0x28c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	250b      	movs	r5, #11
 8001a42:	197c      	adds	r4, r7, r5
 8001a44:	0018      	movs	r0, r3
 8001a46:	f7fe fe53 	bl	80006f0 <HAL_InitTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a4e:	197b      	adds	r3, r7, r5
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001a56:	197b      	adds	r3, r7, r5
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	0018      	movs	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	b004      	add	sp, #16
 8001a64:	bdb0      	pop	{r4, r5, r7, pc}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	40022000 	.word	0x40022000
 8001a6c:	00001388 	.word	0x00001388
 8001a70:	40021000 	.word	0x40021000
 8001a74:	fffff8ff 	.word	0xfffff8ff
 8001a78:	ffffc7ff 	.word	0xffffc7ff
 8001a7c:	08004c30 	.word	0x08004c30
 8001a80:	20000000 	.word	0x20000000
 8001a84:	20000004 	.word	0x20000004

08001a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	220c      	movs	r2, #12
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b0c      	cmp	r3, #12
 8001a9c:	d013      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001a9e:	d85c      	bhi.n	8001b5a <HAL_RCC_GetSysClockFreq+0xd2>
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d002      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x22>
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d00b      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x38>
 8001aa8:	e057      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001aaa:	4b35      	ldr	r3, [pc, #212]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2210      	movs	r2, #16
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d002      	beq.n	8001aba <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ab4:	4b33      	ldr	r3, [pc, #204]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ab6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ab8:	e05d      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001aba:	4b33      	ldr	r3, [pc, #204]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0x100>)
 8001abc:	613b      	str	r3, [r7, #16]
      break;
 8001abe:	e05a      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac0:	4b32      	ldr	r3, [pc, #200]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8001ac2:	613b      	str	r3, [r7, #16]
      break;
 8001ac4:	e057      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	0c9b      	lsrs	r3, r3, #18
 8001aca:	220f      	movs	r2, #15
 8001acc:	4013      	ands	r3, r2
 8001ace:	4a30      	ldr	r2, [pc, #192]	@ (8001b90 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	0d9b      	lsrs	r3, r3, #22
 8001ad8:	2203      	movs	r2, #3
 8001ada:	4013      	ands	r3, r2
 8001adc:	3301      	adds	r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae0:	4b27      	ldr	r3, [pc, #156]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	2380      	movs	r3, #128	@ 0x80
 8001ae6:	025b      	lsls	r3, r3, #9
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d00f      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	000a      	movs	r2, r1
 8001af0:	0152      	lsls	r2, r2, #5
 8001af2:	1a52      	subs	r2, r2, r1
 8001af4:	0193      	lsls	r3, r2, #6
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	185b      	adds	r3, r3, r1
 8001afc:	025b      	lsls	r3, r3, #9
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7fe fb01 	bl	8000108 <__udivsi3>
 8001b06:	0003      	movs	r3, r0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	e023      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2210      	movs	r2, #16
 8001b12:	4013      	ands	r3, r2
 8001b14:	d00f      	beq.n	8001b36 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8001b16:	68b9      	ldr	r1, [r7, #8]
 8001b18:	000a      	movs	r2, r1
 8001b1a:	0152      	lsls	r2, r2, #5
 8001b1c:	1a52      	subs	r2, r2, r1
 8001b1e:	0193      	lsls	r3, r2, #6
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	185b      	adds	r3, r3, r1
 8001b26:	021b      	lsls	r3, r3, #8
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f7fe faec 	bl	8000108 <__udivsi3>
 8001b30:	0003      	movs	r3, r0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e00e      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	000a      	movs	r2, r1
 8001b3a:	0152      	lsls	r2, r2, #5
 8001b3c:	1a52      	subs	r2, r2, r1
 8001b3e:	0193      	lsls	r3, r2, #6
 8001b40:	1a9b      	subs	r3, r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	185b      	adds	r3, r3, r1
 8001b46:	029b      	lsls	r3, r3, #10
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f7fe fadc 	bl	8000108 <__udivsi3>
 8001b50:	0003      	movs	r3, r0
 8001b52:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
      break;
 8001b58:	e00d      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	0b5b      	lsrs	r3, r3, #13
 8001b60:	2207      	movs	r2, #7
 8001b62:	4013      	ands	r3, r2
 8001b64:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	2280      	movs	r2, #128	@ 0x80
 8001b6c:	0212      	lsls	r2, r2, #8
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
      break;
 8001b74:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b76:	693b      	ldr	r3, [r7, #16]
}
 8001b78:	0018      	movs	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b006      	add	sp, #24
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40021000 	.word	0x40021000
 8001b84:	003d0900 	.word	0x003d0900
 8001b88:	00f42400 	.word	0x00f42400
 8001b8c:	007a1200 	.word	0x007a1200
 8001b90:	08004c48 	.word	0x08004c48

08001b94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b98:	4b02      	ldr	r3, [pc, #8]	@ (8001ba4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bac:	f7ff fff2 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bb0:	0001      	movs	r1, r0
 8001bb2:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	2207      	movs	r2, #7
 8001bba:	4013      	ands	r3, r2
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	40d9      	lsrs	r1, r3
 8001bc2:	000b      	movs	r3, r1
}
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08004c40 	.word	0x08004c40

08001bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bd8:	f7ff ffdc 	bl	8001b94 <HAL_RCC_GetHCLKFreq>
 8001bdc:	0001      	movs	r1, r0
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	0adb      	lsrs	r3, r3, #11
 8001be4:	2207      	movs	r2, #7
 8001be6:	4013      	ands	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bea:	5cd3      	ldrb	r3, [r2, r3]
 8001bec:	40d9      	lsrs	r1, r3
 8001bee:	000b      	movs	r3, r1
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	08004c40 	.word	0x08004c40

08001c00 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	2203      	movs	r2, #3
 8001c16:	401a      	ands	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	22f0      	movs	r2, #240	@ 0xf0
 8001c22:	401a      	ands	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	23e0      	movs	r3, #224	@ 0xe0
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	401a      	ands	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <HAL_RCC_GetClockConfig+0x5c>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	08da      	lsrs	r2, r3, #3
 8001c3c:	23e0      	movs	r3, #224	@ 0xe0
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	401a      	ands	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c46:	4b06      	ldr	r3, [pc, #24]	@ (8001c60 <HAL_RCC_GetClockConfig+0x60>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	601a      	str	r2, [r3, #0]
}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	b002      	add	sp, #8
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40022000 	.word	0x40022000

08001c64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001c6c:	2317      	movs	r3, #23
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d106      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	@ 0x80
 8001c84:	011b      	lsls	r3, r3, #4
 8001c86:	4013      	ands	r3, r2
 8001c88:	d100      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001c8a:	e104      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8c:	4bb1      	ldr	r3, [pc, #708]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c90:	2380      	movs	r3, #128	@ 0x80
 8001c92:	055b      	lsls	r3, r3, #21
 8001c94:	4013      	ands	r3, r2
 8001c96:	d10a      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	4bae      	ldr	r3, [pc, #696]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001c9c:	4bad      	ldr	r3, [pc, #692]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001c9e:	2180      	movs	r1, #128	@ 0x80
 8001ca0:	0549      	lsls	r1, r1, #21
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001ca6:	2317      	movs	r3, #23
 8001ca8:	18fb      	adds	r3, r7, r3
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cae:	4baa      	ldr	r3, [pc, #680]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	2380      	movs	r3, #128	@ 0x80
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d11a      	bne.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cba:	4ba7      	ldr	r3, [pc, #668]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	4ba6      	ldr	r3, [pc, #664]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001cc0:	2180      	movs	r1, #128	@ 0x80
 8001cc2:	0049      	lsls	r1, r1, #1
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc8:	f7fe ff86 	bl	8000bd8 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd2:	f7fe ff81 	bl	8000bd8 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b64      	cmp	r3, #100	@ 0x64
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e133      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce4:	4b9c      	ldr	r3, [pc, #624]	@ (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4013      	ands	r3, r2
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001cf0:	4b98      	ldr	r3, [pc, #608]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	23c0      	movs	r3, #192	@ 0xc0
 8001cf6:	039b      	lsls	r3, r3, #14
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	23c0      	movs	r3, #192	@ 0xc0
 8001d02:	039b      	lsls	r3, r3, #14
 8001d04:	4013      	ands	r3, r2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	23c0      	movs	r3, #192	@ 0xc0
 8001d12:	039b      	lsls	r3, r3, #14
 8001d14:	4013      	ands	r3, r2
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	23c0      	movs	r3, #192	@ 0xc0
 8001d22:	029b      	lsls	r3, r3, #10
 8001d24:	401a      	ands	r2, r3
 8001d26:	23c0      	movs	r3, #192	@ 0xc0
 8001d28:	029b      	lsls	r3, r3, #10
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d10a      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d2e:	4b89      	ldr	r3, [pc, #548]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	401a      	ands	r2, r3
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	029b      	lsls	r3, r3, #10
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e103      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d44:	4b83      	ldr	r3, [pc, #524]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d46:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d48:	23c0      	movs	r3, #192	@ 0xc0
 8001d4a:	029b      	lsls	r3, r3, #10
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d049      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	23c0      	movs	r3, #192	@ 0xc0
 8001d5c:	029b      	lsls	r3, r3, #10
 8001d5e:	4013      	ands	r3, r2
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d004      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	23c0      	movs	r3, #192	@ 0xc0
 8001d76:	029b      	lsls	r3, r3, #10
 8001d78:	4013      	ands	r3, r2
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d034      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d02e      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d8c:	4b71      	ldr	r3, [pc, #452]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d90:	4a72      	ldr	r2, [pc, #456]	@ (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d96:	4b6f      	ldr	r3, [pc, #444]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	0309      	lsls	r1, r1, #12
 8001da0:	430a      	orrs	r2, r1
 8001da2:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001da4:	4b6b      	ldr	r3, [pc, #428]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001da6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001da8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001daa:	496d      	ldr	r1, [pc, #436]	@ (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001db0:	4b68      	ldr	r3, [pc, #416]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d014      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe ff0a 	bl	8000bd8 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dc8:	e009      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dca:	f7fe ff05 	bl	8000bd8 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	4a63      	ldr	r2, [pc, #396]	@ (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0b6      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dde:	4b5d      	ldr	r3, [pc, #372]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001de0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d0ef      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	@ 0x80
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	4013      	ands	r3, r2
 8001df4:	d01f      	beq.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	23c0      	movs	r3, #192	@ 0xc0
 8001dfc:	029b      	lsls	r3, r3, #10
 8001dfe:	401a      	ands	r2, r3
 8001e00:	23c0      	movs	r3, #192	@ 0xc0
 8001e02:	029b      	lsls	r3, r3, #10
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d10c      	bne.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8001e08:	4b52      	ldr	r3, [pc, #328]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a56      	ldr	r2, [pc, #344]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	23c0      	movs	r3, #192	@ 0xc0
 8001e18:	039b      	lsls	r3, r3, #14
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	4b4c      	ldr	r3, [pc, #304]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	23c0      	movs	r3, #192	@ 0xc0
 8001e2c:	029b      	lsls	r3, r3, #10
 8001e2e:	401a      	ands	r2, r3
 8001e30:	4b48      	ldr	r3, [pc, #288]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e32:	430a      	orrs	r2, r1
 8001e34:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d01f      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	23c0      	movs	r3, #192	@ 0xc0
 8001e46:	029b      	lsls	r3, r3, #10
 8001e48:	401a      	ands	r2, r3
 8001e4a:	23c0      	movs	r3, #192	@ 0xc0
 8001e4c:	029b      	lsls	r3, r3, #10
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8001e52:	4b40      	ldr	r3, [pc, #256]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a44      	ldr	r2, [pc, #272]	@ (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	23c0      	movs	r3, #192	@ 0xc0
 8001e62:	039b      	lsls	r3, r3, #14
 8001e64:	401a      	ands	r2, r3
 8001e66:	4b3b      	ldr	r3, [pc, #236]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	4b39      	ldr	r3, [pc, #228]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e6e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	23c0      	movs	r3, #192	@ 0xc0
 8001e76:	029b      	lsls	r3, r3, #10
 8001e78:	401a      	ands	r2, r3
 8001e7a:	4b36      	ldr	r3, [pc, #216]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e80:	2317      	movs	r3, #23
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b32      	ldr	r3, [pc, #200]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e8e:	4b31      	ldr	r3, [pc, #196]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e90:	4936      	ldr	r1, [pc, #216]	@ (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	4393      	bics	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ebe:	4b25      	ldr	r3, [pc, #148]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	4393      	bics	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	4b21      	ldr	r3, [pc, #132]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2204      	movs	r2, #4
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d009      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001edc:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee0:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	0019      	movs	r1, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	4b1a      	ldr	r3, [pc, #104]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eec:	430a      	orrs	r2, r1
 8001eee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001efa:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efe:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699a      	ldr	r2, [r3, #24]
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2240      	movs	r2, #64	@ 0x40
 8001f14:	4013      	ands	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f18:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1c:	4a16      	ldr	r2, [pc, #88]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a1a      	ldr	r2, [r3, #32]
 8001f26:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2280      	movs	r2, #128	@ 0x80
 8001f32:	4013      	ands	r3, r2
 8001f34:	d009      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f36:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	4a10      	ldr	r2, [pc, #64]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	4b03      	ldr	r3, [pc, #12]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b006      	add	sp, #24
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40007000 	.word	0x40007000
 8001f5c:	fffcffff 	.word	0xfffcffff
 8001f60:	fff7ffff 	.word	0xfff7ffff
 8001f64:	00001388 	.word	0x00001388
 8001f68:	ffcfffff 	.word	0xffcfffff
 8001f6c:	efffffff 	.word	0xefffffff
 8001f70:	fffff3ff 	.word	0xfffff3ff
 8001f74:	ffffcfff 	.word	0xffffcfff
 8001f78:	fbffffff 	.word	0xfbffffff
 8001f7c:	fff3ffff 	.word	0xfff3ffff

08001f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e032      	b.n	8001ff8 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2239      	movs	r2, #57	@ 0x39
 8001f96:	5c9b      	ldrb	r3, [r3, r2]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2238      	movs	r2, #56	@ 0x38
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f000 f829 	bl	8002000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2239      	movs	r2, #57	@ 0x39
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	0019      	movs	r1, r3
 8001fc0:	0010      	movs	r0, r2
 8001fc2:	f000 f95d 	bl	8002280 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	223e      	movs	r2, #62	@ 0x3e
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	223a      	movs	r2, #58	@ 0x3a
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	223b      	movs	r2, #59	@ 0x3b
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	223c      	movs	r2, #60	@ 0x3c
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	5499      	strb	r1, [r3, r2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	223d      	movs	r2, #61	@ 0x3d
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2239      	movs	r2, #57	@ 0x39
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002008:	46c0      	nop			@ (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2239      	movs	r2, #57	@ 0x39
 800201c:	5c9b      	ldrb	r3, [r3, r2]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d001      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e036      	b.n	8002096 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2239      	movs	r2, #57	@ 0x39
 800202c:	2102      	movs	r1, #2
 800202e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2101      	movs	r1, #1
 800203c:	430a      	orrs	r2, r1
 800203e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	05db      	lsls	r3, r3, #23
 8002048:	429a      	cmp	r2, r3
 800204a:	d009      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x50>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a13      	ldr	r2, [pc, #76]	@ (80020a0 <HAL_TIM_Base_Start_IT+0x90>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d004      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x50>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <HAL_TIM_Base_Start_IT+0x94>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d111      	bne.n	8002084 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2207      	movs	r2, #7
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b06      	cmp	r3, #6
 8002070:	d010      	beq.n	8002094 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002082:	e007      	b.n	8002094 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2101      	movs	r1, #1
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	40010800 	.word	0x40010800
 80020a4:	40011400 	.word	0x40011400

080020a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2202      	movs	r2, #2
 80020c4:	4013      	ands	r3, r2
 80020c6:	d021      	beq.n	800210c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2202      	movs	r2, #2
 80020cc:	4013      	ands	r3, r2
 80020ce:	d01d      	beq.n	800210c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2203      	movs	r2, #3
 80020d6:	4252      	negs	r2, r2
 80020d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	2203      	movs	r2, #3
 80020e8:	4013      	ands	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 f8ae 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 80020f4:	e007      	b.n	8002106 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 f8a1 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	0018      	movs	r0, r3
 8002102:	f000 f8ad 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	2204      	movs	r2, #4
 8002110:	4013      	ands	r3, r2
 8002112:	d022      	beq.n	800215a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2204      	movs	r2, #4
 8002118:	4013      	ands	r3, r2
 800211a:	d01e      	beq.n	800215a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2205      	movs	r2, #5
 8002122:	4252      	negs	r2, r2
 8002124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699a      	ldr	r2, [r3, #24]
 8002132:	23c0      	movs	r3, #192	@ 0xc0
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4013      	ands	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	0018      	movs	r0, r3
 800213e:	f000 f887 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 8002142:	e007      	b.n	8002154 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	0018      	movs	r0, r3
 8002148:	f000 f87a 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	0018      	movs	r0, r3
 8002150:	f000 f886 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2208      	movs	r2, #8
 800215e:	4013      	ands	r3, r2
 8002160:	d021      	beq.n	80021a6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2208      	movs	r2, #8
 8002166:	4013      	ands	r3, r2
 8002168:	d01d      	beq.n	80021a6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2209      	movs	r2, #9
 8002170:	4252      	negs	r2, r2
 8002172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2204      	movs	r2, #4
 8002178:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	2203      	movs	r2, #3
 8002182:	4013      	ands	r3, r2
 8002184:	d004      	beq.n	8002190 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 f861 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 800218e:	e007      	b.n	80021a0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0018      	movs	r0, r3
 8002194:	f000 f854 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	0018      	movs	r0, r3
 800219c:	f000 f860 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2210      	movs	r2, #16
 80021aa:	4013      	ands	r3, r2
 80021ac:	d022      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2210      	movs	r2, #16
 80021b2:	4013      	ands	r3, r2
 80021b4:	d01e      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2211      	movs	r2, #17
 80021bc:	4252      	negs	r2, r2
 80021be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2208      	movs	r2, #8
 80021c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	23c0      	movs	r3, #192	@ 0xc0
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4013      	ands	r3, r2
 80021d2:	d004      	beq.n	80021de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 f83a 	bl	8002250 <HAL_TIM_IC_CaptureCallback>
 80021dc:	e007      	b.n	80021ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f82d 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 f839 	bl	8002260 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2201      	movs	r2, #1
 80021f8:	4013      	ands	r3, r2
 80021fa:	d00c      	beq.n	8002216 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2201      	movs	r2, #1
 8002200:	4013      	ands	r3, r2
 8002202:	d008      	beq.n	8002216 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2202      	movs	r2, #2
 800220a:	4252      	negs	r2, r2
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	0018      	movs	r0, r3
 8002212:	f7fe fa39 	bl	8000688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2240      	movs	r2, #64	@ 0x40
 800221a:	4013      	ands	r3, r2
 800221c:	d00c      	beq.n	8002238 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2240      	movs	r2, #64	@ 0x40
 8002222:	4013      	ands	r3, r2
 8002224:	d008      	beq.n	8002238 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2241      	movs	r2, #65	@ 0x41
 800222c:	4252      	negs	r2, r2
 800222e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	0018      	movs	r0, r3
 8002234:	f000 f81c 	bl	8002270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002238:	46c0      	nop			@ (mov r8, r8)
 800223a:	46bd      	mov	sp, r7
 800223c:	b004      	add	sp, #16
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002248:	46c0      	nop			@ (mov r8, r8)
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	b002      	add	sp, #8
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002268:	46c0      	nop			@ (mov r8, r8)
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002278:	46c0      	nop			@ (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}

08002280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	2380      	movs	r3, #128	@ 0x80
 8002294:	05db      	lsls	r3, r3, #23
 8002296:	429a      	cmp	r2, r3
 8002298:	d007      	beq.n	80022aa <TIM_Base_SetConfig+0x2a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a22      	ldr	r2, [pc, #136]	@ (8002328 <TIM_Base_SetConfig+0xa8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <TIM_Base_SetConfig+0x2a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a21      	ldr	r2, [pc, #132]	@ (800232c <TIM_Base_SetConfig+0xac>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d108      	bne.n	80022bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2270      	movs	r2, #112	@ 0x70
 80022ae:	4393      	bics	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	2380      	movs	r3, #128	@ 0x80
 80022c0:	05db      	lsls	r3, r3, #23
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d007      	beq.n	80022d6 <TIM_Base_SetConfig+0x56>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a17      	ldr	r2, [pc, #92]	@ (8002328 <TIM_Base_SetConfig+0xa8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d003      	beq.n	80022d6 <TIM_Base_SetConfig+0x56>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a16      	ldr	r2, [pc, #88]	@ (800232c <TIM_Base_SetConfig+0xac>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d108      	bne.n	80022e8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	4a15      	ldr	r2, [pc, #84]	@ (8002330 <TIM_Base_SetConfig+0xb0>)
 80022da:	4013      	ands	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2280      	movs	r2, #128	@ 0x80
 80022ec:	4393      	bics	r3, r2
 80022ee:	001a      	movs	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2204      	movs	r2, #4
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	46c0      	nop			@ (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b004      	add	sp, #16
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40010800 	.word	0x40010800
 800232c:	40011400 	.word	0x40011400
 8002330:	fffffcff 	.word	0xfffffcff

08002334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e044      	b.n	80023d0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d107      	bne.n	800235e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2278      	movs	r2, #120	@ 0x78
 8002352:	2100      	movs	r1, #0
 8002354:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f7fe fb27 	bl	80009ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2224      	movs	r2, #36	@ 0x24
 8002362:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2101      	movs	r1, #1
 8002370:	438a      	bics	r2, r1
 8002372:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	0018      	movs	r0, r3
 8002380:	f000 fb50 	bl	8002a24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0018      	movs	r0, r3
 8002388:	f000 f8c8 	bl	800251c <UART_SetConfig>
 800238c:	0003      	movs	r3, r0
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e01c      	b.n	80023d0 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	490d      	ldr	r1, [pc, #52]	@ (80023d8 <HAL_UART_Init+0xa4>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	212a      	movs	r1, #42	@ 0x2a
 80023b2:	438a      	bics	r2, r1
 80023b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2101      	movs	r1, #1
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	0018      	movs	r0, r3
 80023ca:	f000 fbdf 	bl	8002b8c <UART_CheckIdleState>
 80023ce:	0003      	movs	r3, r0
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	ffffb7ff 	.word	0xffffb7ff

080023dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	@ 0x28
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	1dbb      	adds	r3, r7, #6
 80023ea:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023f0:	2b20      	cmp	r3, #32
 80023f2:	d000      	beq.n	80023f6 <HAL_UART_Transmit+0x1a>
 80023f4:	e08c      	b.n	8002510 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_UART_Transmit+0x28>
 80023fc:	1dbb      	adds	r3, r7, #6
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e084      	b.n	8002512 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	015b      	lsls	r3, r3, #5
 8002410:	429a      	cmp	r2, r3
 8002412:	d109      	bne.n	8002428 <HAL_UART_Transmit+0x4c>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2201      	movs	r2, #1
 8002420:	4013      	ands	r3, r2
 8002422:	d001      	beq.n	8002428 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e074      	b.n	8002512 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2284      	movs	r2, #132	@ 0x84
 800242c:	2100      	movs	r1, #0
 800242e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2221      	movs	r2, #33	@ 0x21
 8002434:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002436:	f7fe fbcf 	bl	8000bd8 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1dba      	adds	r2, r7, #6
 8002442:	2150      	movs	r1, #80	@ 0x50
 8002444:	8812      	ldrh	r2, [r2, #0]
 8002446:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1dba      	adds	r2, r7, #6
 800244c:	2152      	movs	r1, #82	@ 0x52
 800244e:	8812      	ldrh	r2, [r2, #0]
 8002450:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	2380      	movs	r3, #128	@ 0x80
 8002458:	015b      	lsls	r3, r3, #5
 800245a:	429a      	cmp	r2, r3
 800245c:	d108      	bne.n	8002470 <HAL_UART_Transmit+0x94>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	e003      	b.n	8002478 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002478:	e02f      	b.n	80024da <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	0013      	movs	r3, r2
 8002484:	2200      	movs	r2, #0
 8002486:	2180      	movs	r1, #128	@ 0x80
 8002488:	f000 fc28 	bl	8002cdc <UART_WaitOnFlagUntilTimeout>
 800248c:	1e03      	subs	r3, r0, #0
 800248e:	d004      	beq.n	800249a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e03b      	b.n	8002512 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10b      	bne.n	80024b8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	001a      	movs	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	05d2      	lsls	r2, r2, #23
 80024ac:	0dd2      	lsrs	r2, r2, #23
 80024ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	3302      	adds	r3, #2
 80024b4:	61bb      	str	r3, [r7, #24]
 80024b6:	e007      	b.n	80024c8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	781a      	ldrb	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3301      	adds	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2252      	movs	r2, #82	@ 0x52
 80024cc:	5a9b      	ldrh	r3, [r3, r2]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b299      	uxth	r1, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2252      	movs	r2, #82	@ 0x52
 80024d8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2252      	movs	r2, #82	@ 0x52
 80024de:	5a9b      	ldrh	r3, [r3, r2]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1c9      	bne.n	800247a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	0013      	movs	r3, r2
 80024f0:	2200      	movs	r2, #0
 80024f2:	2140      	movs	r1, #64	@ 0x40
 80024f4:	f000 fbf2 	bl	8002cdc <UART_WaitOnFlagUntilTimeout>
 80024f8:	1e03      	subs	r3, r0, #0
 80024fa:	d004      	beq.n	8002506 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e005      	b.n	8002512 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	e000      	b.n	8002512 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002510:	2302      	movs	r3, #2
  }
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b008      	add	sp, #32
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800251c:	b5b0      	push	{r4, r5, r7, lr}
 800251e:	b08e      	sub	sp, #56	@ 0x38
 8002520:	af00      	add	r7, sp, #0
 8002522:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002524:	231a      	movs	r3, #26
 8002526:	2218      	movs	r2, #24
 8002528:	189b      	adds	r3, r3, r2
 800252a:	19db      	adds	r3, r3, r7
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	431a      	orrs	r2, r3
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	431a      	orrs	r2, r3
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	4313      	orrs	r3, r2
 8002546:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4ac6      	ldr	r2, [pc, #792]	@ (8002868 <UART_SetConfig+0x34c>)
 8002550:	4013      	ands	r3, r2
 8002552:	0019      	movs	r1, r3
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4ac1      	ldr	r2, [pc, #772]	@ (800286c <UART_SetConfig+0x350>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4abb      	ldr	r2, [pc, #748]	@ (8002870 <UART_SetConfig+0x354>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d004      	beq.n	8002590 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800258c:	4313      	orrs	r3, r2
 800258e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	4ab7      	ldr	r2, [pc, #732]	@ (8002874 <UART_SetConfig+0x358>)
 8002598:	4013      	ands	r3, r2
 800259a:	0019      	movs	r1, r3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4ab3      	ldr	r2, [pc, #716]	@ (8002878 <UART_SetConfig+0x35c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d131      	bne.n	8002614 <UART_SetConfig+0xf8>
 80025b0:	4bb2      	ldr	r3, [pc, #712]	@ (800287c <UART_SetConfig+0x360>)
 80025b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b4:	2203      	movs	r2, #3
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d01d      	beq.n	80025f8 <UART_SetConfig+0xdc>
 80025bc:	d823      	bhi.n	8002606 <UART_SetConfig+0xea>
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d00c      	beq.n	80025dc <UART_SetConfig+0xc0>
 80025c2:	d820      	bhi.n	8002606 <UART_SetConfig+0xea>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d002      	beq.n	80025ce <UART_SetConfig+0xb2>
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d00e      	beq.n	80025ea <UART_SetConfig+0xce>
 80025cc:	e01b      	b.n	8002606 <UART_SetConfig+0xea>
 80025ce:	231b      	movs	r3, #27
 80025d0:	2218      	movs	r2, #24
 80025d2:	189b      	adds	r3, r3, r2
 80025d4:	19db      	adds	r3, r3, r7
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e09c      	b.n	8002716 <UART_SetConfig+0x1fa>
 80025dc:	231b      	movs	r3, #27
 80025de:	2218      	movs	r2, #24
 80025e0:	189b      	adds	r3, r3, r2
 80025e2:	19db      	adds	r3, r3, r7
 80025e4:	2202      	movs	r2, #2
 80025e6:	701a      	strb	r2, [r3, #0]
 80025e8:	e095      	b.n	8002716 <UART_SetConfig+0x1fa>
 80025ea:	231b      	movs	r3, #27
 80025ec:	2218      	movs	r2, #24
 80025ee:	189b      	adds	r3, r3, r2
 80025f0:	19db      	adds	r3, r3, r7
 80025f2:	2204      	movs	r2, #4
 80025f4:	701a      	strb	r2, [r3, #0]
 80025f6:	e08e      	b.n	8002716 <UART_SetConfig+0x1fa>
 80025f8:	231b      	movs	r3, #27
 80025fa:	2218      	movs	r2, #24
 80025fc:	189b      	adds	r3, r3, r2
 80025fe:	19db      	adds	r3, r3, r7
 8002600:	2208      	movs	r2, #8
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e087      	b.n	8002716 <UART_SetConfig+0x1fa>
 8002606:	231b      	movs	r3, #27
 8002608:	2218      	movs	r2, #24
 800260a:	189b      	adds	r3, r3, r2
 800260c:	19db      	adds	r3, r3, r7
 800260e:	2210      	movs	r2, #16
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	e080      	b.n	8002716 <UART_SetConfig+0x1fa>
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a99      	ldr	r2, [pc, #612]	@ (8002880 <UART_SetConfig+0x364>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d131      	bne.n	8002682 <UART_SetConfig+0x166>
 800261e:	4b97      	ldr	r3, [pc, #604]	@ (800287c <UART_SetConfig+0x360>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	220c      	movs	r2, #12
 8002624:	4013      	ands	r3, r2
 8002626:	2b0c      	cmp	r3, #12
 8002628:	d01d      	beq.n	8002666 <UART_SetConfig+0x14a>
 800262a:	d823      	bhi.n	8002674 <UART_SetConfig+0x158>
 800262c:	2b08      	cmp	r3, #8
 800262e:	d00c      	beq.n	800264a <UART_SetConfig+0x12e>
 8002630:	d820      	bhi.n	8002674 <UART_SetConfig+0x158>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <UART_SetConfig+0x120>
 8002636:	2b04      	cmp	r3, #4
 8002638:	d00e      	beq.n	8002658 <UART_SetConfig+0x13c>
 800263a:	e01b      	b.n	8002674 <UART_SetConfig+0x158>
 800263c:	231b      	movs	r3, #27
 800263e:	2218      	movs	r2, #24
 8002640:	189b      	adds	r3, r3, r2
 8002642:	19db      	adds	r3, r3, r7
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e065      	b.n	8002716 <UART_SetConfig+0x1fa>
 800264a:	231b      	movs	r3, #27
 800264c:	2218      	movs	r2, #24
 800264e:	189b      	adds	r3, r3, r2
 8002650:	19db      	adds	r3, r3, r7
 8002652:	2202      	movs	r2, #2
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e05e      	b.n	8002716 <UART_SetConfig+0x1fa>
 8002658:	231b      	movs	r3, #27
 800265a:	2218      	movs	r2, #24
 800265c:	189b      	adds	r3, r3, r2
 800265e:	19db      	adds	r3, r3, r7
 8002660:	2204      	movs	r2, #4
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e057      	b.n	8002716 <UART_SetConfig+0x1fa>
 8002666:	231b      	movs	r3, #27
 8002668:	2218      	movs	r2, #24
 800266a:	189b      	adds	r3, r3, r2
 800266c:	19db      	adds	r3, r3, r7
 800266e:	2208      	movs	r2, #8
 8002670:	701a      	strb	r2, [r3, #0]
 8002672:	e050      	b.n	8002716 <UART_SetConfig+0x1fa>
 8002674:	231b      	movs	r3, #27
 8002676:	2218      	movs	r2, #24
 8002678:	189b      	adds	r3, r3, r2
 800267a:	19db      	adds	r3, r3, r7
 800267c:	2210      	movs	r2, #16
 800267e:	701a      	strb	r2, [r3, #0]
 8002680:	e049      	b.n	8002716 <UART_SetConfig+0x1fa>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a7a      	ldr	r2, [pc, #488]	@ (8002870 <UART_SetConfig+0x354>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d13e      	bne.n	800270a <UART_SetConfig+0x1ee>
 800268c:	4b7b      	ldr	r3, [pc, #492]	@ (800287c <UART_SetConfig+0x360>)
 800268e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002690:	23c0      	movs	r3, #192	@ 0xc0
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	4013      	ands	r3, r2
 8002696:	22c0      	movs	r2, #192	@ 0xc0
 8002698:	0112      	lsls	r2, r2, #4
 800269a:	4293      	cmp	r3, r2
 800269c:	d027      	beq.n	80026ee <UART_SetConfig+0x1d2>
 800269e:	22c0      	movs	r2, #192	@ 0xc0
 80026a0:	0112      	lsls	r2, r2, #4
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d82a      	bhi.n	80026fc <UART_SetConfig+0x1e0>
 80026a6:	2280      	movs	r2, #128	@ 0x80
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d011      	beq.n	80026d2 <UART_SetConfig+0x1b6>
 80026ae:	2280      	movs	r2, #128	@ 0x80
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d822      	bhi.n	80026fc <UART_SetConfig+0x1e0>
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d004      	beq.n	80026c4 <UART_SetConfig+0x1a8>
 80026ba:	2280      	movs	r2, #128	@ 0x80
 80026bc:	00d2      	lsls	r2, r2, #3
 80026be:	4293      	cmp	r3, r2
 80026c0:	d00e      	beq.n	80026e0 <UART_SetConfig+0x1c4>
 80026c2:	e01b      	b.n	80026fc <UART_SetConfig+0x1e0>
 80026c4:	231b      	movs	r3, #27
 80026c6:	2218      	movs	r2, #24
 80026c8:	189b      	adds	r3, r3, r2
 80026ca:	19db      	adds	r3, r3, r7
 80026cc:	2200      	movs	r2, #0
 80026ce:	701a      	strb	r2, [r3, #0]
 80026d0:	e021      	b.n	8002716 <UART_SetConfig+0x1fa>
 80026d2:	231b      	movs	r3, #27
 80026d4:	2218      	movs	r2, #24
 80026d6:	189b      	adds	r3, r3, r2
 80026d8:	19db      	adds	r3, r3, r7
 80026da:	2202      	movs	r2, #2
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	e01a      	b.n	8002716 <UART_SetConfig+0x1fa>
 80026e0:	231b      	movs	r3, #27
 80026e2:	2218      	movs	r2, #24
 80026e4:	189b      	adds	r3, r3, r2
 80026e6:	19db      	adds	r3, r3, r7
 80026e8:	2204      	movs	r2, #4
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e013      	b.n	8002716 <UART_SetConfig+0x1fa>
 80026ee:	231b      	movs	r3, #27
 80026f0:	2218      	movs	r2, #24
 80026f2:	189b      	adds	r3, r3, r2
 80026f4:	19db      	adds	r3, r3, r7
 80026f6:	2208      	movs	r2, #8
 80026f8:	701a      	strb	r2, [r3, #0]
 80026fa:	e00c      	b.n	8002716 <UART_SetConfig+0x1fa>
 80026fc:	231b      	movs	r3, #27
 80026fe:	2218      	movs	r2, #24
 8002700:	189b      	adds	r3, r3, r2
 8002702:	19db      	adds	r3, r3, r7
 8002704:	2210      	movs	r2, #16
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e005      	b.n	8002716 <UART_SetConfig+0x1fa>
 800270a:	231b      	movs	r3, #27
 800270c:	2218      	movs	r2, #24
 800270e:	189b      	adds	r3, r3, r2
 8002710:	19db      	adds	r3, r3, r7
 8002712:	2210      	movs	r2, #16
 8002714:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a55      	ldr	r2, [pc, #340]	@ (8002870 <UART_SetConfig+0x354>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d000      	beq.n	8002722 <UART_SetConfig+0x206>
 8002720:	e084      	b.n	800282c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002722:	231b      	movs	r3, #27
 8002724:	2218      	movs	r2, #24
 8002726:	189b      	adds	r3, r3, r2
 8002728:	19db      	adds	r3, r3, r7
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d01d      	beq.n	800276c <UART_SetConfig+0x250>
 8002730:	dc20      	bgt.n	8002774 <UART_SetConfig+0x258>
 8002732:	2b04      	cmp	r3, #4
 8002734:	d015      	beq.n	8002762 <UART_SetConfig+0x246>
 8002736:	dc1d      	bgt.n	8002774 <UART_SetConfig+0x258>
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <UART_SetConfig+0x226>
 800273c:	2b02      	cmp	r3, #2
 800273e:	d005      	beq.n	800274c <UART_SetConfig+0x230>
 8002740:	e018      	b.n	8002774 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002742:	f7ff fa31 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002746:	0003      	movs	r3, r0
 8002748:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800274a:	e01c      	b.n	8002786 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800274c:	4b4b      	ldr	r3, [pc, #300]	@ (800287c <UART_SetConfig+0x360>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2210      	movs	r2, #16
 8002752:	4013      	ands	r3, r2
 8002754:	d002      	beq.n	800275c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002756:	4b4b      	ldr	r3, [pc, #300]	@ (8002884 <UART_SetConfig+0x368>)
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800275a:	e014      	b.n	8002786 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800275c:	4b4a      	ldr	r3, [pc, #296]	@ (8002888 <UART_SetConfig+0x36c>)
 800275e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002760:	e011      	b.n	8002786 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002762:	f7ff f991 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 8002766:	0003      	movs	r3, r0
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800276a:	e00c      	b.n	8002786 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800276c:	2380      	movs	r3, #128	@ 0x80
 800276e:	021b      	lsls	r3, r3, #8
 8002770:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002772:	e008      	b.n	8002786 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002778:	231a      	movs	r3, #26
 800277a:	2218      	movs	r2, #24
 800277c:	189b      	adds	r3, r3, r2
 800277e:	19db      	adds	r3, r3, r7
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
        break;
 8002784:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	2b00      	cmp	r3, #0
 800278a:	d100      	bne.n	800278e <UART_SetConfig+0x272>
 800278c:	e132      	b.n	80029f4 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	0013      	movs	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	189b      	adds	r3, r3, r2
 8002798:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800279a:	429a      	cmp	r2, r3
 800279c:	d305      	bcc.n	80027aa <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d906      	bls.n	80027b8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80027aa:	231a      	movs	r3, #26
 80027ac:	2218      	movs	r2, #24
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	19db      	adds	r3, r3, r7
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e11d      	b.n	80029f4 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80027b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	2300      	movs	r3, #0
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	6939      	ldr	r1, [r7, #16]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	000b      	movs	r3, r1
 80027c6:	0e1b      	lsrs	r3, r3, #24
 80027c8:	0010      	movs	r0, r2
 80027ca:	0205      	lsls	r5, r0, #8
 80027cc:	431d      	orrs	r5, r3
 80027ce:	000b      	movs	r3, r1
 80027d0:	021c      	lsls	r4, r3, #8
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	085b      	lsrs	r3, r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68b8      	ldr	r0, [r7, #8]
 80027e0:	68f9      	ldr	r1, [r7, #12]
 80027e2:	1900      	adds	r0, r0, r4
 80027e4:	4169      	adcs	r1, r5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	2300      	movs	r3, #0
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f7fd fd14 	bl	8000220 <__aeabi_uldivmod>
 80027f8:	0002      	movs	r2, r0
 80027fa:	000b      	movs	r3, r1
 80027fc:	0013      	movs	r3, r2
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002802:	23c0      	movs	r3, #192	@ 0xc0
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	429a      	cmp	r2, r3
 8002808:	d309      	bcc.n	800281e <UART_SetConfig+0x302>
 800280a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800280c:	2380      	movs	r3, #128	@ 0x80
 800280e:	035b      	lsls	r3, r3, #13
 8002810:	429a      	cmp	r2, r3
 8002812:	d204      	bcs.n	800281e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	e0ea      	b.n	80029f4 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800281e:	231a      	movs	r3, #26
 8002820:	2218      	movs	r2, #24
 8002822:	189b      	adds	r3, r3, r2
 8002824:	19db      	adds	r3, r3, r7
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e0e3      	b.n	80029f4 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	69da      	ldr	r2, [r3, #28]
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	021b      	lsls	r3, r3, #8
 8002834:	429a      	cmp	r2, r3
 8002836:	d000      	beq.n	800283a <UART_SetConfig+0x31e>
 8002838:	e085      	b.n	8002946 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800283a:	231b      	movs	r3, #27
 800283c:	2218      	movs	r2, #24
 800283e:	189b      	adds	r3, r3, r2
 8002840:	19db      	adds	r3, r3, r7
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d837      	bhi.n	80028b8 <UART_SetConfig+0x39c>
 8002848:	009a      	lsls	r2, r3, #2
 800284a:	4b10      	ldr	r3, [pc, #64]	@ (800288c <UART_SetConfig+0x370>)
 800284c:	18d3      	adds	r3, r2, r3
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002852:	f7ff f9a9 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002856:	0003      	movs	r3, r0
 8002858:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800285a:	e036      	b.n	80028ca <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800285c:	f7ff f9ba 	bl	8001bd4 <HAL_RCC_GetPCLK2Freq>
 8002860:	0003      	movs	r3, r0
 8002862:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002864:	e031      	b.n	80028ca <UART_SetConfig+0x3ae>
 8002866:	46c0      	nop			@ (mov r8, r8)
 8002868:	efff69f3 	.word	0xefff69f3
 800286c:	ffffcfff 	.word	0xffffcfff
 8002870:	40004800 	.word	0x40004800
 8002874:	fffff4ff 	.word	0xfffff4ff
 8002878:	40013800 	.word	0x40013800
 800287c:	40021000 	.word	0x40021000
 8002880:	40004400 	.word	0x40004400
 8002884:	003d0900 	.word	0x003d0900
 8002888:	00f42400 	.word	0x00f42400
 800288c:	08004c54 	.word	0x08004c54
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002890:	4b60      	ldr	r3, [pc, #384]	@ (8002a14 <UART_SetConfig+0x4f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2210      	movs	r2, #16
 8002896:	4013      	ands	r3, r2
 8002898:	d002      	beq.n	80028a0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800289a:	4b5f      	ldr	r3, [pc, #380]	@ (8002a18 <UART_SetConfig+0x4fc>)
 800289c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800289e:	e014      	b.n	80028ca <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80028a0:	4b5e      	ldr	r3, [pc, #376]	@ (8002a1c <UART_SetConfig+0x500>)
 80028a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028a4:	e011      	b.n	80028ca <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028a6:	f7ff f8ef 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 80028aa:	0003      	movs	r3, r0
 80028ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028ae:	e00c      	b.n	80028ca <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028b0:	2380      	movs	r3, #128	@ 0x80
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028b6:	e008      	b.n	80028ca <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80028bc:	231a      	movs	r3, #26
 80028be:	2218      	movs	r2, #24
 80028c0:	189b      	adds	r3, r3, r2
 80028c2:	19db      	adds	r3, r3, r7
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
        break;
 80028c8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d100      	bne.n	80028d2 <UART_SetConfig+0x3b6>
 80028d0:	e090      	b.n	80029f4 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d4:	005a      	lsls	r2, r3, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	18d2      	adds	r2, r2, r3
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	0019      	movs	r1, r3
 80028e4:	0010      	movs	r0, r2
 80028e6:	f7fd fc0f 	bl	8000108 <__udivsi3>
 80028ea:	0003      	movs	r3, r0
 80028ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f0:	2b0f      	cmp	r3, #15
 80028f2:	d921      	bls.n	8002938 <UART_SetConfig+0x41c>
 80028f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	025b      	lsls	r3, r3, #9
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d21c      	bcs.n	8002938 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002900:	b29a      	uxth	r2, r3
 8002902:	200e      	movs	r0, #14
 8002904:	2418      	movs	r4, #24
 8002906:	1903      	adds	r3, r0, r4
 8002908:	19db      	adds	r3, r3, r7
 800290a:	210f      	movs	r1, #15
 800290c:	438a      	bics	r2, r1
 800290e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002912:	085b      	lsrs	r3, r3, #1
 8002914:	b29b      	uxth	r3, r3
 8002916:	2207      	movs	r2, #7
 8002918:	4013      	ands	r3, r2
 800291a:	b299      	uxth	r1, r3
 800291c:	1903      	adds	r3, r0, r4
 800291e:	19db      	adds	r3, r3, r7
 8002920:	1902      	adds	r2, r0, r4
 8002922:	19d2      	adds	r2, r2, r7
 8002924:	8812      	ldrh	r2, [r2, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	1902      	adds	r2, r0, r4
 8002930:	19d2      	adds	r2, r2, r7
 8002932:	8812      	ldrh	r2, [r2, #0]
 8002934:	60da      	str	r2, [r3, #12]
 8002936:	e05d      	b.n	80029f4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002938:	231a      	movs	r3, #26
 800293a:	2218      	movs	r2, #24
 800293c:	189b      	adds	r3, r3, r2
 800293e:	19db      	adds	r3, r3, r7
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	e056      	b.n	80029f4 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002946:	231b      	movs	r3, #27
 8002948:	2218      	movs	r2, #24
 800294a:	189b      	adds	r3, r3, r2
 800294c:	19db      	adds	r3, r3, r7
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d822      	bhi.n	800299a <UART_SetConfig+0x47e>
 8002954:	009a      	lsls	r2, r3, #2
 8002956:	4b32      	ldr	r3, [pc, #200]	@ (8002a20 <UART_SetConfig+0x504>)
 8002958:	18d3      	adds	r3, r2, r3
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800295e:	f7ff f923 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8002962:	0003      	movs	r3, r0
 8002964:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002966:	e021      	b.n	80029ac <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002968:	f7ff f934 	bl	8001bd4 <HAL_RCC_GetPCLK2Freq>
 800296c:	0003      	movs	r3, r0
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002970:	e01c      	b.n	80029ac <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002972:	4b28      	ldr	r3, [pc, #160]	@ (8002a14 <UART_SetConfig+0x4f8>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2210      	movs	r2, #16
 8002978:	4013      	ands	r3, r2
 800297a:	d002      	beq.n	8002982 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800297c:	4b26      	ldr	r3, [pc, #152]	@ (8002a18 <UART_SetConfig+0x4fc>)
 800297e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002980:	e014      	b.n	80029ac <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002982:	4b26      	ldr	r3, [pc, #152]	@ (8002a1c <UART_SetConfig+0x500>)
 8002984:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002986:	e011      	b.n	80029ac <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002988:	f7ff f87e 	bl	8001a88 <HAL_RCC_GetSysClockFreq>
 800298c:	0003      	movs	r3, r0
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002990:	e00c      	b.n	80029ac <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002998:	e008      	b.n	80029ac <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800299e:	231a      	movs	r3, #26
 80029a0:	2218      	movs	r2, #24
 80029a2:	189b      	adds	r3, r3, r2
 80029a4:	19db      	adds	r3, r3, r7
 80029a6:	2201      	movs	r2, #1
 80029a8:	701a      	strb	r2, [r3, #0]
        break;
 80029aa:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80029ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d020      	beq.n	80029f4 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	085a      	lsrs	r2, r3, #1
 80029b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ba:	18d2      	adds	r2, r2, r3
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	0019      	movs	r1, r3
 80029c2:	0010      	movs	r0, r2
 80029c4:	f7fd fba0 	bl	8000108 <__udivsi3>
 80029c8:	0003      	movs	r3, r0
 80029ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ce:	2b0f      	cmp	r3, #15
 80029d0:	d90a      	bls.n	80029e8 <UART_SetConfig+0x4cc>
 80029d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029d4:	2380      	movs	r3, #128	@ 0x80
 80029d6:	025b      	lsls	r3, r3, #9
 80029d8:	429a      	cmp	r2, r3
 80029da:	d205      	bcs.n	80029e8 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80029dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029de:	b29a      	uxth	r2, r3
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	e005      	b.n	80029f4 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 80029e8:	231a      	movs	r3, #26
 80029ea:	2218      	movs	r2, #24
 80029ec:	189b      	adds	r3, r3, r2
 80029ee:	19db      	adds	r3, r3, r7
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	2200      	movs	r2, #0
 80029f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	2200      	movs	r2, #0
 80029fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002a00:	231a      	movs	r3, #26
 8002a02:	2218      	movs	r2, #24
 8002a04:	189b      	adds	r3, r3, r2
 8002a06:	19db      	adds	r3, r3, r7
 8002a08:	781b      	ldrb	r3, [r3, #0]
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b00e      	add	sp, #56	@ 0x38
 8002a10:	bdb0      	pop	{r4, r5, r7, pc}
 8002a12:	46c0      	nop			@ (mov r8, r8)
 8002a14:	40021000 	.word	0x40021000
 8002a18:	003d0900 	.word	0x003d0900
 8002a1c:	00f42400 	.word	0x00f42400
 8002a20:	08004c78 	.word	0x08004c78

08002a24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	2208      	movs	r2, #8
 8002a32:	4013      	ands	r3, r2
 8002a34:	d00b      	beq.n	8002a4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b68 <UART_AdvFeatureConfig+0x144>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	0019      	movs	r1, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	2201      	movs	r2, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	d00b      	beq.n	8002a70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4a43      	ldr	r2, [pc, #268]	@ (8002b6c <UART_AdvFeatureConfig+0x148>)
 8002a60:	4013      	ands	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	2202      	movs	r2, #2
 8002a76:	4013      	ands	r3, r2
 8002a78:	d00b      	beq.n	8002a92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a3b      	ldr	r2, [pc, #236]	@ (8002b70 <UART_AdvFeatureConfig+0x14c>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	2204      	movs	r2, #4
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d00b      	beq.n	8002ab4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	4a34      	ldr	r2, [pc, #208]	@ (8002b74 <UART_AdvFeatureConfig+0x150>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab8:	2210      	movs	r2, #16
 8002aba:	4013      	ands	r3, r2
 8002abc:	d00b      	beq.n	8002ad6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8002b78 <UART_AdvFeatureConfig+0x154>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	0019      	movs	r1, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ada:	2220      	movs	r2, #32
 8002adc:	4013      	ands	r3, r2
 8002ade:	d00b      	beq.n	8002af8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4a25      	ldr	r2, [pc, #148]	@ (8002b7c <UART_AdvFeatureConfig+0x158>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	2240      	movs	r2, #64	@ 0x40
 8002afe:	4013      	ands	r3, r2
 8002b00:	d01d      	beq.n	8002b3e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4a1d      	ldr	r2, [pc, #116]	@ (8002b80 <UART_AdvFeatureConfig+0x15c>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	0019      	movs	r1, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	035b      	lsls	r3, r3, #13
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d10b      	bne.n	8002b3e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	4a15      	ldr	r2, [pc, #84]	@ (8002b84 <UART_AdvFeatureConfig+0x160>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	0019      	movs	r1, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b42:	2280      	movs	r2, #128	@ 0x80
 8002b44:	4013      	ands	r3, r2
 8002b46:	d00b      	beq.n	8002b60 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b88 <UART_AdvFeatureConfig+0x164>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	0019      	movs	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]
  }
}
 8002b60:	46c0      	nop			@ (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	ffff7fff 	.word	0xffff7fff
 8002b6c:	fffdffff 	.word	0xfffdffff
 8002b70:	fffeffff 	.word	0xfffeffff
 8002b74:	fffbffff 	.word	0xfffbffff
 8002b78:	ffffefff 	.word	0xffffefff
 8002b7c:	ffffdfff 	.word	0xffffdfff
 8002b80:	ffefffff 	.word	0xffefffff
 8002b84:	ff9fffff 	.word	0xff9fffff
 8002b88:	fff7ffff 	.word	0xfff7ffff

08002b8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b092      	sub	sp, #72	@ 0x48
 8002b90:	af02      	add	r7, sp, #8
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2284      	movs	r2, #132	@ 0x84
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b9c:	f7fe f81c 	bl	8000bd8 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2208      	movs	r2, #8
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b08      	cmp	r3, #8
 8002bb0:	d12c      	bne.n	8002c0c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb4:	2280      	movs	r2, #128	@ 0x80
 8002bb6:	0391      	lsls	r1, r2, #14
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	4a46      	ldr	r2, [pc, #280]	@ (8002cd4 <UART_CheckIdleState+0x148>)
 8002bbc:	9200      	str	r2, [sp, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f000 f88c 	bl	8002cdc <UART_WaitOnFlagUntilTimeout>
 8002bc4:	1e03      	subs	r3, r0, #0
 8002bc6:	d021      	beq.n	8002c0c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd8:	f383 8810 	msr	PRIMASK, r3
}
 8002bdc:	46c0      	nop			@ (mov r8, r8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2180      	movs	r1, #128	@ 0x80
 8002bea:	438a      	bics	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf4:	f383 8810 	msr	PRIMASK, r3
}
 8002bf8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2278      	movs	r2, #120	@ 0x78
 8002c04:	2100      	movs	r1, #0
 8002c06:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e05f      	b.n	8002ccc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2204      	movs	r2, #4
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d146      	bne.n	8002ca8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c1c:	2280      	movs	r2, #128	@ 0x80
 8002c1e:	03d1      	lsls	r1, r2, #15
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4a2c      	ldr	r2, [pc, #176]	@ (8002cd4 <UART_CheckIdleState+0x148>)
 8002c24:	9200      	str	r2, [sp, #0]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f000 f858 	bl	8002cdc <UART_WaitOnFlagUntilTimeout>
 8002c2c:	1e03      	subs	r3, r0, #0
 8002c2e:	d03b      	beq.n	8002ca8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c30:	f3ef 8310 	mrs	r3, PRIMASK
 8002c34:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c36:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f383 8810 	msr	PRIMASK, r3
}
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4921      	ldr	r1, [pc, #132]	@ (8002cd8 <UART_CheckIdleState+0x14c>)
 8002c52:	400a      	ands	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f383 8810 	msr	PRIMASK, r3
}
 8002c60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c62:	f3ef 8310 	mrs	r3, PRIMASK
 8002c66:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c68:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f383 8810 	msr	PRIMASK, r3
}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2101      	movs	r1, #1
 8002c84:	438a      	bics	r2, r1
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	f383 8810 	msr	PRIMASK, r3
}
 8002c92:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2280      	movs	r2, #128	@ 0x80
 8002c98:	2120      	movs	r1, #32
 8002c9a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2278      	movs	r2, #120	@ 0x78
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e011      	b.n	8002ccc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2220      	movs	r2, #32
 8002cac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2280      	movs	r2, #128	@ 0x80
 8002cb2:	2120      	movs	r1, #32
 8002cb4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2278      	movs	r2, #120	@ 0x78
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b010      	add	sp, #64	@ 0x40
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	01ffffff 	.word	0x01ffffff
 8002cd8:	fffffedf 	.word	0xfffffedf

08002cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	1dfb      	adds	r3, r7, #7
 8002cea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cec:	e051      	b.n	8002d92 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	d04e      	beq.n	8002d92 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf4:	f7fd ff70 	bl	8000bd8 <HAL_GetTick>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e051      	b.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2204      	movs	r2, #4
 8002d16:	4013      	ands	r3, r2
 8002d18:	d03b      	beq.n	8002d92 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b80      	cmp	r3, #128	@ 0x80
 8002d1e:	d038      	beq.n	8002d92 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b40      	cmp	r3, #64	@ 0x40
 8002d24:	d035      	beq.n	8002d92 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69db      	ldr	r3, [r3, #28]
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d111      	bne.n	8002d58 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2208      	movs	r2, #8
 8002d3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 f83c 	bl	8002dbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2284      	movs	r2, #132	@ 0x84
 8002d48:	2108      	movs	r1, #8
 8002d4a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2278      	movs	r2, #120	@ 0x78
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e02c      	b.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	2380      	movs	r3, #128	@ 0x80
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	401a      	ands	r2, r3
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d112      	bne.n	8002d92 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2280      	movs	r2, #128	@ 0x80
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 f81f 	bl	8002dbc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2284      	movs	r2, #132	@ 0x84
 8002d82:	2120      	movs	r1, #32
 8002d84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2278      	movs	r2, #120	@ 0x78
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e00f      	b.n	8002db2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	425a      	negs	r2, r3
 8002da2:	4153      	adcs	r3, r2
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	001a      	movs	r2, r3
 8002da8:	1dfb      	adds	r3, r7, #7
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d09e      	beq.n	8002cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08e      	sub	sp, #56	@ 0x38
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc8:	617b      	str	r3, [r7, #20]
  return(result);
 8002dca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dce:	2301      	movs	r3, #1
 8002dd0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f383 8810 	msr	PRIMASK, r3
}
 8002dd8:	46c0      	nop			@ (mov r8, r8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4926      	ldr	r1, [pc, #152]	@ (8002e80 <UART_EndRxTransfer+0xc4>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f383 8810 	msr	PRIMASK, r3
}
 8002df4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dfa:	623b      	str	r3, [r7, #32]
  return(result);
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e00:	2301      	movs	r3, #1
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	f383 8810 	msr	PRIMASK, r3
}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689a      	ldr	r2, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2101      	movs	r1, #1
 8002e18:	438a      	bics	r2, r1
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e22:	f383 8810 	msr	PRIMASK, r3
}
 8002e26:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d118      	bne.n	8002e62 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e30:	f3ef 8310 	mrs	r3, PRIMASK
 8002e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e36:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f383 8810 	msr	PRIMASK, r3
}
 8002e44:	46c0      	nop			@ (mov r8, r8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2110      	movs	r1, #16
 8002e52:	438a      	bics	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f383 8810 	msr	PRIMASK, r3
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2280      	movs	r2, #128	@ 0x80
 8002e66:	2120      	movs	r1, #32
 8002e68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b00e      	add	sp, #56	@ 0x38
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			@ (mov r8, r8)
 8002e80:	fffffedf 	.word	0xfffffedf

08002e84 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	1dbb      	adds	r3, r7, #6
 8002e8e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002e94:	1dbb      	adds	r3, r7, #6
 8002e96:	2200      	movs	r2, #0
 8002e98:	5e9b      	ldrsh	r3, [r3, r2]
 8002e9a:	2b84      	cmp	r3, #132	@ 0x84
 8002e9c:	d006      	beq.n	8002eac <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002e9e:	1dbb      	adds	r3, r7, #6
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	5e9a      	ldrsh	r2, [r3, r2]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	18d3      	adds	r3, r2, r3
 8002ea8:	3303      	adds	r3, #3
 8002eaa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002eac:	68fb      	ldr	r3, [r7, #12]
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b004      	add	sp, #16
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002eba:	f000 fda1 	bl	8003a00 <vTaskStartScheduler>
  
  return osOK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec8:	b089      	sub	sp, #36	@ 0x24
 8002eca:	af04      	add	r7, sp, #16
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <osThreadCreate+0x54>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01c      	beq.n	8002f1a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685c      	ldr	r4, [r3, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691e      	ldr	r6, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2208      	movs	r2, #8
 8002ef0:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7ff ffc6 	bl	8002e84 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f00:	6839      	ldr	r1, [r7, #0]
 8002f02:	9302      	str	r3, [sp, #8]
 8002f04:	9201      	str	r2, [sp, #4]
 8002f06:	9000      	str	r0, [sp, #0]
 8002f08:	000b      	movs	r3, r1
 8002f0a:	0032      	movs	r2, r6
 8002f0c:	0029      	movs	r1, r5
 8002f0e:	0020      	movs	r0, r4
 8002f10:	f000 fbbe 	bl	8003690 <xTaskCreateStatic>
 8002f14:	0003      	movs	r3, r0
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e01d      	b.n	8002f56 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685c      	ldr	r4, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f26:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f7ff ffa8 	bl	8002e84 <makeFreeRtosPriority>
 8002f34:	0001      	movs	r1, r0
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	230c      	movs	r3, #12
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	9100      	str	r1, [sp, #0]
 8002f40:	0013      	movs	r3, r2
 8002f42:	0032      	movs	r2, r6
 8002f44:	0029      	movs	r1, r5
 8002f46:	0020      	movs	r0, r4
 8002f48:	f000 fbe9 	bl	800371e <xTaskCreate>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d001      	beq.n	8002f56 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b005      	add	sp, #20
 8002f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f60 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <osDelay+0x16>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	e000      	b.n	8002f78 <osDelay+0x18>
 8002f76:	2301      	movs	r3, #1
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f000 fd1b 	bl	80039b4 <vTaskDelay>
  
  return osOK;
 8002f7e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b004      	add	sp, #16
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8002f94:	f000 fd8c 	bl	8003ab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002f98:	4b4a      	ldr	r3, [pc, #296]	@ (80030c4 <pvPortMalloc+0x13c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002fa0:	f000 f8e4 	bl	800316c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fa4:	4b48      	ldr	r3, [pc, #288]	@ (80030c8 <pvPortMalloc+0x140>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4013      	ands	r3, r2
 8002fac:	d000      	beq.n	8002fb0 <pvPortMalloc+0x28>
 8002fae:	e07b      	b.n	80030a8 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d013      	beq.n	8002fde <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	189b      	adds	r3, r3, r2
 8002fbc:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2207      	movs	r2, #7
 8002fca:	4393      	bics	r3, r2
 8002fcc:	3308      	adds	r3, #8
 8002fce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2207      	movs	r2, #7
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d002      	beq.n	8002fde <pvPortMalloc+0x56>
 8002fd8:	b672      	cpsid	i
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	e7fd      	b.n	8002fda <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d061      	beq.n	80030a8 <pvPortMalloc+0x120>
 8002fe4:	4b39      	ldr	r3, [pc, #228]	@ (80030cc <pvPortMalloc+0x144>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d85c      	bhi.n	80030a8 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002fee:	4b38      	ldr	r3, [pc, #224]	@ (80030d0 <pvPortMalloc+0x148>)
 8002ff0:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8002ff2:	4b37      	ldr	r3, [pc, #220]	@ (80030d0 <pvPortMalloc+0x148>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ff8:	e004      	b.n	8003004 <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	429a      	cmp	r2, r3
 800300c:	d903      	bls.n	8003016 <pvPortMalloc+0x8e>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f1      	bne.n	8002ffa <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003016:	4b2b      	ldr	r3, [pc, #172]	@ (80030c4 <pvPortMalloc+0x13c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	429a      	cmp	r2, r3
 800301e:	d043      	beq.n	80030a8 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2208      	movs	r2, #8
 8003026:	189b      	adds	r3, r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	1ad2      	subs	r2, r2, r3
 800303a:	2308      	movs	r3, #8
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	429a      	cmp	r2, r3
 8003040:	d917      	bls.n	8003072 <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	18d3      	adds	r3, r2, r3
 8003048:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2207      	movs	r2, #7
 800304e:	4013      	ands	r3, r2
 8003050:	d002      	beq.n	8003058 <pvPortMalloc+0xd0>
 8003052:	b672      	cpsid	i
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	e7fd      	b.n	8003054 <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	1ad2      	subs	r2, r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	0018      	movs	r0, r3
 800306e:	f000 f8dd 	bl	800322c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003072:	4b16      	ldr	r3, [pc, #88]	@ (80030cc <pvPortMalloc+0x144>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	1ad2      	subs	r2, r2, r3
 800307c:	4b13      	ldr	r3, [pc, #76]	@ (80030cc <pvPortMalloc+0x144>)
 800307e:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003080:	4b12      	ldr	r3, [pc, #72]	@ (80030cc <pvPortMalloc+0x144>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b13      	ldr	r3, [pc, #76]	@ (80030d4 <pvPortMalloc+0x14c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d203      	bcs.n	8003094 <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800308c:	4b0f      	ldr	r3, [pc, #60]	@ (80030cc <pvPortMalloc+0x144>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <pvPortMalloc+0x14c>)
 8003092:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <pvPortMalloc+0x140>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	431a      	orrs	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80030a8:	f000 fd0e 	bl	8003ac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2207      	movs	r2, #7
 80030b0:	4013      	ands	r3, r2
 80030b2:	d002      	beq.n	80030ba <pvPortMalloc+0x132>
 80030b4:	b672      	cpsid	i
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	e7fd      	b.n	80030b6 <pvPortMalloc+0x12e>
	return pvReturn;
 80030ba:	68fb      	ldr	r3, [r7, #12]
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b006      	add	sp, #24
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20001008 	.word	0x20001008
 80030c8:	20001014 	.word	0x20001014
 80030cc:	2000100c 	.word	0x2000100c
 80030d0:	20001000 	.word	0x20001000
 80030d4:	20001010 	.word	0x20001010

080030d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d037      	beq.n	800315a <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80030ea:	2308      	movs	r3, #8
 80030ec:	425b      	negs	r3, r3
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	18d3      	adds	r3, r2, r3
 80030f2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <vPortFree+0x8c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4013      	ands	r3, r2
 8003102:	d102      	bne.n	800310a <vPortFree+0x32>
 8003104:	b672      	cpsid	i
 8003106:	46c0      	nop			@ (mov r8, r8)
 8003108:	e7fd      	b.n	8003106 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <vPortFree+0x40>
 8003112:	b672      	cpsid	i
 8003114:	46c0      	nop			@ (mov r8, r8)
 8003116:	e7fd      	b.n	8003114 <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <vPortFree+0x8c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4013      	ands	r3, r2
 8003122:	d01a      	beq.n	800315a <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d116      	bne.n	800315a <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4b0c      	ldr	r3, [pc, #48]	@ (8003164 <vPortFree+0x8c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	43db      	mvns	r3, r3
 8003136:	401a      	ands	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800313c:	f000 fcb8 	bl	8003ab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <vPortFree+0x90>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	18d2      	adds	r2, r2, r3
 800314a:	4b07      	ldr	r3, [pc, #28]	@ (8003168 <vPortFree+0x90>)
 800314c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	0018      	movs	r0, r3
 8003152:	f000 f86b 	bl	800322c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003156:	f000 fcb7 	bl	8003ac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	46bd      	mov	sp, r7
 800315e:	b004      	add	sp, #16
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	20001014 	.word	0x20001014
 8003168:	2000100c 	.word	0x2000100c

0800316c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003172:	23c0      	movs	r3, #192	@ 0xc0
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003178:	4b26      	ldr	r3, [pc, #152]	@ (8003214 <prvHeapInit+0xa8>)
 800317a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2207      	movs	r2, #7
 8003180:	4013      	ands	r3, r2
 8003182:	d00c      	beq.n	800319e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3307      	adds	r3, #7
 8003188:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2207      	movs	r2, #7
 800318e:	4393      	bics	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad2      	subs	r2, r2, r3
 8003198:	4b1e      	ldr	r3, [pc, #120]	@ (8003214 <prvHeapInit+0xa8>)
 800319a:	18d3      	adds	r3, r2, r3
 800319c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003218 <prvHeapInit+0xac>)
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <prvHeapInit+0xac>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	18d3      	adds	r3, r2, r3
 80031b4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80031b6:	2208      	movs	r2, #8
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2207      	movs	r2, #7
 80031c2:	4393      	bics	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4b14      	ldr	r3, [pc, #80]	@ (800321c <prvHeapInit+0xb0>)
 80031ca:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <prvHeapInit+0xb0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <prvHeapInit+0xb0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	1ad2      	subs	r2, r2, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031ea:	4b0c      	ldr	r3, [pc, #48]	@ (800321c <prvHeapInit+0xb0>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <prvHeapInit+0xb4>)
 80031f8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <prvHeapInit+0xb8>)
 8003200:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003202:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <prvHeapInit+0xbc>)
 8003204:	2280      	movs	r2, #128	@ 0x80
 8003206:	0612      	lsls	r2, r2, #24
 8003208:	601a      	str	r2, [r3, #0]
}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b004      	add	sp, #16
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			@ (mov r8, r8)
 8003214:	20000400 	.word	0x20000400
 8003218:	20001000 	.word	0x20001000
 800321c:	20001008 	.word	0x20001008
 8003220:	20001010 	.word	0x20001010
 8003224:	2000100c 	.word	0x2000100c
 8003228:	20001014 	.word	0x20001014

0800322c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003234:	4b27      	ldr	r3, [pc, #156]	@ (80032d4 <prvInsertBlockIntoFreeList+0xa8>)
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	e002      	b.n	8003240 <prvInsertBlockIntoFreeList+0x14>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	d8f7      	bhi.n	800323a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	18d3      	adds	r3, r2, r3
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	429a      	cmp	r2, r3
 800325a:	d108      	bne.n	800326e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	18d2      	adds	r2, r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	18d2      	adds	r2, r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d118      	bne.n	80032b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4b14      	ldr	r3, [pc, #80]	@ (80032d8 <prvInsertBlockIntoFreeList+0xac>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d00d      	beq.n	80032aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	18d2      	adds	r2, r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e008      	b.n	80032bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032aa:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <prvInsertBlockIntoFreeList+0xac>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e003      	b.n	80032bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d002      	beq.n	80032ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b004      	add	sp, #16
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	20001000 	.word	0x20001000
 80032d8:	20001008 	.word	0x20001008

080032dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3308      	adds	r3, #8
 80032e8:	001a      	movs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	4252      	negs	r2, r2
 80032f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3308      	adds	r3, #8
 80032fa:	001a      	movs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3308      	adds	r3, #8
 8003304:	001a      	movs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003310:	46c0      	nop			@ (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b002      	add	sp, #8
 8003316:	bd80      	pop	{r7, pc}

08003318 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003326:	46c0      	nop			@ (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b002      	add	sp, #8
 800332c:	bd80      	pop	{r7, pc}

0800332e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	46c0      	nop			@ (mov r8, r8)
 800336c:	46bd      	mov	sp, r7
 800336e:	b004      	add	sp, #16
 8003370:	bd80      	pop	{r7, pc}

08003372 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b084      	sub	sp, #16
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	3301      	adds	r3, #1
 8003386:	d103      	bne.n	8003390 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e00c      	b.n	80033aa <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3308      	adds	r3, #8
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e002      	b.n	800339e <vListInsert+0x2c>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d2f6      	bcs.n	8003398 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	b004      	add	sp, #16
 80033dc:	bd80      	pop	{r7, pc}

080033de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	6892      	ldr	r2, [r2, #8]
 80033f4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6852      	ldr	r2, [r2, #4]
 80033fe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d103      	bne.n	8003412 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	1e5a      	subs	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
}
 8003426:	0018      	movs	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	b004      	add	sp, #16
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	3b04      	subs	r3, #4
 8003440:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2280      	movs	r2, #128	@ 0x80
 8003446:	0452      	lsls	r2, r2, #17
 8003448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	3b04      	subs	r3, #4
 800344e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3b04      	subs	r3, #4
 800345a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800345c:	4a08      	ldr	r2, [pc, #32]	@ (8003480 <pxPortInitialiseStack+0x50>)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3b14      	subs	r3, #20
 8003466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3b20      	subs	r3, #32
 8003472:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003474:	68fb      	ldr	r3, [r7, #12]
}
 8003476:	0018      	movs	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	b004      	add	sp, #16
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	08003485 	.word	0x08003485

08003484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800348e:	4b08      	ldr	r3, [pc, #32]	@ (80034b0 <prvTaskExitError+0x2c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	3301      	adds	r3, #1
 8003494:	d002      	beq.n	800349c <prvTaskExitError+0x18>
 8003496:	b672      	cpsid	i
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	e7fd      	b.n	8003498 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800349c:	b672      	cpsid	i
	while( ulDummy == 0 )
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0fc      	beq.n	80034a0 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034a6:	46c0      	nop			@ (mov r8, r8)
 80034a8:	46c0      	nop			@ (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	2000000c 	.word	0x2000000c

080034b4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80034b8:	46c0      	nop			@ (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80034c0:	4a0b      	ldr	r2, [pc, #44]	@ (80034f0 <pxCurrentTCBConst2>)
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	3020      	adds	r0, #32
 80034c8:	f380 8809 	msr	PSP, r0
 80034cc:	2002      	movs	r0, #2
 80034ce:	f380 8814 	msr	CONTROL, r0
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80034d8:	46ae      	mov	lr, r5
 80034da:	bc08      	pop	{r3}
 80034dc:	bc04      	pop	{r2}
 80034de:	b662      	cpsie	i
 80034e0:	4718      	bx	r3
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	46c0      	nop			@ (mov r8, r8)
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	46c0      	nop			@ (mov r8, r8)
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	46c0      	nop			@ (mov r8, r8)

080034f0 <pxCurrentTCBConst2>:
 80034f0:	20001018 	.word	0x20001018
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80034f4:	46c0      	nop			@ (mov r8, r8)
 80034f6:	46c0      	nop			@ (mov r8, r8)

080034f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80034fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003538 <xPortStartScheduler+0x40>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b0d      	ldr	r3, [pc, #52]	@ (8003538 <xPortStartScheduler+0x40>)
 8003502:	21ff      	movs	r1, #255	@ 0xff
 8003504:	0409      	lsls	r1, r1, #16
 8003506:	430a      	orrs	r2, r1
 8003508:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800350a:	4b0b      	ldr	r3, [pc, #44]	@ (8003538 <xPortStartScheduler+0x40>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <xPortStartScheduler+0x40>)
 8003510:	21ff      	movs	r1, #255	@ 0xff
 8003512:	0609      	lsls	r1, r1, #24
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003518:	f000 f898 	bl	800364c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800351c:	4b07      	ldr	r3, [pc, #28]	@ (800353c <xPortStartScheduler+0x44>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003522:	f7ff ffcd 	bl	80034c0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003526:	f000 fc0b 	bl	8003d40 <vTaskSwitchContext>
	prvTaskExitError();
 800352a:	f7ff ffab 	bl	8003484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800352e:	2300      	movs	r3, #0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	e000ed20 	.word	0xe000ed20
 800353c:	2000000c 	.word	0x2000000c

08003540 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003544:	4b05      	ldr	r3, [pc, #20]	@ (800355c <vPortYield+0x1c>)
 8003546:	2280      	movs	r2, #128	@ 0x80
 8003548:	0552      	lsls	r2, r2, #21
 800354a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800354c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003550:	f3bf 8f6f 	isb	sy
}
 8003554:	46c0      	nop			@ (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	e000ed04 	.word	0xe000ed04

08003560 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003564:	b672      	cpsid	i
    uxCriticalNesting++;
 8003566:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <vPortEnterCritical+0x20>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	4b04      	ldr	r3, [pc, #16]	@ (8003580 <vPortEnterCritical+0x20>)
 800356e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003570:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003574:	f3bf 8f6f 	isb	sy
}
 8003578:	46c0      	nop			@ (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	2000000c 	.word	0x2000000c

08003584 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003588:	4b09      	ldr	r3, [pc, #36]	@ (80035b0 <vPortExitCritical+0x2c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <vPortExitCritical+0x12>
 8003590:	b672      	cpsid	i
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	e7fd      	b.n	8003592 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003596:	4b06      	ldr	r3, [pc, #24]	@ (80035b0 <vPortExitCritical+0x2c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	1e5a      	subs	r2, r3, #1
 800359c:	4b04      	ldr	r3, [pc, #16]	@ (80035b0 <vPortExitCritical+0x2c>)
 800359e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80035a0:	4b03      	ldr	r3, [pc, #12]	@ (80035b0 <vPortExitCritical+0x2c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d100      	bne.n	80035aa <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 80035a8:	b662      	cpsie	i
    }
}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	2000000c 	.word	0x2000000c

080035b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80035b4:	f3ef 8010 	mrs	r0, PRIMASK
 80035b8:	b672      	cpsid	i
 80035ba:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80035bc:	46c0      	nop			@ (mov r8, r8)
 80035be:	0018      	movs	r0, r3

080035c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80035c0:	f380 8810 	msr	PRIMASK, r0
 80035c4:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 80035c6:	46c0      	nop			@ (mov r8, r8)
	...

080035d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80035d0:	f3ef 8009 	mrs	r0, PSP
 80035d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003610 <pxCurrentTCBConst>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	3820      	subs	r0, #32
 80035da:	6010      	str	r0, [r2, #0]
 80035dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80035de:	4644      	mov	r4, r8
 80035e0:	464d      	mov	r5, r9
 80035e2:	4656      	mov	r6, sl
 80035e4:	465f      	mov	r7, fp
 80035e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80035e8:	b508      	push	{r3, lr}
 80035ea:	b672      	cpsid	i
 80035ec:	f000 fba8 	bl	8003d40 <vTaskSwitchContext>
 80035f0:	b662      	cpsie	i
 80035f2:	bc0c      	pop	{r2, r3}
 80035f4:	6811      	ldr	r1, [r2, #0]
 80035f6:	6808      	ldr	r0, [r1, #0]
 80035f8:	3010      	adds	r0, #16
 80035fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80035fc:	46a0      	mov	r8, r4
 80035fe:	46a9      	mov	r9, r5
 8003600:	46b2      	mov	sl, r6
 8003602:	46bb      	mov	fp, r7
 8003604:	f380 8809 	msr	PSP, r0
 8003608:	3820      	subs	r0, #32
 800360a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800360c:	4718      	bx	r3
 800360e:	46c0      	nop			@ (mov r8, r8)

08003610 <pxCurrentTCBConst>:
 8003610:	20001018 	.word	0x20001018
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003614:	46c0      	nop			@ (mov r8, r8)
 8003616:	46c0      	nop			@ (mov r8, r8)

08003618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800361e:	f7ff ffc9 	bl	80035b4 <ulSetInterruptMaskFromISR>
 8003622:	0003      	movs	r3, r0
 8003624:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003626:	f000 fadb 	bl	8003be0 <xTaskIncrementTick>
 800362a:	1e03      	subs	r3, r0, #0
 800362c:	d003      	beq.n	8003636 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800362e:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <SysTick_Handler+0x30>)
 8003630:	2280      	movs	r2, #128	@ 0x80
 8003632:	0552      	lsls	r2, r2, #21
 8003634:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff ffc1 	bl	80035c0 <vClearInterruptMaskFromISR>
}
 800363e:	46c0      	nop			@ (mov r8, r8)
 8003640:	46bd      	mov	sp, r7
 8003642:	b002      	add	sp, #8
 8003644:	bd80      	pop	{r7, pc}
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	e000ed04 	.word	0xe000ed04

0800364c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <prvSetupTimerInterrupt+0x34>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003656:	4b0b      	ldr	r3, [pc, #44]	@ (8003684 <prvSetupTimerInterrupt+0x38>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800365c:	4b0a      	ldr	r3, [pc, #40]	@ (8003688 <prvSetupTimerInterrupt+0x3c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	22fa      	movs	r2, #250	@ 0xfa
 8003662:	0091      	lsls	r1, r2, #2
 8003664:	0018      	movs	r0, r3
 8003666:	f7fc fd4f 	bl	8000108 <__udivsi3>
 800366a:	0003      	movs	r3, r0
 800366c:	001a      	movs	r2, r3
 800366e:	4b07      	ldr	r3, [pc, #28]	@ (800368c <prvSetupTimerInterrupt+0x40>)
 8003670:	3a01      	subs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003674:	4b02      	ldr	r3, [pc, #8]	@ (8003680 <prvSetupTimerInterrupt+0x34>)
 8003676:	2207      	movs	r2, #7
 8003678:	601a      	str	r2, [r3, #0]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	e000e010 	.word	0xe000e010
 8003684:	e000e018 	.word	0xe000e018
 8003688:	20000000 	.word	0x20000000
 800368c:	e000e014 	.word	0xe000e014

08003690 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003690:	b590      	push	{r4, r7, lr}
 8003692:	b08d      	sub	sp, #52	@ 0x34
 8003694:	af04      	add	r7, sp, #16
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800369e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d102      	bne.n	80036aa <xTaskCreateStatic+0x1a>
 80036a4:	b672      	cpsid	i
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	e7fd      	b.n	80036a6 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <xTaskCreateStatic+0x26>
 80036b0:	b672      	cpsid	i
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	e7fd      	b.n	80036b2 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036b6:	23a0      	movs	r3, #160	@ 0xa0
 80036b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80036be:	d002      	beq.n	80036c6 <xTaskCreateStatic+0x36>
 80036c0:	b672      	cpsid	i
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	e7fd      	b.n	80036c2 <xTaskCreateStatic+0x32>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036c6:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d020      	beq.n	8003710 <xTaskCreateStatic+0x80>
 80036ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01d      	beq.n	8003710 <xTaskCreateStatic+0x80>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	229d      	movs	r2, #157	@ 0x9d
 80036e2:	2102      	movs	r1, #2
 80036e4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036e6:	683c      	ldr	r4, [r7, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	2300      	movs	r3, #0
 80036f0:	9303      	str	r3, [sp, #12]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	9302      	str	r3, [sp, #8]
 80036f6:	2318      	movs	r3, #24
 80036f8:	18fb      	adds	r3, r7, r3
 80036fa:	9301      	str	r3, [sp, #4]
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	0023      	movs	r3, r4
 8003702:	f000 f859 	bl	80037b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	0018      	movs	r0, r3
 800370a:	f000 f8ef 	bl	80038ec <prvAddNewTaskToReadyList>
 800370e:	e001      	b.n	8003714 <xTaskCreateStatic+0x84>
		}
		else
		{
			xReturn = NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003714:	69bb      	ldr	r3, [r7, #24]
	}
 8003716:	0018      	movs	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	b009      	add	sp, #36	@ 0x24
 800371c:	bd90      	pop	{r4, r7, pc}

0800371e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800371e:	b590      	push	{r4, r7, lr}
 8003720:	b08d      	sub	sp, #52	@ 0x34
 8003722:	af04      	add	r7, sp, #16
 8003724:	60f8      	str	r0, [r7, #12]
 8003726:	60b9      	str	r1, [r7, #8]
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	1dbb      	adds	r3, r7, #6
 800372c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800372e:	1dbb      	adds	r3, r7, #6
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	0018      	movs	r0, r3
 8003736:	f7ff fc27 	bl	8002f88 <pvPortMalloc>
 800373a:	0003      	movs	r3, r0
 800373c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d010      	beq.n	8003766 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003744:	20a0      	movs	r0, #160	@ 0xa0
 8003746:	f7ff fc1f 	bl	8002f88 <pvPortMalloc>
 800374a:	0003      	movs	r3, r0
 800374c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	631a      	str	r2, [r3, #48]	@ 0x30
 800375a:	e006      	b.n	800376a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	0018      	movs	r0, r3
 8003760:	f7ff fcba 	bl	80030d8 <vPortFree>
 8003764:	e001      	b.n	800376a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01a      	beq.n	80037a6 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	229d      	movs	r2, #157	@ 0x9d
 8003774:	2100      	movs	r1, #0
 8003776:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003778:	1dbb      	adds	r3, r7, #6
 800377a:	881a      	ldrh	r2, [r3, #0]
 800377c:	683c      	ldr	r4, [r7, #0]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	2300      	movs	r3, #0
 8003784:	9303      	str	r3, [sp, #12]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	9302      	str	r3, [sp, #8]
 800378a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	0023      	movs	r3, r4
 8003794:	f000 f810 	bl	80037b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	0018      	movs	r0, r3
 800379c:	f000 f8a6 	bl	80038ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037a0:	2301      	movs	r3, #1
 80037a2:	61bb      	str	r3, [r7, #24]
 80037a4:	e002      	b.n	80037ac <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037a6:	2301      	movs	r3, #1
 80037a8:	425b      	negs	r3, r3
 80037aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037ac:	69bb      	ldr	r3, [r7, #24]
	}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b009      	add	sp, #36	@ 0x24
 80037b4:	bd90      	pop	{r4, r7, pc}
	...

080037b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4943      	ldr	r1, [pc, #268]	@ (80038dc <prvInitialiseNewTask+0x124>)
 80037ce:	468c      	mov	ip, r1
 80037d0:	4463      	add	r3, ip
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	18d3      	adds	r3, r2, r3
 80037d6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2207      	movs	r2, #7
 80037dc:	4393      	bics	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	2207      	movs	r2, #7
 80037e4:	4013      	ands	r3, r2
 80037e6:	d002      	beq.n	80037ee <prvInitialiseNewTask+0x36>
 80037e8:	b672      	cpsid	i
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	e7fd      	b.n	80037ea <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <prvInitialiseNewTask+0x7e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e013      	b.n	8003822 <prvInitialiseNewTask+0x6a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	18d3      	adds	r3, r2, r3
 8003800:	7818      	ldrb	r0, [r3, #0]
 8003802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003804:	2134      	movs	r1, #52	@ 0x34
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	18d3      	adds	r3, r2, r3
 800380a:	185b      	adds	r3, r3, r1
 800380c:	1c02      	adds	r2, r0, #0
 800380e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	18d3      	adds	r3, r2, r3
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d006      	beq.n	800382a <prvInitialiseNewTask+0x72>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	3301      	adds	r3, #1
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b0f      	cmp	r3, #15
 8003826:	d9e8      	bls.n	80037fa <prvInitialiseNewTask+0x42>
 8003828:	e000      	b.n	800382c <prvInitialiseNewTask+0x74>
			{
				break;
 800382a:	46c0      	nop			@ (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382e:	2243      	movs	r2, #67	@ 0x43
 8003830:	2100      	movs	r1, #0
 8003832:	5499      	strb	r1, [r3, r2]
 8003834:	e003      	b.n	800383e <prvInitialiseNewTask+0x86>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003838:	2234      	movs	r2, #52	@ 0x34
 800383a:	2100      	movs	r1, #0
 800383c:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	2b06      	cmp	r3, #6
 8003842:	d901      	bls.n	8003848 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003844:	2306      	movs	r3, #6
 8003846:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800384a:	6a3a      	ldr	r2, [r7, #32]
 800384c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800384e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003850:	6a3a      	ldr	r2, [r7, #32]
 8003852:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003856:	2200      	movs	r2, #0
 8003858:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385c:	3304      	adds	r3, #4
 800385e:	0018      	movs	r0, r3
 8003860:	f7ff fd5a 	bl	8003318 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003866:	3318      	adds	r3, #24
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff fd55 	bl	8003318 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003872:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	2207      	movs	r2, #7
 8003878:	1ad2      	subs	r2, r2, r3
 800387a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800387e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003882:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003886:	2298      	movs	r2, #152	@ 0x98
 8003888:	2100      	movs	r1, #0
 800388a:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388e:	229c      	movs	r2, #156	@ 0x9c
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003896:	334c      	adds	r3, #76	@ 0x4c
 8003898:	224c      	movs	r2, #76	@ 0x4c
 800389a:	2100      	movs	r1, #0
 800389c:	0018      	movs	r0, r3
 800389e:	f000 fddb 	bl	8004458 <memset>
 80038a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a4:	4a0e      	ldr	r2, [pc, #56]	@ (80038e0 <prvInitialiseNewTask+0x128>)
 80038a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80038a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038aa:	4a0e      	ldr	r2, [pc, #56]	@ (80038e4 <prvInitialiseNewTask+0x12c>)
 80038ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80038ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038b0:	4a0d      	ldr	r2, [pc, #52]	@ (80038e8 <prvInitialiseNewTask+0x130>)
 80038b2:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7ff fdb8 	bl	8003430 <pxPortInitialiseStack>
 80038c0:	0002      	movs	r2, r0
 80038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80038d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	46bd      	mov	sp, r7
 80038d6:	b006      	add	sp, #24
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	46c0      	nop			@ (mov r8, r8)
 80038dc:	3fffffff 	.word	0x3fffffff
 80038e0:	20001144 	.word	0x20001144
 80038e4:	200011ac 	.word	0x200011ac
 80038e8:	20001214 	.word	0x20001214

080038ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038f4:	f7ff fe34 	bl	8003560 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038f8:	4b28      	ldr	r3, [pc, #160]	@ (800399c <prvAddNewTaskToReadyList+0xb0>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <prvAddNewTaskToReadyList+0xb0>)
 8003900:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003902:	4b27      	ldr	r3, [pc, #156]	@ (80039a0 <prvAddNewTaskToReadyList+0xb4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d109      	bne.n	800391e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800390a:	4b25      	ldr	r3, [pc, #148]	@ (80039a0 <prvAddNewTaskToReadyList+0xb4>)
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003910:	4b22      	ldr	r3, [pc, #136]	@ (800399c <prvAddNewTaskToReadyList+0xb0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d110      	bne.n	800393a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003918:	f000 fa7c 	bl	8003e14 <prvInitialiseTaskLists>
 800391c:	e00d      	b.n	800393a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800391e:	4b21      	ldr	r3, [pc, #132]	@ (80039a4 <prvAddNewTaskToReadyList+0xb8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d109      	bne.n	800393a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003926:	4b1e      	ldr	r3, [pc, #120]	@ (80039a0 <prvAddNewTaskToReadyList+0xb4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003930:	429a      	cmp	r2, r3
 8003932:	d802      	bhi.n	800393a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003934:	4b1a      	ldr	r3, [pc, #104]	@ (80039a0 <prvAddNewTaskToReadyList+0xb4>)
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800393a:	4b1b      	ldr	r3, [pc, #108]	@ (80039a8 <prvAddNewTaskToReadyList+0xbc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	4b19      	ldr	r3, [pc, #100]	@ (80039a8 <prvAddNewTaskToReadyList+0xbc>)
 8003942:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003948:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <prvAddNewTaskToReadyList+0xc0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d903      	bls.n	8003958 <prvAddNewTaskToReadyList+0x6c>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003954:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <prvAddNewTaskToReadyList+0xc0>)
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395c:	0013      	movs	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	189b      	adds	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4a12      	ldr	r2, [pc, #72]	@ (80039b0 <prvAddNewTaskToReadyList+0xc4>)
 8003966:	189a      	adds	r2, r3, r2
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	0019      	movs	r1, r3
 800396e:	0010      	movs	r0, r2
 8003970:	f7ff fcdd 	bl	800332e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003974:	f7ff fe06 	bl	8003584 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003978:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <prvAddNewTaskToReadyList+0xb8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003980:	4b07      	ldr	r3, [pc, #28]	@ (80039a0 <prvAddNewTaskToReadyList+0xb4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398a:	429a      	cmp	r2, r3
 800398c:	d201      	bcs.n	8003992 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800398e:	f7ff fdd7 	bl	8003540 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003992:	46c0      	nop			@ (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	20001118 	.word	0x20001118
 80039a0:	20001018 	.word	0x20001018
 80039a4:	20001124 	.word	0x20001124
 80039a8:	20001134 	.word	0x20001134
 80039ac:	20001120 	.word	0x20001120
 80039b0:	2000101c 	.word	0x2000101c

080039b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d011      	beq.n	80039ea <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039c6:	4b0d      	ldr	r3, [pc, #52]	@ (80039fc <vTaskDelay+0x48>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <vTaskDelay+0x20>
 80039ce:	b672      	cpsid	i
 80039d0:	46c0      	nop			@ (mov r8, r8)
 80039d2:	e7fd      	b.n	80039d0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80039d4:	f000 f86c 	bl	8003ab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2100      	movs	r1, #0
 80039dc:	0018      	movs	r0, r3
 80039de:	f000 fad7 	bl	8003f90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039e2:	f000 f871 	bl	8003ac8 <xTaskResumeAll>
 80039e6:	0003      	movs	r3, r0
 80039e8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 80039f0:	f7ff fda6 	bl	8003540 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039f4:	46c0      	nop			@ (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b004      	add	sp, #16
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20001140 	.word	0x20001140

08003a00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b089      	sub	sp, #36	@ 0x24
 8003a04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a0e:	003a      	movs	r2, r7
 8003a10:	1d39      	adds	r1, r7, #4
 8003a12:	2308      	movs	r3, #8
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7fc fd18 	bl	800044c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a1c:	683c      	ldr	r4, [r7, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	491b      	ldr	r1, [pc, #108]	@ (8003a90 <vTaskStartScheduler+0x90>)
 8003a24:	481b      	ldr	r0, [pc, #108]	@ (8003a94 <vTaskStartScheduler+0x94>)
 8003a26:	9202      	str	r2, [sp, #8]
 8003a28:	9301      	str	r3, [sp, #4]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	0022      	movs	r2, r4
 8003a32:	f7ff fe2d 	bl	8003690 <xTaskCreateStatic>
 8003a36:	0002      	movs	r2, r0
 8003a38:	4b17      	ldr	r3, [pc, #92]	@ (8003a98 <vTaskStartScheduler+0x98>)
 8003a3a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a3c:	4b16      	ldr	r3, [pc, #88]	@ (8003a98 <vTaskStartScheduler+0x98>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a44:	2301      	movs	r3, #1
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e001      	b.n	8003a4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d113      	bne.n	8003a7c <vTaskStartScheduler+0x7c>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8003a54:	b672      	cpsid	i

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a56:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <vTaskStartScheduler+0x9c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	334c      	adds	r3, #76	@ 0x4c
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <vTaskStartScheduler+0xa0>)
 8003a60:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a62:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <vTaskStartScheduler+0xa4>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	4252      	negs	r2, r2
 8003a68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa8 <vTaskStartScheduler+0xa8>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a70:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <vTaskStartScheduler+0xac>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a76:	f7ff fd3f 	bl	80034f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a7a:	e005      	b.n	8003a88 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	d102      	bne.n	8003a88 <vTaskStartScheduler+0x88>
 8003a82:	b672      	cpsid	i
 8003a84:	46c0      	nop			@ (mov r8, r8)
 8003a86:	e7fd      	b.n	8003a84 <vTaskStartScheduler+0x84>
}
 8003a88:	46c0      	nop			@ (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b005      	add	sp, #20
 8003a8e:	bd90      	pop	{r4, r7, pc}
 8003a90:	08004c28 	.word	0x08004c28
 8003a94:	08003df5 	.word	0x08003df5
 8003a98:	2000113c 	.word	0x2000113c
 8003a9c:	20001018 	.word	0x20001018
 8003aa0:	2000001c 	.word	0x2000001c
 8003aa4:	20001138 	.word	0x20001138
 8003aa8:	20001124 	.word	0x20001124
 8003aac:	2000111c 	.word	0x2000111c

08003ab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003ab4:	4b03      	ldr	r3, [pc, #12]	@ (8003ac4 <vTaskSuspendAll+0x14>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	4b02      	ldr	r3, [pc, #8]	@ (8003ac4 <vTaskSuspendAll+0x14>)
 8003abc:	601a      	str	r2, [r3, #0]
	portMEMORY_BARRIER();
}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20001140 	.word	0x20001140

08003ac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ad6:	4b3a      	ldr	r3, [pc, #232]	@ (8003bc0 <xTaskResumeAll+0xf8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <xTaskResumeAll+0x1c>
 8003ade:	b672      	cpsid	i
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	e7fd      	b.n	8003ae0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ae4:	f7ff fd3c 	bl	8003560 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003ae8:	4b35      	ldr	r3, [pc, #212]	@ (8003bc0 <xTaskResumeAll+0xf8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	1e5a      	subs	r2, r3, #1
 8003aee:	4b34      	ldr	r3, [pc, #208]	@ (8003bc0 <xTaskResumeAll+0xf8>)
 8003af0:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003af2:	4b33      	ldr	r3, [pc, #204]	@ (8003bc0 <xTaskResumeAll+0xf8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d15b      	bne.n	8003bb2 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003afa:	4b32      	ldr	r3, [pc, #200]	@ (8003bc4 <xTaskResumeAll+0xfc>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d057      	beq.n	8003bb2 <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b02:	e02f      	b.n	8003b64 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b04:	4b30      	ldr	r3, [pc, #192]	@ (8003bc8 <xTaskResumeAll+0x100>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3318      	adds	r3, #24
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7ff fc64 	bl	80033de <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f7ff fc5f 	bl	80033de <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b24:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <xTaskResumeAll+0x104>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d903      	bls.n	8003b34 <xTaskResumeAll+0x6c>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b30:	4b26      	ldr	r3, [pc, #152]	@ (8003bcc <xTaskResumeAll+0x104>)
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b38:	0013      	movs	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4a23      	ldr	r2, [pc, #140]	@ (8003bd0 <xTaskResumeAll+0x108>)
 8003b42:	189a      	adds	r2, r3, r2
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	3304      	adds	r3, #4
 8003b48:	0019      	movs	r1, r3
 8003b4a:	0010      	movs	r0, r2
 8003b4c:	f7ff fbef 	bl	800332e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b54:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd4 <xTaskResumeAll+0x10c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8003b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003bd8 <xTaskResumeAll+0x110>)
 8003b60:	2201      	movs	r2, #1
 8003b62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b64:	4b18      	ldr	r3, [pc, #96]	@ (8003bc8 <xTaskResumeAll+0x100>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1cb      	bne.n	8003b04 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b72:	f000 f9ef 	bl	8003f54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003b76:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <xTaskResumeAll+0x114>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00f      	beq.n	8003ba2 <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b82:	f000 f82d 	bl	8003be0 <xTaskIncrementTick>
 8003b86:	1e03      	subs	r3, r0, #0
 8003b88:	d002      	beq.n	8003b90 <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8003b8a:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <xTaskResumeAll+0x110>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f2      	bne.n	8003b82 <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <xTaskResumeAll+0x114>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <xTaskResumeAll+0x110>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003baa:	2301      	movs	r3, #1
 8003bac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bae:	f7ff fcc7 	bl	8003540 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bb2:	f7ff fce7 	bl	8003584 <vPortExitCritical>

	return xAlreadyYielded;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b004      	add	sp, #16
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20001140 	.word	0x20001140
 8003bc4:	20001118 	.word	0x20001118
 8003bc8:	200010d8 	.word	0x200010d8
 8003bcc:	20001120 	.word	0x20001120
 8003bd0:	2000101c 	.word	0x2000101c
 8003bd4:	20001018 	.word	0x20001018
 8003bd8:	2000112c 	.word	0x2000112c
 8003bdc:	20001128 	.word	0x20001128

08003be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bea:	4b4a      	ldr	r3, [pc, #296]	@ (8003d14 <xTaskIncrementTick+0x134>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d000      	beq.n	8003bf4 <xTaskIncrementTick+0x14>
 8003bf2:	e07f      	b.n	8003cf4 <xTaskIncrementTick+0x114>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003bf4:	4b48      	ldr	r3, [pc, #288]	@ (8003d18 <xTaskIncrementTick+0x138>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003bfc:	4b46      	ldr	r3, [pc, #280]	@ (8003d18 <xTaskIncrementTick+0x138>)
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d118      	bne.n	8003c3a <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c08:	4b44      	ldr	r3, [pc, #272]	@ (8003d1c <xTaskIncrementTick+0x13c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <xTaskIncrementTick+0x38>
 8003c12:	b672      	cpsid	i
 8003c14:	46c0      	nop			@ (mov r8, r8)
 8003c16:	e7fd      	b.n	8003c14 <xTaskIncrementTick+0x34>
 8003c18:	4b40      	ldr	r3, [pc, #256]	@ (8003d1c <xTaskIncrementTick+0x13c>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	4b40      	ldr	r3, [pc, #256]	@ (8003d20 <xTaskIncrementTick+0x140>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b3e      	ldr	r3, [pc, #248]	@ (8003d1c <xTaskIncrementTick+0x13c>)
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	4b3e      	ldr	r3, [pc, #248]	@ (8003d20 <xTaskIncrementTick+0x140>)
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003d24 <xTaskIncrementTick+0x144>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	4b3c      	ldr	r3, [pc, #240]	@ (8003d24 <xTaskIncrementTick+0x144>)
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	f000 f98d 	bl	8003f54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <xTaskIncrementTick+0x148>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d349      	bcc.n	8003cd8 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c44:	4b35      	ldr	r3, [pc, #212]	@ (8003d1c <xTaskIncrementTick+0x13c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d104      	bne.n	8003c58 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c4e:	4b36      	ldr	r3, [pc, #216]	@ (8003d28 <xTaskIncrementTick+0x148>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	4252      	negs	r2, r2
 8003c54:	601a      	str	r2, [r3, #0]
					break;
 8003c56:	e03f      	b.n	8003cd8 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c58:	4b30      	ldr	r3, [pc, #192]	@ (8003d1c <xTaskIncrementTick+0x13c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d203      	bcs.n	8003c78 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003c70:	4b2d      	ldr	r3, [pc, #180]	@ (8003d28 <xTaskIncrementTick+0x148>)
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003c76:	e02f      	b.n	8003cd8 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7ff fbae 	bl	80033de <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d004      	beq.n	8003c94 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	3318      	adds	r3, #24
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f7ff fba5 	bl	80033de <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c98:	4b24      	ldr	r3, [pc, #144]	@ (8003d2c <xTaskIncrementTick+0x14c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d903      	bls.n	8003ca8 <xTaskIncrementTick+0xc8>
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca4:	4b21      	ldr	r3, [pc, #132]	@ (8003d2c <xTaskIncrementTick+0x14c>)
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cac:	0013      	movs	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	189b      	adds	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d30 <xTaskIncrementTick+0x150>)
 8003cb6:	189a      	adds	r2, r3, r2
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	0010      	movs	r0, r2
 8003cc0:	f7ff fb35 	bl	800332e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d34 <xTaskIncrementTick+0x154>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d3b8      	bcc.n	8003c44 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd6:	e7b5      	b.n	8003c44 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003cd8:	4b16      	ldr	r3, [pc, #88]	@ (8003d34 <xTaskIncrementTick+0x154>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cde:	4914      	ldr	r1, [pc, #80]	@ (8003d30 <xTaskIncrementTick+0x150>)
 8003ce0:	0013      	movs	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	189b      	adds	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	585b      	ldr	r3, [r3, r1]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d907      	bls.n	8003cfe <xTaskIncrementTick+0x11e>
			{
				xSwitchRequired = pdTRUE;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	e004      	b.n	8003cfe <xTaskIncrementTick+0x11e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003cf4:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <xTaskIncrementTick+0x158>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8003d38 <xTaskIncrementTick+0x158>)
 8003cfc:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	@ (8003d3c <xTaskIncrementTick+0x15c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <xTaskIncrementTick+0x12a>
		{
			xSwitchRequired = pdTRUE;
 8003d06:	2301      	movs	r3, #1
 8003d08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003d0a:	697b      	ldr	r3, [r7, #20]
}
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b006      	add	sp, #24
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20001140 	.word	0x20001140
 8003d18:	2000111c 	.word	0x2000111c
 8003d1c:	200010d0 	.word	0x200010d0
 8003d20:	200010d4 	.word	0x200010d4
 8003d24:	20001130 	.word	0x20001130
 8003d28:	20001138 	.word	0x20001138
 8003d2c:	20001120 	.word	0x20001120
 8003d30:	2000101c 	.word	0x2000101c
 8003d34:	20001018 	.word	0x20001018
 8003d38:	20001128 	.word	0x20001128
 8003d3c:	2000112c 	.word	0x2000112c

08003d40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d46:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <vTaskSwitchContext+0x9c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d4e:	4b24      	ldr	r3, [pc, #144]	@ (8003de0 <vTaskSwitchContext+0xa0>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d54:	e03e      	b.n	8003dd4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003d56:	4b22      	ldr	r3, [pc, #136]	@ (8003de0 <vTaskSwitchContext+0xa0>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d5c:	4b21      	ldr	r3, [pc, #132]	@ (8003de4 <vTaskSwitchContext+0xa4>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	e008      	b.n	8003d76 <vTaskSwitchContext+0x36>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <vTaskSwitchContext+0x30>
 8003d6a:	b672      	cpsid	i
 8003d6c:	46c0      	nop			@ (mov r8, r8)
 8003d6e:	e7fd      	b.n	8003d6c <vTaskSwitchContext+0x2c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	491c      	ldr	r1, [pc, #112]	@ (8003de8 <vTaskSwitchContext+0xa8>)
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	0013      	movs	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	189b      	adds	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	585b      	ldr	r3, [r3, r1]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d0ed      	beq.n	8003d64 <vTaskSwitchContext+0x24>
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	0013      	movs	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4a15      	ldr	r2, [pc, #84]	@ (8003de8 <vTaskSwitchContext+0xa8>)
 8003d94:	189b      	adds	r3, r3, r2
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	605a      	str	r2, [r3, #4]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	3308      	adds	r3, #8
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d104      	bne.n	8003db8 <vTaskSwitchContext+0x78>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <vTaskSwitchContext+0xac>)
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	4b08      	ldr	r3, [pc, #32]	@ (8003de4 <vTaskSwitchContext+0xa4>)
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003dc8:	4b08      	ldr	r3, [pc, #32]	@ (8003dec <vTaskSwitchContext+0xac>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	334c      	adds	r3, #76	@ 0x4c
 8003dce:	001a      	movs	r2, r3
 8003dd0:	4b07      	ldr	r3, [pc, #28]	@ (8003df0 <vTaskSwitchContext+0xb0>)
 8003dd2:	601a      	str	r2, [r3, #0]
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b002      	add	sp, #8
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	20001140 	.word	0x20001140
 8003de0:	2000112c 	.word	0x2000112c
 8003de4:	20001120 	.word	0x20001120
 8003de8:	2000101c 	.word	0x2000101c
 8003dec:	20001018 	.word	0x20001018
 8003df0:	2000001c 	.word	0x2000001c

08003df4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003dfc:	f000 f84e 	bl	8003e9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e00:	4b03      	ldr	r3, [pc, #12]	@ (8003e10 <prvIdleTask+0x1c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d9f9      	bls.n	8003dfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e08:	f7ff fb9a 	bl	8003540 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003e0c:	e7f6      	b.n	8003dfc <prvIdleTask+0x8>
 8003e0e:	46c0      	nop			@ (mov r8, r8)
 8003e10:	2000101c 	.word	0x2000101c

08003e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	607b      	str	r3, [r7, #4]
 8003e1e:	e00c      	b.n	8003e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	0013      	movs	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4a14      	ldr	r2, [pc, #80]	@ (8003e7c <prvInitialiseTaskLists+0x68>)
 8003e2c:	189b      	adds	r3, r3, r2
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f7ff fa54 	bl	80032dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3301      	adds	r3, #1
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b06      	cmp	r3, #6
 8003e3e:	d9ef      	bls.n	8003e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e40:	4b0f      	ldr	r3, [pc, #60]	@ (8003e80 <prvInitialiseTaskLists+0x6c>)
 8003e42:	0018      	movs	r0, r3
 8003e44:	f7ff fa4a 	bl	80032dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e48:	4b0e      	ldr	r3, [pc, #56]	@ (8003e84 <prvInitialiseTaskLists+0x70>)
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	f7ff fa46 	bl	80032dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e50:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <prvInitialiseTaskLists+0x74>)
 8003e52:	0018      	movs	r0, r3
 8003e54:	f7ff fa42 	bl	80032dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e58:	4b0c      	ldr	r3, [pc, #48]	@ (8003e8c <prvInitialiseTaskLists+0x78>)
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7ff fa3e 	bl	80032dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e60:	4b0b      	ldr	r3, [pc, #44]	@ (8003e90 <prvInitialiseTaskLists+0x7c>)
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7ff fa3a 	bl	80032dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e68:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <prvInitialiseTaskLists+0x80>)
 8003e6a:	4a05      	ldr	r2, [pc, #20]	@ (8003e80 <prvInitialiseTaskLists+0x6c>)
 8003e6c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <prvInitialiseTaskLists+0x84>)
 8003e70:	4a04      	ldr	r2, [pc, #16]	@ (8003e84 <prvInitialiseTaskLists+0x70>)
 8003e72:	601a      	str	r2, [r3, #0]
}
 8003e74:	46c0      	nop			@ (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b002      	add	sp, #8
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	2000101c 	.word	0x2000101c
 8003e80:	200010a8 	.word	0x200010a8
 8003e84:	200010bc 	.word	0x200010bc
 8003e88:	200010d8 	.word	0x200010d8
 8003e8c:	200010ec 	.word	0x200010ec
 8003e90:	20001104 	.word	0x20001104
 8003e94:	200010d0 	.word	0x200010d0
 8003e98:	200010d4 	.word	0x200010d4

08003e9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ea2:	e01a      	b.n	8003eda <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8003ea4:	f7ff fb5c 	bl	8003560 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ea8:	4b10      	ldr	r3, [pc, #64]	@ (8003eec <prvCheckTasksWaitingTermination+0x50>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7ff fa92 	bl	80033de <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003eba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef0 <prvCheckTasksWaitingTermination+0x54>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	1e5a      	subs	r2, r3, #1
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef0 <prvCheckTasksWaitingTermination+0x54>)
 8003ec2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <prvCheckTasksWaitingTermination+0x58>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	1e5a      	subs	r2, r3, #1
 8003eca:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <prvCheckTasksWaitingTermination+0x58>)
 8003ecc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003ece:	f7ff fb59 	bl	8003584 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 f80f 	bl	8003ef8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003eda:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <prvCheckTasksWaitingTermination+0x58>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e0      	bne.n	8003ea4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	46c0      	nop			@ (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	200010ec 	.word	0x200010ec
 8003ef0:	20001118 	.word	0x20001118
 8003ef4:	20001100 	.word	0x20001100

08003ef8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	334c      	adds	r3, #76	@ 0x4c
 8003f04:	0018      	movs	r0, r3
 8003f06:	f000 fac1 	bl	800448c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	229d      	movs	r2, #157	@ 0x9d
 8003f0e:	5c9b      	ldrb	r3, [r3, r2]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d109      	bne.n	8003f28 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7ff f8dd 	bl	80030d8 <vPortFree>
				vPortFree( pxTCB );
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff f8d9 	bl	80030d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f26:	e011      	b.n	8003f4c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	229d      	movs	r2, #157	@ 0x9d
 8003f2c:	5c9b      	ldrb	r3, [r3, r2]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d104      	bne.n	8003f3c <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff f8cf 	bl	80030d8 <vPortFree>
	}
 8003f3a:	e007      	b.n	8003f4c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	229d      	movs	r2, #157	@ 0x9d
 8003f40:	5c9b      	ldrb	r3, [r3, r2]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d002      	beq.n	8003f4c <prvDeleteTCB+0x54>
 8003f46:	b672      	cpsid	i
 8003f48:	46c0      	nop			@ (mov r8, r8)
 8003f4a:	e7fd      	b.n	8003f48 <prvDeleteTCB+0x50>
	}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <prvResetNextTaskUnblockTime+0x34>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f64:	4b09      	ldr	r3, [pc, #36]	@ (8003f8c <prvResetNextTaskUnblockTime+0x38>)
 8003f66:	2201      	movs	r2, #1
 8003f68:	4252      	negs	r2, r2
 8003f6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f6c:	e008      	b.n	8003f80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6e:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <prvResetNextTaskUnblockTime+0x34>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	4b03      	ldr	r3, [pc, #12]	@ (8003f8c <prvResetNextTaskUnblockTime+0x38>)
 8003f7e:	601a      	str	r2, [r3, #0]
}
 8003f80:	46c0      	nop			@ (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b002      	add	sp, #8
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	200010d0 	.word	0x200010d0
 8003f8c:	20001138 	.word	0x20001138

08003f90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f9a:	4b21      	ldr	r3, [pc, #132]	@ (8004020 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fa0:	4b20      	ldr	r3, [pc, #128]	@ (8004024 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7ff fa19 	bl	80033de <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	d10b      	bne.n	8003fca <prvAddCurrentTaskToDelayedList+0x3a>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004024 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	1d1a      	adds	r2, r3, #4
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004028 <prvAddCurrentTaskToDelayedList+0x98>)
 8003fc0:	0011      	movs	r1, r2
 8003fc2:	0018      	movs	r0, r3
 8003fc4:	f7ff f9b3 	bl	800332e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003fc8:	e026      	b.n	8004018 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	18d3      	adds	r3, r2, r3
 8003fd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003fd2:	4b14      	ldr	r3, [pc, #80]	@ (8004024 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d209      	bcs.n	8003ff6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe2:	4b12      	ldr	r3, [pc, #72]	@ (800402c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8004024 <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3304      	adds	r3, #4
 8003fec:	0019      	movs	r1, r3
 8003fee:	0010      	movs	r0, r2
 8003ff0:	f7ff f9bf 	bl	8003372 <vListInsert>
}
 8003ff4:	e010      	b.n	8004018 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8004030 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8004024 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3304      	adds	r3, #4
 8004000:	0019      	movs	r1, r3
 8004002:	0010      	movs	r0, r2
 8004004:	f7ff f9b5 	bl	8003372 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004008:	4b0a      	ldr	r3, [pc, #40]	@ (8004034 <prvAddCurrentTaskToDelayedList+0xa4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	d202      	bcs.n	8004018 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004012:	4b08      	ldr	r3, [pc, #32]	@ (8004034 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	601a      	str	r2, [r3, #0]
}
 8004018:	46c0      	nop			@ (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b004      	add	sp, #16
 800401e:	bd80      	pop	{r7, pc}
 8004020:	2000111c 	.word	0x2000111c
 8004024:	20001018 	.word	0x20001018
 8004028:	20001104 	.word	0x20001104
 800402c:	200010d4 	.word	0x200010d4
 8004030:	200010d0 	.word	0x200010d0
 8004034:	20001138 	.word	0x20001138

08004038 <std>:
 8004038:	2300      	movs	r3, #0
 800403a:	b510      	push	{r4, lr}
 800403c:	0004      	movs	r4, r0
 800403e:	6003      	str	r3, [r0, #0]
 8004040:	6043      	str	r3, [r0, #4]
 8004042:	6083      	str	r3, [r0, #8]
 8004044:	8181      	strh	r1, [r0, #12]
 8004046:	6643      	str	r3, [r0, #100]	@ 0x64
 8004048:	81c2      	strh	r2, [r0, #14]
 800404a:	6103      	str	r3, [r0, #16]
 800404c:	6143      	str	r3, [r0, #20]
 800404e:	6183      	str	r3, [r0, #24]
 8004050:	0019      	movs	r1, r3
 8004052:	2208      	movs	r2, #8
 8004054:	305c      	adds	r0, #92	@ 0x5c
 8004056:	f000 f9ff 	bl	8004458 <memset>
 800405a:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <std+0x50>)
 800405c:	6224      	str	r4, [r4, #32]
 800405e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004060:	4b0a      	ldr	r3, [pc, #40]	@ (800408c <std+0x54>)
 8004062:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004064:	4b0a      	ldr	r3, [pc, #40]	@ (8004090 <std+0x58>)
 8004066:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004068:	4b0a      	ldr	r3, [pc, #40]	@ (8004094 <std+0x5c>)
 800406a:	6323      	str	r3, [r4, #48]	@ 0x30
 800406c:	4b0a      	ldr	r3, [pc, #40]	@ (8004098 <std+0x60>)
 800406e:	429c      	cmp	r4, r3
 8004070:	d005      	beq.n	800407e <std+0x46>
 8004072:	4b0a      	ldr	r3, [pc, #40]	@ (800409c <std+0x64>)
 8004074:	429c      	cmp	r4, r3
 8004076:	d002      	beq.n	800407e <std+0x46>
 8004078:	4b09      	ldr	r3, [pc, #36]	@ (80040a0 <std+0x68>)
 800407a:	429c      	cmp	r4, r3
 800407c:	d103      	bne.n	8004086 <std+0x4e>
 800407e:	0020      	movs	r0, r4
 8004080:	3058      	adds	r0, #88	@ 0x58
 8004082:	f000 fad3 	bl	800462c <__retarget_lock_init_recursive>
 8004086:	bd10      	pop	{r4, pc}
 8004088:	08004281 	.word	0x08004281
 800408c:	080042a9 	.word	0x080042a9
 8004090:	080042e1 	.word	0x080042e1
 8004094:	0800430d 	.word	0x0800430d
 8004098:	20001144 	.word	0x20001144
 800409c:	200011ac 	.word	0x200011ac
 80040a0:	20001214 	.word	0x20001214

080040a4 <stdio_exit_handler>:
 80040a4:	b510      	push	{r4, lr}
 80040a6:	4a03      	ldr	r2, [pc, #12]	@ (80040b4 <stdio_exit_handler+0x10>)
 80040a8:	4903      	ldr	r1, [pc, #12]	@ (80040b8 <stdio_exit_handler+0x14>)
 80040aa:	4804      	ldr	r0, [pc, #16]	@ (80040bc <stdio_exit_handler+0x18>)
 80040ac:	f000 f86c 	bl	8004188 <_fwalk_sglue>
 80040b0:	bd10      	pop	{r4, pc}
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	20000010 	.word	0x20000010
 80040b8:	08004939 	.word	0x08004939
 80040bc:	20000020 	.word	0x20000020

080040c0 <cleanup_stdio>:
 80040c0:	6841      	ldr	r1, [r0, #4]
 80040c2:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <cleanup_stdio+0x30>)
 80040c4:	b510      	push	{r4, lr}
 80040c6:	0004      	movs	r4, r0
 80040c8:	4299      	cmp	r1, r3
 80040ca:	d001      	beq.n	80040d0 <cleanup_stdio+0x10>
 80040cc:	f000 fc34 	bl	8004938 <_fflush_r>
 80040d0:	68a1      	ldr	r1, [r4, #8]
 80040d2:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <cleanup_stdio+0x34>)
 80040d4:	4299      	cmp	r1, r3
 80040d6:	d002      	beq.n	80040de <cleanup_stdio+0x1e>
 80040d8:	0020      	movs	r0, r4
 80040da:	f000 fc2d 	bl	8004938 <_fflush_r>
 80040de:	68e1      	ldr	r1, [r4, #12]
 80040e0:	4b05      	ldr	r3, [pc, #20]	@ (80040f8 <cleanup_stdio+0x38>)
 80040e2:	4299      	cmp	r1, r3
 80040e4:	d002      	beq.n	80040ec <cleanup_stdio+0x2c>
 80040e6:	0020      	movs	r0, r4
 80040e8:	f000 fc26 	bl	8004938 <_fflush_r>
 80040ec:	bd10      	pop	{r4, pc}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	20001144 	.word	0x20001144
 80040f4:	200011ac 	.word	0x200011ac
 80040f8:	20001214 	.word	0x20001214

080040fc <global_stdio_init.part.0>:
 80040fc:	b510      	push	{r4, lr}
 80040fe:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <global_stdio_init.part.0+0x28>)
 8004100:	4a09      	ldr	r2, [pc, #36]	@ (8004128 <global_stdio_init.part.0+0x2c>)
 8004102:	2104      	movs	r1, #4
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	4809      	ldr	r0, [pc, #36]	@ (800412c <global_stdio_init.part.0+0x30>)
 8004108:	2200      	movs	r2, #0
 800410a:	f7ff ff95 	bl	8004038 <std>
 800410e:	2201      	movs	r2, #1
 8004110:	2109      	movs	r1, #9
 8004112:	4807      	ldr	r0, [pc, #28]	@ (8004130 <global_stdio_init.part.0+0x34>)
 8004114:	f7ff ff90 	bl	8004038 <std>
 8004118:	2202      	movs	r2, #2
 800411a:	2112      	movs	r1, #18
 800411c:	4805      	ldr	r0, [pc, #20]	@ (8004134 <global_stdio_init.part.0+0x38>)
 800411e:	f7ff ff8b 	bl	8004038 <std>
 8004122:	bd10      	pop	{r4, pc}
 8004124:	2000127c 	.word	0x2000127c
 8004128:	080040a5 	.word	0x080040a5
 800412c:	20001144 	.word	0x20001144
 8004130:	200011ac 	.word	0x200011ac
 8004134:	20001214 	.word	0x20001214

08004138 <__sfp_lock_acquire>:
 8004138:	b510      	push	{r4, lr}
 800413a:	4802      	ldr	r0, [pc, #8]	@ (8004144 <__sfp_lock_acquire+0xc>)
 800413c:	f000 fa77 	bl	800462e <__retarget_lock_acquire_recursive>
 8004140:	bd10      	pop	{r4, pc}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	20001285 	.word	0x20001285

08004148 <__sfp_lock_release>:
 8004148:	b510      	push	{r4, lr}
 800414a:	4802      	ldr	r0, [pc, #8]	@ (8004154 <__sfp_lock_release+0xc>)
 800414c:	f000 fa70 	bl	8004630 <__retarget_lock_release_recursive>
 8004150:	bd10      	pop	{r4, pc}
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	20001285 	.word	0x20001285

08004158 <__sinit>:
 8004158:	b510      	push	{r4, lr}
 800415a:	0004      	movs	r4, r0
 800415c:	f7ff ffec 	bl	8004138 <__sfp_lock_acquire>
 8004160:	6a23      	ldr	r3, [r4, #32]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <__sinit+0x14>
 8004166:	f7ff ffef 	bl	8004148 <__sfp_lock_release>
 800416a:	bd10      	pop	{r4, pc}
 800416c:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <__sinit+0x28>)
 800416e:	6223      	str	r3, [r4, #32]
 8004170:	4b04      	ldr	r3, [pc, #16]	@ (8004184 <__sinit+0x2c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f6      	bne.n	8004166 <__sinit+0xe>
 8004178:	f7ff ffc0 	bl	80040fc <global_stdio_init.part.0>
 800417c:	e7f3      	b.n	8004166 <__sinit+0xe>
 800417e:	46c0      	nop			@ (mov r8, r8)
 8004180:	080040c1 	.word	0x080040c1
 8004184:	2000127c 	.word	0x2000127c

08004188 <_fwalk_sglue>:
 8004188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800418a:	0014      	movs	r4, r2
 800418c:	2600      	movs	r6, #0
 800418e:	9000      	str	r0, [sp, #0]
 8004190:	9101      	str	r1, [sp, #4]
 8004192:	68a5      	ldr	r5, [r4, #8]
 8004194:	6867      	ldr	r7, [r4, #4]
 8004196:	3f01      	subs	r7, #1
 8004198:	d504      	bpl.n	80041a4 <_fwalk_sglue+0x1c>
 800419a:	6824      	ldr	r4, [r4, #0]
 800419c:	2c00      	cmp	r4, #0
 800419e:	d1f8      	bne.n	8004192 <_fwalk_sglue+0xa>
 80041a0:	0030      	movs	r0, r6
 80041a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041a4:	89ab      	ldrh	r3, [r5, #12]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d908      	bls.n	80041bc <_fwalk_sglue+0x34>
 80041aa:	220e      	movs	r2, #14
 80041ac:	5eab      	ldrsh	r3, [r5, r2]
 80041ae:	3301      	adds	r3, #1
 80041b0:	d004      	beq.n	80041bc <_fwalk_sglue+0x34>
 80041b2:	0029      	movs	r1, r5
 80041b4:	9800      	ldr	r0, [sp, #0]
 80041b6:	9b01      	ldr	r3, [sp, #4]
 80041b8:	4798      	blx	r3
 80041ba:	4306      	orrs	r6, r0
 80041bc:	3568      	adds	r5, #104	@ 0x68
 80041be:	e7ea      	b.n	8004196 <_fwalk_sglue+0xe>

080041c0 <_puts_r>:
 80041c0:	6a03      	ldr	r3, [r0, #32]
 80041c2:	b570      	push	{r4, r5, r6, lr}
 80041c4:	0005      	movs	r5, r0
 80041c6:	000e      	movs	r6, r1
 80041c8:	6884      	ldr	r4, [r0, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <_puts_r+0x12>
 80041ce:	f7ff ffc3 	bl	8004158 <__sinit>
 80041d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041d4:	07db      	lsls	r3, r3, #31
 80041d6:	d405      	bmi.n	80041e4 <_puts_r+0x24>
 80041d8:	89a3      	ldrh	r3, [r4, #12]
 80041da:	059b      	lsls	r3, r3, #22
 80041dc:	d402      	bmi.n	80041e4 <_puts_r+0x24>
 80041de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041e0:	f000 fa25 	bl	800462e <__retarget_lock_acquire_recursive>
 80041e4:	89a3      	ldrh	r3, [r4, #12]
 80041e6:	071b      	lsls	r3, r3, #28
 80041e8:	d502      	bpl.n	80041f0 <_puts_r+0x30>
 80041ea:	6923      	ldr	r3, [r4, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11f      	bne.n	8004230 <_puts_r+0x70>
 80041f0:	0021      	movs	r1, r4
 80041f2:	0028      	movs	r0, r5
 80041f4:	f000 f8d2 	bl	800439c <__swsetup_r>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d019      	beq.n	8004230 <_puts_r+0x70>
 80041fc:	2501      	movs	r5, #1
 80041fe:	426d      	negs	r5, r5
 8004200:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004202:	07db      	lsls	r3, r3, #31
 8004204:	d405      	bmi.n	8004212 <_puts_r+0x52>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	059b      	lsls	r3, r3, #22
 800420a:	d402      	bmi.n	8004212 <_puts_r+0x52>
 800420c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800420e:	f000 fa0f 	bl	8004630 <__retarget_lock_release_recursive>
 8004212:	0028      	movs	r0, r5
 8004214:	bd70      	pop	{r4, r5, r6, pc}
 8004216:	3601      	adds	r6, #1
 8004218:	60a3      	str	r3, [r4, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	da04      	bge.n	8004228 <_puts_r+0x68>
 800421e:	69a2      	ldr	r2, [r4, #24]
 8004220:	429a      	cmp	r2, r3
 8004222:	dc16      	bgt.n	8004252 <_puts_r+0x92>
 8004224:	290a      	cmp	r1, #10
 8004226:	d014      	beq.n	8004252 <_puts_r+0x92>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	6022      	str	r2, [r4, #0]
 800422e:	7019      	strb	r1, [r3, #0]
 8004230:	68a3      	ldr	r3, [r4, #8]
 8004232:	7831      	ldrb	r1, [r6, #0]
 8004234:	3b01      	subs	r3, #1
 8004236:	2900      	cmp	r1, #0
 8004238:	d1ed      	bne.n	8004216 <_puts_r+0x56>
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	da0f      	bge.n	8004260 <_puts_r+0xa0>
 8004240:	0022      	movs	r2, r4
 8004242:	0028      	movs	r0, r5
 8004244:	310a      	adds	r1, #10
 8004246:	f000 f867 	bl	8004318 <__swbuf_r>
 800424a:	3001      	adds	r0, #1
 800424c:	d0d6      	beq.n	80041fc <_puts_r+0x3c>
 800424e:	250a      	movs	r5, #10
 8004250:	e7d6      	b.n	8004200 <_puts_r+0x40>
 8004252:	0022      	movs	r2, r4
 8004254:	0028      	movs	r0, r5
 8004256:	f000 f85f 	bl	8004318 <__swbuf_r>
 800425a:	3001      	adds	r0, #1
 800425c:	d1e8      	bne.n	8004230 <_puts_r+0x70>
 800425e:	e7cd      	b.n	80041fc <_puts_r+0x3c>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	6022      	str	r2, [r4, #0]
 8004266:	220a      	movs	r2, #10
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e7f0      	b.n	800424e <_puts_r+0x8e>

0800426c <puts>:
 800426c:	b510      	push	{r4, lr}
 800426e:	4b03      	ldr	r3, [pc, #12]	@ (800427c <puts+0x10>)
 8004270:	0001      	movs	r1, r0
 8004272:	6818      	ldr	r0, [r3, #0]
 8004274:	f7ff ffa4 	bl	80041c0 <_puts_r>
 8004278:	bd10      	pop	{r4, pc}
 800427a:	46c0      	nop			@ (mov r8, r8)
 800427c:	2000001c 	.word	0x2000001c

08004280 <__sread>:
 8004280:	b570      	push	{r4, r5, r6, lr}
 8004282:	000c      	movs	r4, r1
 8004284:	250e      	movs	r5, #14
 8004286:	5f49      	ldrsh	r1, [r1, r5]
 8004288:	f000 f97e 	bl	8004588 <_read_r>
 800428c:	2800      	cmp	r0, #0
 800428e:	db03      	blt.n	8004298 <__sread+0x18>
 8004290:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004292:	181b      	adds	r3, r3, r0
 8004294:	6563      	str	r3, [r4, #84]	@ 0x54
 8004296:	bd70      	pop	{r4, r5, r6, pc}
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	4a02      	ldr	r2, [pc, #8]	@ (80042a4 <__sread+0x24>)
 800429c:	4013      	ands	r3, r2
 800429e:	81a3      	strh	r3, [r4, #12]
 80042a0:	e7f9      	b.n	8004296 <__sread+0x16>
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	ffffefff 	.word	0xffffefff

080042a8 <__swrite>:
 80042a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042aa:	001f      	movs	r7, r3
 80042ac:	898b      	ldrh	r3, [r1, #12]
 80042ae:	0005      	movs	r5, r0
 80042b0:	000c      	movs	r4, r1
 80042b2:	0016      	movs	r6, r2
 80042b4:	05db      	lsls	r3, r3, #23
 80042b6:	d505      	bpl.n	80042c4 <__swrite+0x1c>
 80042b8:	230e      	movs	r3, #14
 80042ba:	5ec9      	ldrsh	r1, [r1, r3]
 80042bc:	2200      	movs	r2, #0
 80042be:	2302      	movs	r3, #2
 80042c0:	f000 f94e 	bl	8004560 <_lseek_r>
 80042c4:	89a3      	ldrh	r3, [r4, #12]
 80042c6:	4a05      	ldr	r2, [pc, #20]	@ (80042dc <__swrite+0x34>)
 80042c8:	0028      	movs	r0, r5
 80042ca:	4013      	ands	r3, r2
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	0032      	movs	r2, r6
 80042d0:	230e      	movs	r3, #14
 80042d2:	5ee1      	ldrsh	r1, [r4, r3]
 80042d4:	003b      	movs	r3, r7
 80042d6:	f000 f96b 	bl	80045b0 <_write_r>
 80042da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042dc:	ffffefff 	.word	0xffffefff

080042e0 <__sseek>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	000c      	movs	r4, r1
 80042e4:	250e      	movs	r5, #14
 80042e6:	5f49      	ldrsh	r1, [r1, r5]
 80042e8:	f000 f93a 	bl	8004560 <_lseek_r>
 80042ec:	89a3      	ldrh	r3, [r4, #12]
 80042ee:	1c42      	adds	r2, r0, #1
 80042f0:	d103      	bne.n	80042fa <__sseek+0x1a>
 80042f2:	4a05      	ldr	r2, [pc, #20]	@ (8004308 <__sseek+0x28>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	81a3      	strh	r3, [r4, #12]
 80042f8:	bd70      	pop	{r4, r5, r6, pc}
 80042fa:	2280      	movs	r2, #128	@ 0x80
 80042fc:	0152      	lsls	r2, r2, #5
 80042fe:	4313      	orrs	r3, r2
 8004300:	81a3      	strh	r3, [r4, #12]
 8004302:	6560      	str	r0, [r4, #84]	@ 0x54
 8004304:	e7f8      	b.n	80042f8 <__sseek+0x18>
 8004306:	46c0      	nop			@ (mov r8, r8)
 8004308:	ffffefff 	.word	0xffffefff

0800430c <__sclose>:
 800430c:	b510      	push	{r4, lr}
 800430e:	230e      	movs	r3, #14
 8004310:	5ec9      	ldrsh	r1, [r1, r3]
 8004312:	f000 f8a9 	bl	8004468 <_close_r>
 8004316:	bd10      	pop	{r4, pc}

08004318 <__swbuf_r>:
 8004318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431a:	0006      	movs	r6, r0
 800431c:	000d      	movs	r5, r1
 800431e:	0014      	movs	r4, r2
 8004320:	2800      	cmp	r0, #0
 8004322:	d004      	beq.n	800432e <__swbuf_r+0x16>
 8004324:	6a03      	ldr	r3, [r0, #32]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <__swbuf_r+0x16>
 800432a:	f7ff ff15 	bl	8004158 <__sinit>
 800432e:	69a3      	ldr	r3, [r4, #24]
 8004330:	60a3      	str	r3, [r4, #8]
 8004332:	89a3      	ldrh	r3, [r4, #12]
 8004334:	071b      	lsls	r3, r3, #28
 8004336:	d502      	bpl.n	800433e <__swbuf_r+0x26>
 8004338:	6923      	ldr	r3, [r4, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d109      	bne.n	8004352 <__swbuf_r+0x3a>
 800433e:	0021      	movs	r1, r4
 8004340:	0030      	movs	r0, r6
 8004342:	f000 f82b 	bl	800439c <__swsetup_r>
 8004346:	2800      	cmp	r0, #0
 8004348:	d003      	beq.n	8004352 <__swbuf_r+0x3a>
 800434a:	2501      	movs	r5, #1
 800434c:	426d      	negs	r5, r5
 800434e:	0028      	movs	r0, r5
 8004350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004352:	6923      	ldr	r3, [r4, #16]
 8004354:	6820      	ldr	r0, [r4, #0]
 8004356:	b2ef      	uxtb	r7, r5
 8004358:	1ac0      	subs	r0, r0, r3
 800435a:	6963      	ldr	r3, [r4, #20]
 800435c:	b2ed      	uxtb	r5, r5
 800435e:	4283      	cmp	r3, r0
 8004360:	dc05      	bgt.n	800436e <__swbuf_r+0x56>
 8004362:	0021      	movs	r1, r4
 8004364:	0030      	movs	r0, r6
 8004366:	f000 fae7 	bl	8004938 <_fflush_r>
 800436a:	2800      	cmp	r0, #0
 800436c:	d1ed      	bne.n	800434a <__swbuf_r+0x32>
 800436e:	68a3      	ldr	r3, [r4, #8]
 8004370:	3001      	adds	r0, #1
 8004372:	3b01      	subs	r3, #1
 8004374:	60a3      	str	r3, [r4, #8]
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	6022      	str	r2, [r4, #0]
 800437c:	701f      	strb	r7, [r3, #0]
 800437e:	6963      	ldr	r3, [r4, #20]
 8004380:	4283      	cmp	r3, r0
 8004382:	d004      	beq.n	800438e <__swbuf_r+0x76>
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	07db      	lsls	r3, r3, #31
 8004388:	d5e1      	bpl.n	800434e <__swbuf_r+0x36>
 800438a:	2d0a      	cmp	r5, #10
 800438c:	d1df      	bne.n	800434e <__swbuf_r+0x36>
 800438e:	0021      	movs	r1, r4
 8004390:	0030      	movs	r0, r6
 8004392:	f000 fad1 	bl	8004938 <_fflush_r>
 8004396:	2800      	cmp	r0, #0
 8004398:	d0d9      	beq.n	800434e <__swbuf_r+0x36>
 800439a:	e7d6      	b.n	800434a <__swbuf_r+0x32>

0800439c <__swsetup_r>:
 800439c:	4b2d      	ldr	r3, [pc, #180]	@ (8004454 <__swsetup_r+0xb8>)
 800439e:	b570      	push	{r4, r5, r6, lr}
 80043a0:	0005      	movs	r5, r0
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	000c      	movs	r4, r1
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d004      	beq.n	80043b4 <__swsetup_r+0x18>
 80043aa:	6a03      	ldr	r3, [r0, #32]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <__swsetup_r+0x18>
 80043b0:	f7ff fed2 	bl	8004158 <__sinit>
 80043b4:	220c      	movs	r2, #12
 80043b6:	5ea3      	ldrsh	r3, [r4, r2]
 80043b8:	071a      	lsls	r2, r3, #28
 80043ba:	d423      	bmi.n	8004404 <__swsetup_r+0x68>
 80043bc:	06da      	lsls	r2, r3, #27
 80043be:	d407      	bmi.n	80043d0 <__swsetup_r+0x34>
 80043c0:	2209      	movs	r2, #9
 80043c2:	602a      	str	r2, [r5, #0]
 80043c4:	2240      	movs	r2, #64	@ 0x40
 80043c6:	2001      	movs	r0, #1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	81a3      	strh	r3, [r4, #12]
 80043cc:	4240      	negs	r0, r0
 80043ce:	e03a      	b.n	8004446 <__swsetup_r+0xaa>
 80043d0:	075b      	lsls	r3, r3, #29
 80043d2:	d513      	bpl.n	80043fc <__swsetup_r+0x60>
 80043d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80043d6:	2900      	cmp	r1, #0
 80043d8:	d008      	beq.n	80043ec <__swsetup_r+0x50>
 80043da:	0023      	movs	r3, r4
 80043dc:	3344      	adds	r3, #68	@ 0x44
 80043de:	4299      	cmp	r1, r3
 80043e0:	d002      	beq.n	80043e8 <__swsetup_r+0x4c>
 80043e2:	0028      	movs	r0, r5
 80043e4:	f000 f926 	bl	8004634 <_free_r>
 80043e8:	2300      	movs	r3, #0
 80043ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80043ec:	2224      	movs	r2, #36	@ 0x24
 80043ee:	89a3      	ldrh	r3, [r4, #12]
 80043f0:	4393      	bics	r3, r2
 80043f2:	81a3      	strh	r3, [r4, #12]
 80043f4:	2300      	movs	r3, #0
 80043f6:	6063      	str	r3, [r4, #4]
 80043f8:	6923      	ldr	r3, [r4, #16]
 80043fa:	6023      	str	r3, [r4, #0]
 80043fc:	2308      	movs	r3, #8
 80043fe:	89a2      	ldrh	r2, [r4, #12]
 8004400:	4313      	orrs	r3, r2
 8004402:	81a3      	strh	r3, [r4, #12]
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10b      	bne.n	8004422 <__swsetup_r+0x86>
 800440a:	21a0      	movs	r1, #160	@ 0xa0
 800440c:	2280      	movs	r2, #128	@ 0x80
 800440e:	89a3      	ldrh	r3, [r4, #12]
 8004410:	0089      	lsls	r1, r1, #2
 8004412:	0092      	lsls	r2, r2, #2
 8004414:	400b      	ands	r3, r1
 8004416:	4293      	cmp	r3, r2
 8004418:	d003      	beq.n	8004422 <__swsetup_r+0x86>
 800441a:	0021      	movs	r1, r4
 800441c:	0028      	movs	r0, r5
 800441e:	f000 fae1 	bl	80049e4 <__smakebuf_r>
 8004422:	220c      	movs	r2, #12
 8004424:	5ea3      	ldrsh	r3, [r4, r2]
 8004426:	2101      	movs	r1, #1
 8004428:	001a      	movs	r2, r3
 800442a:	400a      	ands	r2, r1
 800442c:	420b      	tst	r3, r1
 800442e:	d00b      	beq.n	8004448 <__swsetup_r+0xac>
 8004430:	2200      	movs	r2, #0
 8004432:	60a2      	str	r2, [r4, #8]
 8004434:	6962      	ldr	r2, [r4, #20]
 8004436:	4252      	negs	r2, r2
 8004438:	61a2      	str	r2, [r4, #24]
 800443a:	2000      	movs	r0, #0
 800443c:	6922      	ldr	r2, [r4, #16]
 800443e:	4282      	cmp	r2, r0
 8004440:	d101      	bne.n	8004446 <__swsetup_r+0xaa>
 8004442:	061a      	lsls	r2, r3, #24
 8004444:	d4be      	bmi.n	80043c4 <__swsetup_r+0x28>
 8004446:	bd70      	pop	{r4, r5, r6, pc}
 8004448:	0799      	lsls	r1, r3, #30
 800444a:	d400      	bmi.n	800444e <__swsetup_r+0xb2>
 800444c:	6962      	ldr	r2, [r4, #20]
 800444e:	60a2      	str	r2, [r4, #8]
 8004450:	e7f3      	b.n	800443a <__swsetup_r+0x9e>
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	2000001c 	.word	0x2000001c

08004458 <memset>:
 8004458:	0003      	movs	r3, r0
 800445a:	1882      	adds	r2, r0, r2
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	7019      	strb	r1, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <_close_r>:
 8004468:	2300      	movs	r3, #0
 800446a:	b570      	push	{r4, r5, r6, lr}
 800446c:	4d06      	ldr	r5, [pc, #24]	@ (8004488 <_close_r+0x20>)
 800446e:	0004      	movs	r4, r0
 8004470:	0008      	movs	r0, r1
 8004472:	602b      	str	r3, [r5, #0]
 8004474:	f7fc fa07 	bl	8000886 <_close>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d103      	bne.n	8004484 <_close_r+0x1c>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d000      	beq.n	8004484 <_close_r+0x1c>
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	20001280 	.word	0x20001280

0800448c <_reclaim_reent>:
 800448c:	4b33      	ldr	r3, [pc, #204]	@ (800455c <_reclaim_reent+0xd0>)
 800448e:	b570      	push	{r4, r5, r6, lr}
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	0004      	movs	r4, r0
 8004494:	4283      	cmp	r3, r0
 8004496:	d05f      	beq.n	8004558 <_reclaim_reent+0xcc>
 8004498:	69c3      	ldr	r3, [r0, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d027      	beq.n	80044ee <_reclaim_reent+0x62>
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d00d      	beq.n	80044c0 <_reclaim_reent+0x34>
 80044a4:	2500      	movs	r5, #0
 80044a6:	69e3      	ldr	r3, [r4, #28]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	5959      	ldr	r1, [r3, r5]
 80044ac:	2900      	cmp	r1, #0
 80044ae:	d118      	bne.n	80044e2 <_reclaim_reent+0x56>
 80044b0:	3504      	adds	r5, #4
 80044b2:	2d80      	cmp	r5, #128	@ 0x80
 80044b4:	d1f7      	bne.n	80044a6 <_reclaim_reent+0x1a>
 80044b6:	69e3      	ldr	r3, [r4, #28]
 80044b8:	0020      	movs	r0, r4
 80044ba:	68d9      	ldr	r1, [r3, #12]
 80044bc:	f000 f8ba 	bl	8004634 <_free_r>
 80044c0:	69e3      	ldr	r3, [r4, #28]
 80044c2:	6819      	ldr	r1, [r3, #0]
 80044c4:	2900      	cmp	r1, #0
 80044c6:	d002      	beq.n	80044ce <_reclaim_reent+0x42>
 80044c8:	0020      	movs	r0, r4
 80044ca:	f000 f8b3 	bl	8004634 <_free_r>
 80044ce:	69e3      	ldr	r3, [r4, #28]
 80044d0:	689d      	ldr	r5, [r3, #8]
 80044d2:	2d00      	cmp	r5, #0
 80044d4:	d00b      	beq.n	80044ee <_reclaim_reent+0x62>
 80044d6:	0029      	movs	r1, r5
 80044d8:	0020      	movs	r0, r4
 80044da:	682d      	ldr	r5, [r5, #0]
 80044dc:	f000 f8aa 	bl	8004634 <_free_r>
 80044e0:	e7f7      	b.n	80044d2 <_reclaim_reent+0x46>
 80044e2:	680e      	ldr	r6, [r1, #0]
 80044e4:	0020      	movs	r0, r4
 80044e6:	f000 f8a5 	bl	8004634 <_free_r>
 80044ea:	0031      	movs	r1, r6
 80044ec:	e7de      	b.n	80044ac <_reclaim_reent+0x20>
 80044ee:	6961      	ldr	r1, [r4, #20]
 80044f0:	2900      	cmp	r1, #0
 80044f2:	d002      	beq.n	80044fa <_reclaim_reent+0x6e>
 80044f4:	0020      	movs	r0, r4
 80044f6:	f000 f89d 	bl	8004634 <_free_r>
 80044fa:	69e1      	ldr	r1, [r4, #28]
 80044fc:	2900      	cmp	r1, #0
 80044fe:	d002      	beq.n	8004506 <_reclaim_reent+0x7a>
 8004500:	0020      	movs	r0, r4
 8004502:	f000 f897 	bl	8004634 <_free_r>
 8004506:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004508:	2900      	cmp	r1, #0
 800450a:	d002      	beq.n	8004512 <_reclaim_reent+0x86>
 800450c:	0020      	movs	r0, r4
 800450e:	f000 f891 	bl	8004634 <_free_r>
 8004512:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004514:	2900      	cmp	r1, #0
 8004516:	d002      	beq.n	800451e <_reclaim_reent+0x92>
 8004518:	0020      	movs	r0, r4
 800451a:	f000 f88b 	bl	8004634 <_free_r>
 800451e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004520:	2900      	cmp	r1, #0
 8004522:	d002      	beq.n	800452a <_reclaim_reent+0x9e>
 8004524:	0020      	movs	r0, r4
 8004526:	f000 f885 	bl	8004634 <_free_r>
 800452a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800452c:	2900      	cmp	r1, #0
 800452e:	d002      	beq.n	8004536 <_reclaim_reent+0xaa>
 8004530:	0020      	movs	r0, r4
 8004532:	f000 f87f 	bl	8004634 <_free_r>
 8004536:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004538:	2900      	cmp	r1, #0
 800453a:	d002      	beq.n	8004542 <_reclaim_reent+0xb6>
 800453c:	0020      	movs	r0, r4
 800453e:	f000 f879 	bl	8004634 <_free_r>
 8004542:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004544:	2900      	cmp	r1, #0
 8004546:	d002      	beq.n	800454e <_reclaim_reent+0xc2>
 8004548:	0020      	movs	r0, r4
 800454a:	f000 f873 	bl	8004634 <_free_r>
 800454e:	6a23      	ldr	r3, [r4, #32]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <_reclaim_reent+0xcc>
 8004554:	0020      	movs	r0, r4
 8004556:	4798      	blx	r3
 8004558:	bd70      	pop	{r4, r5, r6, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	2000001c 	.word	0x2000001c

08004560 <_lseek_r>:
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	0004      	movs	r4, r0
 8004564:	0008      	movs	r0, r1
 8004566:	0011      	movs	r1, r2
 8004568:	001a      	movs	r2, r3
 800456a:	2300      	movs	r3, #0
 800456c:	4d05      	ldr	r5, [pc, #20]	@ (8004584 <_lseek_r+0x24>)
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	f7fc f9aa 	bl	80008c8 <_lseek>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d103      	bne.n	8004580 <_lseek_r+0x20>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d000      	beq.n	8004580 <_lseek_r+0x20>
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	bd70      	pop	{r4, r5, r6, pc}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	20001280 	.word	0x20001280

08004588 <_read_r>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	0004      	movs	r4, r0
 800458c:	0008      	movs	r0, r1
 800458e:	0011      	movs	r1, r2
 8004590:	001a      	movs	r2, r3
 8004592:	2300      	movs	r3, #0
 8004594:	4d05      	ldr	r5, [pc, #20]	@ (80045ac <_read_r+0x24>)
 8004596:	602b      	str	r3, [r5, #0]
 8004598:	f7fc f93c 	bl	8000814 <_read>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d103      	bne.n	80045a8 <_read_r+0x20>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d000      	beq.n	80045a8 <_read_r+0x20>
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	bd70      	pop	{r4, r5, r6, pc}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	20001280 	.word	0x20001280

080045b0 <_write_r>:
 80045b0:	b570      	push	{r4, r5, r6, lr}
 80045b2:	0004      	movs	r4, r0
 80045b4:	0008      	movs	r0, r1
 80045b6:	0011      	movs	r1, r2
 80045b8:	001a      	movs	r2, r3
 80045ba:	2300      	movs	r3, #0
 80045bc:	4d05      	ldr	r5, [pc, #20]	@ (80045d4 <_write_r+0x24>)
 80045be:	602b      	str	r3, [r5, #0]
 80045c0:	f7fc f945 	bl	800084e <_write>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d103      	bne.n	80045d0 <_write_r+0x20>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d000      	beq.n	80045d0 <_write_r+0x20>
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	bd70      	pop	{r4, r5, r6, pc}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	20001280 	.word	0x20001280

080045d8 <__errno>:
 80045d8:	4b01      	ldr	r3, [pc, #4]	@ (80045e0 <__errno+0x8>)
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	4770      	bx	lr
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	2000001c 	.word	0x2000001c

080045e4 <__libc_init_array>:
 80045e4:	b570      	push	{r4, r5, r6, lr}
 80045e6:	2600      	movs	r6, #0
 80045e8:	4c0c      	ldr	r4, [pc, #48]	@ (800461c <__libc_init_array+0x38>)
 80045ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004620 <__libc_init_array+0x3c>)
 80045ec:	1b64      	subs	r4, r4, r5
 80045ee:	10a4      	asrs	r4, r4, #2
 80045f0:	42a6      	cmp	r6, r4
 80045f2:	d109      	bne.n	8004608 <__libc_init_array+0x24>
 80045f4:	2600      	movs	r6, #0
 80045f6:	f000 fa6d 	bl	8004ad4 <_init>
 80045fa:	4c0a      	ldr	r4, [pc, #40]	@ (8004624 <__libc_init_array+0x40>)
 80045fc:	4d0a      	ldr	r5, [pc, #40]	@ (8004628 <__libc_init_array+0x44>)
 80045fe:	1b64      	subs	r4, r4, r5
 8004600:	10a4      	asrs	r4, r4, #2
 8004602:	42a6      	cmp	r6, r4
 8004604:	d105      	bne.n	8004612 <__libc_init_array+0x2e>
 8004606:	bd70      	pop	{r4, r5, r6, pc}
 8004608:	00b3      	lsls	r3, r6, #2
 800460a:	58eb      	ldr	r3, [r5, r3]
 800460c:	4798      	blx	r3
 800460e:	3601      	adds	r6, #1
 8004610:	e7ee      	b.n	80045f0 <__libc_init_array+0xc>
 8004612:	00b3      	lsls	r3, r6, #2
 8004614:	58eb      	ldr	r3, [r5, r3]
 8004616:	4798      	blx	r3
 8004618:	3601      	adds	r6, #1
 800461a:	e7f2      	b.n	8004602 <__libc_init_array+0x1e>
 800461c:	08004ca4 	.word	0x08004ca4
 8004620:	08004ca4 	.word	0x08004ca4
 8004624:	08004ca8 	.word	0x08004ca8
 8004628:	08004ca4 	.word	0x08004ca4

0800462c <__retarget_lock_init_recursive>:
 800462c:	4770      	bx	lr

0800462e <__retarget_lock_acquire_recursive>:
 800462e:	4770      	bx	lr

08004630 <__retarget_lock_release_recursive>:
 8004630:	4770      	bx	lr
	...

08004634 <_free_r>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	0005      	movs	r5, r0
 8004638:	1e0c      	subs	r4, r1, #0
 800463a:	d010      	beq.n	800465e <_free_r+0x2a>
 800463c:	3c04      	subs	r4, #4
 800463e:	6823      	ldr	r3, [r4, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	da00      	bge.n	8004646 <_free_r+0x12>
 8004644:	18e4      	adds	r4, r4, r3
 8004646:	0028      	movs	r0, r5
 8004648:	f000 f8e0 	bl	800480c <__malloc_lock>
 800464c:	4a1d      	ldr	r2, [pc, #116]	@ (80046c4 <_free_r+0x90>)
 800464e:	6813      	ldr	r3, [r2, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <_free_r+0x2c>
 8004654:	6063      	str	r3, [r4, #4]
 8004656:	6014      	str	r4, [r2, #0]
 8004658:	0028      	movs	r0, r5
 800465a:	f000 f8df 	bl	800481c <__malloc_unlock>
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	42a3      	cmp	r3, r4
 8004662:	d908      	bls.n	8004676 <_free_r+0x42>
 8004664:	6820      	ldr	r0, [r4, #0]
 8004666:	1821      	adds	r1, r4, r0
 8004668:	428b      	cmp	r3, r1
 800466a:	d1f3      	bne.n	8004654 <_free_r+0x20>
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	1809      	adds	r1, r1, r0
 8004672:	6021      	str	r1, [r4, #0]
 8004674:	e7ee      	b.n	8004654 <_free_r+0x20>
 8004676:	001a      	movs	r2, r3
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <_free_r+0x4e>
 800467e:	42a3      	cmp	r3, r4
 8004680:	d9f9      	bls.n	8004676 <_free_r+0x42>
 8004682:	6811      	ldr	r1, [r2, #0]
 8004684:	1850      	adds	r0, r2, r1
 8004686:	42a0      	cmp	r0, r4
 8004688:	d10b      	bne.n	80046a2 <_free_r+0x6e>
 800468a:	6820      	ldr	r0, [r4, #0]
 800468c:	1809      	adds	r1, r1, r0
 800468e:	1850      	adds	r0, r2, r1
 8004690:	6011      	str	r1, [r2, #0]
 8004692:	4283      	cmp	r3, r0
 8004694:	d1e0      	bne.n	8004658 <_free_r+0x24>
 8004696:	6818      	ldr	r0, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	1841      	adds	r1, r0, r1
 800469c:	6011      	str	r1, [r2, #0]
 800469e:	6053      	str	r3, [r2, #4]
 80046a0:	e7da      	b.n	8004658 <_free_r+0x24>
 80046a2:	42a0      	cmp	r0, r4
 80046a4:	d902      	bls.n	80046ac <_free_r+0x78>
 80046a6:	230c      	movs	r3, #12
 80046a8:	602b      	str	r3, [r5, #0]
 80046aa:	e7d5      	b.n	8004658 <_free_r+0x24>
 80046ac:	6820      	ldr	r0, [r4, #0]
 80046ae:	1821      	adds	r1, r4, r0
 80046b0:	428b      	cmp	r3, r1
 80046b2:	d103      	bne.n	80046bc <_free_r+0x88>
 80046b4:	6819      	ldr	r1, [r3, #0]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	1809      	adds	r1, r1, r0
 80046ba:	6021      	str	r1, [r4, #0]
 80046bc:	6063      	str	r3, [r4, #4]
 80046be:	6054      	str	r4, [r2, #4]
 80046c0:	e7ca      	b.n	8004658 <_free_r+0x24>
 80046c2:	46c0      	nop			@ (mov r8, r8)
 80046c4:	2000128c 	.word	0x2000128c

080046c8 <sbrk_aligned>:
 80046c8:	b570      	push	{r4, r5, r6, lr}
 80046ca:	4e0f      	ldr	r6, [pc, #60]	@ (8004708 <sbrk_aligned+0x40>)
 80046cc:	000d      	movs	r5, r1
 80046ce:	6831      	ldr	r1, [r6, #0]
 80046d0:	0004      	movs	r4, r0
 80046d2:	2900      	cmp	r1, #0
 80046d4:	d102      	bne.n	80046dc <sbrk_aligned+0x14>
 80046d6:	f000 f9eb 	bl	8004ab0 <_sbrk_r>
 80046da:	6030      	str	r0, [r6, #0]
 80046dc:	0029      	movs	r1, r5
 80046de:	0020      	movs	r0, r4
 80046e0:	f000 f9e6 	bl	8004ab0 <_sbrk_r>
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d103      	bne.n	80046f0 <sbrk_aligned+0x28>
 80046e8:	2501      	movs	r5, #1
 80046ea:	426d      	negs	r5, r5
 80046ec:	0028      	movs	r0, r5
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	2303      	movs	r3, #3
 80046f2:	1cc5      	adds	r5, r0, #3
 80046f4:	439d      	bics	r5, r3
 80046f6:	42a8      	cmp	r0, r5
 80046f8:	d0f8      	beq.n	80046ec <sbrk_aligned+0x24>
 80046fa:	1a29      	subs	r1, r5, r0
 80046fc:	0020      	movs	r0, r4
 80046fe:	f000 f9d7 	bl	8004ab0 <_sbrk_r>
 8004702:	3001      	adds	r0, #1
 8004704:	d1f2      	bne.n	80046ec <sbrk_aligned+0x24>
 8004706:	e7ef      	b.n	80046e8 <sbrk_aligned+0x20>
 8004708:	20001288 	.word	0x20001288

0800470c <_malloc_r>:
 800470c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800470e:	2203      	movs	r2, #3
 8004710:	1ccb      	adds	r3, r1, #3
 8004712:	4393      	bics	r3, r2
 8004714:	3308      	adds	r3, #8
 8004716:	0005      	movs	r5, r0
 8004718:	001f      	movs	r7, r3
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d234      	bcs.n	8004788 <_malloc_r+0x7c>
 800471e:	270c      	movs	r7, #12
 8004720:	42b9      	cmp	r1, r7
 8004722:	d833      	bhi.n	800478c <_malloc_r+0x80>
 8004724:	0028      	movs	r0, r5
 8004726:	f000 f871 	bl	800480c <__malloc_lock>
 800472a:	4e37      	ldr	r6, [pc, #220]	@ (8004808 <_malloc_r+0xfc>)
 800472c:	6833      	ldr	r3, [r6, #0]
 800472e:	001c      	movs	r4, r3
 8004730:	2c00      	cmp	r4, #0
 8004732:	d12f      	bne.n	8004794 <_malloc_r+0x88>
 8004734:	0039      	movs	r1, r7
 8004736:	0028      	movs	r0, r5
 8004738:	f7ff ffc6 	bl	80046c8 <sbrk_aligned>
 800473c:	0004      	movs	r4, r0
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	d15f      	bne.n	8004802 <_malloc_r+0xf6>
 8004742:	6834      	ldr	r4, [r6, #0]
 8004744:	9400      	str	r4, [sp, #0]
 8004746:	9b00      	ldr	r3, [sp, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d14a      	bne.n	80047e2 <_malloc_r+0xd6>
 800474c:	2c00      	cmp	r4, #0
 800474e:	d052      	beq.n	80047f6 <_malloc_r+0xea>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	0028      	movs	r0, r5
 8004754:	18e3      	adds	r3, r4, r3
 8004756:	9900      	ldr	r1, [sp, #0]
 8004758:	9301      	str	r3, [sp, #4]
 800475a:	f000 f9a9 	bl	8004ab0 <_sbrk_r>
 800475e:	9b01      	ldr	r3, [sp, #4]
 8004760:	4283      	cmp	r3, r0
 8004762:	d148      	bne.n	80047f6 <_malloc_r+0xea>
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	0028      	movs	r0, r5
 8004768:	1aff      	subs	r7, r7, r3
 800476a:	0039      	movs	r1, r7
 800476c:	f7ff ffac 	bl	80046c8 <sbrk_aligned>
 8004770:	3001      	adds	r0, #1
 8004772:	d040      	beq.n	80047f6 <_malloc_r+0xea>
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	19db      	adds	r3, r3, r7
 8004778:	6023      	str	r3, [r4, #0]
 800477a:	6833      	ldr	r3, [r6, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	2a00      	cmp	r2, #0
 8004780:	d133      	bne.n	80047ea <_malloc_r+0xde>
 8004782:	9b00      	ldr	r3, [sp, #0]
 8004784:	6033      	str	r3, [r6, #0]
 8004786:	e019      	b.n	80047bc <_malloc_r+0xb0>
 8004788:	2b00      	cmp	r3, #0
 800478a:	dac9      	bge.n	8004720 <_malloc_r+0x14>
 800478c:	230c      	movs	r3, #12
 800478e:	602b      	str	r3, [r5, #0]
 8004790:	2000      	movs	r0, #0
 8004792:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	1bc9      	subs	r1, r1, r7
 8004798:	d420      	bmi.n	80047dc <_malloc_r+0xd0>
 800479a:	290b      	cmp	r1, #11
 800479c:	d90a      	bls.n	80047b4 <_malloc_r+0xa8>
 800479e:	19e2      	adds	r2, r4, r7
 80047a0:	6027      	str	r7, [r4, #0]
 80047a2:	42a3      	cmp	r3, r4
 80047a4:	d104      	bne.n	80047b0 <_malloc_r+0xa4>
 80047a6:	6032      	str	r2, [r6, #0]
 80047a8:	6863      	ldr	r3, [r4, #4]
 80047aa:	6011      	str	r1, [r2, #0]
 80047ac:	6053      	str	r3, [r2, #4]
 80047ae:	e005      	b.n	80047bc <_malloc_r+0xb0>
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	e7f9      	b.n	80047a8 <_malloc_r+0x9c>
 80047b4:	6862      	ldr	r2, [r4, #4]
 80047b6:	42a3      	cmp	r3, r4
 80047b8:	d10e      	bne.n	80047d8 <_malloc_r+0xcc>
 80047ba:	6032      	str	r2, [r6, #0]
 80047bc:	0028      	movs	r0, r5
 80047be:	f000 f82d 	bl	800481c <__malloc_unlock>
 80047c2:	0020      	movs	r0, r4
 80047c4:	2207      	movs	r2, #7
 80047c6:	300b      	adds	r0, #11
 80047c8:	1d23      	adds	r3, r4, #4
 80047ca:	4390      	bics	r0, r2
 80047cc:	1ac2      	subs	r2, r0, r3
 80047ce:	4298      	cmp	r0, r3
 80047d0:	d0df      	beq.n	8004792 <_malloc_r+0x86>
 80047d2:	1a1b      	subs	r3, r3, r0
 80047d4:	50a3      	str	r3, [r4, r2]
 80047d6:	e7dc      	b.n	8004792 <_malloc_r+0x86>
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	e7ef      	b.n	80047bc <_malloc_r+0xb0>
 80047dc:	0023      	movs	r3, r4
 80047de:	6864      	ldr	r4, [r4, #4]
 80047e0:	e7a6      	b.n	8004730 <_malloc_r+0x24>
 80047e2:	9c00      	ldr	r4, [sp, #0]
 80047e4:	6863      	ldr	r3, [r4, #4]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	e7ad      	b.n	8004746 <_malloc_r+0x3a>
 80047ea:	001a      	movs	r2, r3
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	42a3      	cmp	r3, r4
 80047f0:	d1fb      	bne.n	80047ea <_malloc_r+0xde>
 80047f2:	2300      	movs	r3, #0
 80047f4:	e7da      	b.n	80047ac <_malloc_r+0xa0>
 80047f6:	230c      	movs	r3, #12
 80047f8:	0028      	movs	r0, r5
 80047fa:	602b      	str	r3, [r5, #0]
 80047fc:	f000 f80e 	bl	800481c <__malloc_unlock>
 8004800:	e7c6      	b.n	8004790 <_malloc_r+0x84>
 8004802:	6007      	str	r7, [r0, #0]
 8004804:	e7da      	b.n	80047bc <_malloc_r+0xb0>
 8004806:	46c0      	nop			@ (mov r8, r8)
 8004808:	2000128c 	.word	0x2000128c

0800480c <__malloc_lock>:
 800480c:	b510      	push	{r4, lr}
 800480e:	4802      	ldr	r0, [pc, #8]	@ (8004818 <__malloc_lock+0xc>)
 8004810:	f7ff ff0d 	bl	800462e <__retarget_lock_acquire_recursive>
 8004814:	bd10      	pop	{r4, pc}
 8004816:	46c0      	nop			@ (mov r8, r8)
 8004818:	20001284 	.word	0x20001284

0800481c <__malloc_unlock>:
 800481c:	b510      	push	{r4, lr}
 800481e:	4802      	ldr	r0, [pc, #8]	@ (8004828 <__malloc_unlock+0xc>)
 8004820:	f7ff ff06 	bl	8004630 <__retarget_lock_release_recursive>
 8004824:	bd10      	pop	{r4, pc}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	20001284 	.word	0x20001284

0800482c <__sflush_r>:
 800482c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800482e:	220c      	movs	r2, #12
 8004830:	5e8b      	ldrsh	r3, [r1, r2]
 8004832:	0005      	movs	r5, r0
 8004834:	000c      	movs	r4, r1
 8004836:	071a      	lsls	r2, r3, #28
 8004838:	d456      	bmi.n	80048e8 <__sflush_r+0xbc>
 800483a:	684a      	ldr	r2, [r1, #4]
 800483c:	2a00      	cmp	r2, #0
 800483e:	dc02      	bgt.n	8004846 <__sflush_r+0x1a>
 8004840:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004842:	2a00      	cmp	r2, #0
 8004844:	dd4e      	ble.n	80048e4 <__sflush_r+0xb8>
 8004846:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004848:	2f00      	cmp	r7, #0
 800484a:	d04b      	beq.n	80048e4 <__sflush_r+0xb8>
 800484c:	2200      	movs	r2, #0
 800484e:	2080      	movs	r0, #128	@ 0x80
 8004850:	682e      	ldr	r6, [r5, #0]
 8004852:	602a      	str	r2, [r5, #0]
 8004854:	001a      	movs	r2, r3
 8004856:	0140      	lsls	r0, r0, #5
 8004858:	6a21      	ldr	r1, [r4, #32]
 800485a:	4002      	ands	r2, r0
 800485c:	4203      	tst	r3, r0
 800485e:	d033      	beq.n	80048c8 <__sflush_r+0x9c>
 8004860:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004862:	89a3      	ldrh	r3, [r4, #12]
 8004864:	075b      	lsls	r3, r3, #29
 8004866:	d506      	bpl.n	8004876 <__sflush_r+0x4a>
 8004868:	6863      	ldr	r3, [r4, #4]
 800486a:	1ad2      	subs	r2, r2, r3
 800486c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800486e:	2b00      	cmp	r3, #0
 8004870:	d001      	beq.n	8004876 <__sflush_r+0x4a>
 8004872:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004874:	1ad2      	subs	r2, r2, r3
 8004876:	2300      	movs	r3, #0
 8004878:	0028      	movs	r0, r5
 800487a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800487c:	6a21      	ldr	r1, [r4, #32]
 800487e:	47b8      	blx	r7
 8004880:	89a2      	ldrh	r2, [r4, #12]
 8004882:	1c43      	adds	r3, r0, #1
 8004884:	d106      	bne.n	8004894 <__sflush_r+0x68>
 8004886:	6829      	ldr	r1, [r5, #0]
 8004888:	291d      	cmp	r1, #29
 800488a:	d846      	bhi.n	800491a <__sflush_r+0xee>
 800488c:	4b29      	ldr	r3, [pc, #164]	@ (8004934 <__sflush_r+0x108>)
 800488e:	40cb      	lsrs	r3, r1
 8004890:	07db      	lsls	r3, r3, #31
 8004892:	d542      	bpl.n	800491a <__sflush_r+0xee>
 8004894:	2300      	movs	r3, #0
 8004896:	6063      	str	r3, [r4, #4]
 8004898:	6923      	ldr	r3, [r4, #16]
 800489a:	6023      	str	r3, [r4, #0]
 800489c:	04d2      	lsls	r2, r2, #19
 800489e:	d505      	bpl.n	80048ac <__sflush_r+0x80>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <__sflush_r+0x7e>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d100      	bne.n	80048ac <__sflush_r+0x80>
 80048aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80048ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80048ae:	602e      	str	r6, [r5, #0]
 80048b0:	2900      	cmp	r1, #0
 80048b2:	d017      	beq.n	80048e4 <__sflush_r+0xb8>
 80048b4:	0023      	movs	r3, r4
 80048b6:	3344      	adds	r3, #68	@ 0x44
 80048b8:	4299      	cmp	r1, r3
 80048ba:	d002      	beq.n	80048c2 <__sflush_r+0x96>
 80048bc:	0028      	movs	r0, r5
 80048be:	f7ff feb9 	bl	8004634 <_free_r>
 80048c2:	2300      	movs	r3, #0
 80048c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80048c6:	e00d      	b.n	80048e4 <__sflush_r+0xb8>
 80048c8:	2301      	movs	r3, #1
 80048ca:	0028      	movs	r0, r5
 80048cc:	47b8      	blx	r7
 80048ce:	0002      	movs	r2, r0
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d1c6      	bne.n	8004862 <__sflush_r+0x36>
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0c3      	beq.n	8004862 <__sflush_r+0x36>
 80048da:	2b1d      	cmp	r3, #29
 80048dc:	d001      	beq.n	80048e2 <__sflush_r+0xb6>
 80048de:	2b16      	cmp	r3, #22
 80048e0:	d11a      	bne.n	8004918 <__sflush_r+0xec>
 80048e2:	602e      	str	r6, [r5, #0]
 80048e4:	2000      	movs	r0, #0
 80048e6:	e01e      	b.n	8004926 <__sflush_r+0xfa>
 80048e8:	690e      	ldr	r6, [r1, #16]
 80048ea:	2e00      	cmp	r6, #0
 80048ec:	d0fa      	beq.n	80048e4 <__sflush_r+0xb8>
 80048ee:	680f      	ldr	r7, [r1, #0]
 80048f0:	600e      	str	r6, [r1, #0]
 80048f2:	1bba      	subs	r2, r7, r6
 80048f4:	9201      	str	r2, [sp, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	079b      	lsls	r3, r3, #30
 80048fa:	d100      	bne.n	80048fe <__sflush_r+0xd2>
 80048fc:	694a      	ldr	r2, [r1, #20]
 80048fe:	60a2      	str	r2, [r4, #8]
 8004900:	9b01      	ldr	r3, [sp, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	ddee      	ble.n	80048e4 <__sflush_r+0xb8>
 8004906:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004908:	0032      	movs	r2, r6
 800490a:	001f      	movs	r7, r3
 800490c:	0028      	movs	r0, r5
 800490e:	9b01      	ldr	r3, [sp, #4]
 8004910:	6a21      	ldr	r1, [r4, #32]
 8004912:	47b8      	blx	r7
 8004914:	2800      	cmp	r0, #0
 8004916:	dc07      	bgt.n	8004928 <__sflush_r+0xfc>
 8004918:	89a2      	ldrh	r2, [r4, #12]
 800491a:	2340      	movs	r3, #64	@ 0x40
 800491c:	2001      	movs	r0, #1
 800491e:	4313      	orrs	r3, r2
 8004920:	b21b      	sxth	r3, r3
 8004922:	81a3      	strh	r3, [r4, #12]
 8004924:	4240      	negs	r0, r0
 8004926:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004928:	9b01      	ldr	r3, [sp, #4]
 800492a:	1836      	adds	r6, r6, r0
 800492c:	1a1b      	subs	r3, r3, r0
 800492e:	9301      	str	r3, [sp, #4]
 8004930:	e7e6      	b.n	8004900 <__sflush_r+0xd4>
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	20400001 	.word	0x20400001

08004938 <_fflush_r>:
 8004938:	690b      	ldr	r3, [r1, #16]
 800493a:	b570      	push	{r4, r5, r6, lr}
 800493c:	0005      	movs	r5, r0
 800493e:	000c      	movs	r4, r1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d102      	bne.n	800494a <_fflush_r+0x12>
 8004944:	2500      	movs	r5, #0
 8004946:	0028      	movs	r0, r5
 8004948:	bd70      	pop	{r4, r5, r6, pc}
 800494a:	2800      	cmp	r0, #0
 800494c:	d004      	beq.n	8004958 <_fflush_r+0x20>
 800494e:	6a03      	ldr	r3, [r0, #32]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <_fflush_r+0x20>
 8004954:	f7ff fc00 	bl	8004158 <__sinit>
 8004958:	220c      	movs	r2, #12
 800495a:	5ea3      	ldrsh	r3, [r4, r2]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d0f1      	beq.n	8004944 <_fflush_r+0xc>
 8004960:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004962:	07d2      	lsls	r2, r2, #31
 8004964:	d404      	bmi.n	8004970 <_fflush_r+0x38>
 8004966:	059b      	lsls	r3, r3, #22
 8004968:	d402      	bmi.n	8004970 <_fflush_r+0x38>
 800496a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800496c:	f7ff fe5f 	bl	800462e <__retarget_lock_acquire_recursive>
 8004970:	0028      	movs	r0, r5
 8004972:	0021      	movs	r1, r4
 8004974:	f7ff ff5a 	bl	800482c <__sflush_r>
 8004978:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800497a:	0005      	movs	r5, r0
 800497c:	07db      	lsls	r3, r3, #31
 800497e:	d4e2      	bmi.n	8004946 <_fflush_r+0xe>
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	059b      	lsls	r3, r3, #22
 8004984:	d4df      	bmi.n	8004946 <_fflush_r+0xe>
 8004986:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004988:	f7ff fe52 	bl	8004630 <__retarget_lock_release_recursive>
 800498c:	e7db      	b.n	8004946 <_fflush_r+0xe>
	...

08004990 <__swhatbuf_r>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	000e      	movs	r6, r1
 8004994:	001d      	movs	r5, r3
 8004996:	230e      	movs	r3, #14
 8004998:	5ec9      	ldrsh	r1, [r1, r3]
 800499a:	0014      	movs	r4, r2
 800499c:	b096      	sub	sp, #88	@ 0x58
 800499e:	2900      	cmp	r1, #0
 80049a0:	da0c      	bge.n	80049bc <__swhatbuf_r+0x2c>
 80049a2:	89b2      	ldrh	r2, [r6, #12]
 80049a4:	2380      	movs	r3, #128	@ 0x80
 80049a6:	0011      	movs	r1, r2
 80049a8:	4019      	ands	r1, r3
 80049aa:	421a      	tst	r2, r3
 80049ac:	d114      	bne.n	80049d8 <__swhatbuf_r+0x48>
 80049ae:	2380      	movs	r3, #128	@ 0x80
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	2000      	movs	r0, #0
 80049b4:	6029      	str	r1, [r5, #0]
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	b016      	add	sp, #88	@ 0x58
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	466a      	mov	r2, sp
 80049be:	f000 f853 	bl	8004a68 <_fstat_r>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	dbed      	blt.n	80049a2 <__swhatbuf_r+0x12>
 80049c6:	23f0      	movs	r3, #240	@ 0xf0
 80049c8:	9901      	ldr	r1, [sp, #4]
 80049ca:	021b      	lsls	r3, r3, #8
 80049cc:	4019      	ands	r1, r3
 80049ce:	4b04      	ldr	r3, [pc, #16]	@ (80049e0 <__swhatbuf_r+0x50>)
 80049d0:	18c9      	adds	r1, r1, r3
 80049d2:	424b      	negs	r3, r1
 80049d4:	4159      	adcs	r1, r3
 80049d6:	e7ea      	b.n	80049ae <__swhatbuf_r+0x1e>
 80049d8:	2100      	movs	r1, #0
 80049da:	2340      	movs	r3, #64	@ 0x40
 80049dc:	e7e9      	b.n	80049b2 <__swhatbuf_r+0x22>
 80049de:	46c0      	nop			@ (mov r8, r8)
 80049e0:	ffffe000 	.word	0xffffe000

080049e4 <__smakebuf_r>:
 80049e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e6:	2602      	movs	r6, #2
 80049e8:	898b      	ldrh	r3, [r1, #12]
 80049ea:	0005      	movs	r5, r0
 80049ec:	000c      	movs	r4, r1
 80049ee:	b085      	sub	sp, #20
 80049f0:	4233      	tst	r3, r6
 80049f2:	d007      	beq.n	8004a04 <__smakebuf_r+0x20>
 80049f4:	0023      	movs	r3, r4
 80049f6:	3347      	adds	r3, #71	@ 0x47
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	6123      	str	r3, [r4, #16]
 80049fc:	2301      	movs	r3, #1
 80049fe:	6163      	str	r3, [r4, #20]
 8004a00:	b005      	add	sp, #20
 8004a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a04:	ab03      	add	r3, sp, #12
 8004a06:	aa02      	add	r2, sp, #8
 8004a08:	f7ff ffc2 	bl	8004990 <__swhatbuf_r>
 8004a0c:	9f02      	ldr	r7, [sp, #8]
 8004a0e:	9001      	str	r0, [sp, #4]
 8004a10:	0039      	movs	r1, r7
 8004a12:	0028      	movs	r0, r5
 8004a14:	f7ff fe7a 	bl	800470c <_malloc_r>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d108      	bne.n	8004a2e <__smakebuf_r+0x4a>
 8004a1c:	220c      	movs	r2, #12
 8004a1e:	5ea3      	ldrsh	r3, [r4, r2]
 8004a20:	059a      	lsls	r2, r3, #22
 8004a22:	d4ed      	bmi.n	8004a00 <__smakebuf_r+0x1c>
 8004a24:	2203      	movs	r2, #3
 8004a26:	4393      	bics	r3, r2
 8004a28:	431e      	orrs	r6, r3
 8004a2a:	81a6      	strh	r6, [r4, #12]
 8004a2c:	e7e2      	b.n	80049f4 <__smakebuf_r+0x10>
 8004a2e:	2380      	movs	r3, #128	@ 0x80
 8004a30:	89a2      	ldrh	r2, [r4, #12]
 8004a32:	6020      	str	r0, [r4, #0]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	81a3      	strh	r3, [r4, #12]
 8004a38:	9b03      	ldr	r3, [sp, #12]
 8004a3a:	6120      	str	r0, [r4, #16]
 8004a3c:	6167      	str	r7, [r4, #20]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <__smakebuf_r+0x78>
 8004a42:	0028      	movs	r0, r5
 8004a44:	230e      	movs	r3, #14
 8004a46:	5ee1      	ldrsh	r1, [r4, r3]
 8004a48:	f000 f820 	bl	8004a8c <_isatty_r>
 8004a4c:	2800      	cmp	r0, #0
 8004a4e:	d005      	beq.n	8004a5c <__smakebuf_r+0x78>
 8004a50:	2303      	movs	r3, #3
 8004a52:	89a2      	ldrh	r2, [r4, #12]
 8004a54:	439a      	bics	r2, r3
 8004a56:	3b02      	subs	r3, #2
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	81a3      	strh	r3, [r4, #12]
 8004a5c:	89a3      	ldrh	r3, [r4, #12]
 8004a5e:	9a01      	ldr	r2, [sp, #4]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	81a3      	strh	r3, [r4, #12]
 8004a64:	e7cc      	b.n	8004a00 <__smakebuf_r+0x1c>
	...

08004a68 <_fstat_r>:
 8004a68:	2300      	movs	r3, #0
 8004a6a:	b570      	push	{r4, r5, r6, lr}
 8004a6c:	4d06      	ldr	r5, [pc, #24]	@ (8004a88 <_fstat_r+0x20>)
 8004a6e:	0004      	movs	r4, r0
 8004a70:	0008      	movs	r0, r1
 8004a72:	0011      	movs	r1, r2
 8004a74:	602b      	str	r3, [r5, #0]
 8004a76:	f7fb ff10 	bl	800089a <_fstat>
 8004a7a:	1c43      	adds	r3, r0, #1
 8004a7c:	d103      	bne.n	8004a86 <_fstat_r+0x1e>
 8004a7e:	682b      	ldr	r3, [r5, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d000      	beq.n	8004a86 <_fstat_r+0x1e>
 8004a84:	6023      	str	r3, [r4, #0]
 8004a86:	bd70      	pop	{r4, r5, r6, pc}
 8004a88:	20001280 	.word	0x20001280

08004a8c <_isatty_r>:
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	b570      	push	{r4, r5, r6, lr}
 8004a90:	4d06      	ldr	r5, [pc, #24]	@ (8004aac <_isatty_r+0x20>)
 8004a92:	0004      	movs	r4, r0
 8004a94:	0008      	movs	r0, r1
 8004a96:	602b      	str	r3, [r5, #0]
 8004a98:	f7fb ff0d 	bl	80008b6 <_isatty>
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d103      	bne.n	8004aa8 <_isatty_r+0x1c>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d000      	beq.n	8004aa8 <_isatty_r+0x1c>
 8004aa6:	6023      	str	r3, [r4, #0]
 8004aa8:	bd70      	pop	{r4, r5, r6, pc}
 8004aaa:	46c0      	nop			@ (mov r8, r8)
 8004aac:	20001280 	.word	0x20001280

08004ab0 <_sbrk_r>:
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	b570      	push	{r4, r5, r6, lr}
 8004ab4:	4d06      	ldr	r5, [pc, #24]	@ (8004ad0 <_sbrk_r+0x20>)
 8004ab6:	0004      	movs	r4, r0
 8004ab8:	0008      	movs	r0, r1
 8004aba:	602b      	str	r3, [r5, #0]
 8004abc:	f7fb ff10 	bl	80008e0 <_sbrk>
 8004ac0:	1c43      	adds	r3, r0, #1
 8004ac2:	d103      	bne.n	8004acc <_sbrk_r+0x1c>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d000      	beq.n	8004acc <_sbrk_r+0x1c>
 8004aca:	6023      	str	r3, [r4, #0]
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	20001280 	.word	0x20001280

08004ad4 <_init>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	46c0      	nop			@ (mov r8, r8)
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr

08004ae0 <_fini>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	46c0      	nop			@ (mov r8, r8)
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr
